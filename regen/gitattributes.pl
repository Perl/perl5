#!/usr/bin/perl
#
#
# Regenerate (overwriting only if changed):
#
#    .gitattributes
#
# from files that are otherwise automatically regenerated
#
# Accepts the standard regen_lib -q and -v args.
#
# This script is normally invoked from regen.pl.

# This script scans for the magic incantation "# Regenerate" ... "# from files"
# just like above to find the relevant list of files

BEGIN {
    # Get function prototypes
    require './regen/regen_lib.pl';
}

use strict;

# The file is marked as "generated" to Github, so it won't appear in a diff
# See https://docs.github.com/en/repositories/working-with-files/managing-files/customizing-how-changed-files-appear-on-github
sub is_generated {
    my( $file ) = @_;
    $file =~ s!\r?\n!!;
    return "$file linguist-generated=true\n";
}

my %skip;
my %partially_generated = (
    'pod/perldebguts.pod' => 1,
    'pod/perlguts.pod' => 1,
);

foreach (qw(embed_lib.pl regen_lib.pl
            regcharclass_multi_char_folds.pl
            charset_translations.pl
            mph.pl
            )
    ) {
    ++$skip{"regen/$_"};
}

# We parse the files in regen/*.pl for stanzas we recognize to get the list
# of files regenerated by them:
my @generated = map {
    my $fn = $_;
    local $/;
    open my $fh, '<', $fn
        or die "Couldn't read '$fn': $!";
    my $content = <$fh>;
    $content =~ /\# Regenerate \(overwriting only if changed\):\s+\#\s+((\#\s+[^#\n]+\n)++)\#\s+\# from\b/ms
        or warn "$fn: No files listed?!";
    my $generated = $1;
    $generated =~ /^#\s+(\S+)$/mg;
} grep { ! $skip{ $_ } } glob 'regen/*.pl';

my $out= open_new( '.gitattributes', '>',
    { by => $0 } );
print {$out} read_only_top(lang => 'Perl', # well, actually it's "git", but "Perl" is close enough
                           copyright => '2021',
                           file => '.gitattributes',
                           style => '*',
                           copyright => [2021],
                          );

# A hardcoded line
print {$out} '.git_patch export-subst', "\n";
print {$out} '*.pl linguist-language=Perl', "\n";
print {$out} '*.pm linguist-language=Perl', "\n";
print {$out} '*.t linguist-language=Perl', "\n";

chomp( my @hardcoded = grep { /\S/ } <DATA>);

for (grep { ! $partially_generated{ $_ }} sort @generated, @hardcoded) {
    print {$out} is_generated($_);
}

read_only_bottom_close_and_rename($out);

# Generated by metaconfig, but we ship that file canned
# Porting/Glossary

# This list should be asciibetically sorted
__DATA__
lib/unicore/uni_keywords.pl
lib/unicore/DNormalizationProps.txt
lib/unicore/DCoreProperties.txt
perly.act
perly.h
perly.tab
pod/perlapi.pod
pod/perlintern.pod
pod/perlmodlib.pod
pod/perltoc.pod
pod/perluniprops.pod

