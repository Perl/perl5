/* -*- mode: C; buffer-read-only: t -*-
 *
 *    lock_definitions.h
 *
 *    Copyright (C) 2023, 2024 by Larry Wall and others
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 * !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
 * This file is built by regen/lock_definitions.pl from data in
 * regen/lock_definitions.pl.
 * Any changes made here will be lost!
 */

/* This file contains macros to wrap their respective libc uses to ensure that
 * those uses are thread-safe in a multi-threaded environment.
 *
 * Most libc uses are already thread-safe without these wrappers, so do not
 * appear here.  But there are still many uses that do have multi-thread
 * issues.  See "Dealing with embedded perls and threads" in perlclib for
 * details.  Many of those uses can be made thread-safe if every running
 * thread submits to being controlled by an appropriate mutex.  The wrapper
 * macros defined in this file create macros that do this.  Take all libc
 * calls that have corresponding macros in this file, and precede each with
 * the LOCK macro, and make sure that all code paths afterwards include its
 * UNLOCK mate.
 *
 * The macros generated here expand to other macro calls that are expected to
 * be #defined in perl.h, depending on the platform and Configuration.  All
 * expand to no-ops when compiled without threading; in some threaded
 * Configurations many still will expand to no-ops.  Some definitions are
 * no-ops in all current cases, but you should wrap their functions with them
 * anyway, as future work likely will yield Configurations where they aren't
 * just no-ops.
 *
 * perlclib lists some functions that need to be called in single-thread mode
 * at least once, before switching to multi-threaded operation.  The locking
 * macros in this file assume that has been done.
 *
 * perlclib also lists some functions that can't be made thread-safe.  This
 * file defines macros for them that will result in a C compilation error if
 * used.
 *
 * The macros provided here do not protect your code from calls that are
 * susceptible to asynchronous signal issues.
 *
 * Some libc uses are not functions but expand to something that C code can
 * use as lvalues; for example, they can be assigned to.  The macros in this
 * file are not valid for lvalues.
 *
 * Individual uses may have additional caveats.  See their entries below for
 * these, and any additional specific information.
 *
 * You shouldn't use these locking macros for calls that happen so early in
 * the start-up procedure or late in the tear-down one that the appropriate
 * mutex operations aren't fully functional.  These are not likely to be
 * running multi-threaded at that time anyway.
 *
 * Also, the locale-related functions introduced in POSIX 2008 are not
 * portable to platforms that don't support them; for example any Windows one.
 * Perl has extensive code to hide the differences from your code.  You should
 * be using Perl_setlocale() to change and query the locale; and don't use
 * functions like uselocale(), or any function that takes a locale_t parameter
 * (typically such functions have the suffix "_l" in their names).  Keep in
 * mind that the current locale is assumed to be "C" for all Perl programs
 * except within the scope of "use locale", or when calling certain functions
 * in the POSIX module.  The perl core sorts all of this out for you; most
 * functions that deal directly with locale information should not be used.
 *
 * You may override any definitions here simply by #defining your own before
 * #including this file (which likely means before #including perl.h).
 *
 * Best practice is to call the LOCK macro; call the function and copy the
 * result to a per-thread place if that result points to a buffer internal to
 * libc; then UNLOCK it immediately.  After that, you can act on the result.
 *
 * The macros here are generated from an internal DATA section in
 * regen/lock_definitions.pl, populated from information derived from the
 * POSIX 2017 Standard and Linux glibc section 3 man pages (supplemented by
 * other vendor man pages).  (Linux tends to have extra restrictions not in
 * the Standard, and its man pages are typically more detailed than the
 * Standard and other vendors, who may also have the same restrictions, but
 * just don't document them.) The data can easily be adjusted as necessary.
 *
 * Many of the thread vulnerabilities involve the program's environment and
 * locale, so perl has separate mutexes for each of those two types of access.
 * There are a few others, all rare or obsolete.   There are also many races,
 * where certain functions concurrently executing in different threads can
 * interfere with each other unpredictably.  This header file currently lumps
 * all races and non-environment/locale vulnerabilities into a third, generic,
 * mutex.  So the macro names are various combinations of the three mutexes,
 * and whether the lock needs to be exclusive (suffix "x" in the lock name) or
 * non-exclusive (suffix "r" for read-only).  GEN means the generic mutex; ENV
 * the environment one; and LC the locale one.
 *
 * The lumping into the single generic mutex is due to the expectation that
 * such calls are infrequent enough that having a single mutex for all won't
 * noticeably affect performance, and that the more mutexes you have, the more
 * likely deadlock can occur.  Individual cases could be separated into
 * separate mutexes if necessary.  perl.h takes further steps in the expansion
 * of these macros to avoid deadlock altogether.
 */

#ifndef ADDMNTENT_LOCK

   /* addmntent() either was never in the POSIX Standard, or was removed as of
    *             POSIX 2001.
    * addmntent() has potential races with other threads concurrently using
    *             any of: itself, clearerr_unlocked(), __fbufsize(),
    *             fflush_unlocked(), fgetc_unlocked(), fgets_unlocked(),
    *             fgetwc_unlocked(), fgetws_unlocked(), __fpending(),
    *             __fpurge(), fputc_unlocked(), fputs_unlocked(),
    *             fputwc_unlocked(), fputws_unlocked(), fread_unlocked(),
    *             __fsetlocking(), fwrite_unlocked(), getc_unlocked(),
    *             getwc_unlocked(), putc_unlocked(), or putwc_unlocked(). */
#  define ADDMNTENT_LOCK    LCx_LOCK_()
#  define ADDMNTENT_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef ALPHASORT_LOCK
#  define ALPHASORT_LOCK    LCr_LOCK_()
#  define ALPHASORT_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef ASCTIME_LOCK

   /* asctime() Obsolete; use Perl_sv_strftime_tm() instead
    * asctime() has potential races with other threads concurrently using
    *           either itself or ctime(). */
#  define ASCTIME_LOCK    GENx_LCr_LOCK_()
#  define ASCTIME_UNLOCK  GENx_LCr_UNLOCK_()
#endif

#ifndef ASCTIME_R_LOCK

   /* asctime_r() Obsolete; use Perl_sv_strftime_tm() instead */
#  define ASCTIME_R_LOCK    LCr_LOCK_()
#  define ASCTIME_R_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef ASPRINTF_LOCK

   /* asprintf() either was never in the POSIX Standard, or was removed as of
    *            POSIX 2001. */
#  define ASPRINTF_LOCK    LCr_LOCK_()
#  define ASPRINTF_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef ATOF_LOCK
#  define ATOF_LOCK    LCr_LOCK_()
#  define ATOF_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef ATOI_LOCK
#  define ATOI_LOCK    LCr_LOCK_()
#  define ATOI_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef ATOL_LOCK
#  define ATOL_LOCK    LCr_LOCK_()
#  define ATOL_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef ATOLL_LOCK
#  define ATOLL_LOCK    LCr_LOCK_()
#  define ATOLL_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef BASENAME_LOCK
#  ifndef __GLIBC__
#    define BASENAME_LOCK    GENx_LOCK_
#    define BASENAME_UNLOCK  GENx_UNLOCK_
#  else
#    define BASENAME_LOCK    NOOP
#    define BASENAME_UNLOCK  NOOP
#  endif
#endif

#ifndef BTOWC_LOCK
#  define BTOWC_LOCK
#  define BTOWC_UNLOCK
#endif

#ifndef CATGETS_LOCK
#  ifndef __GLIBC__
#    define CATGETS_LOCK    GENx_LOCK_
#    define CATGETS_UNLOCK  GENx_UNLOCK_
#  else
#    define CATGETS_LOCK    NOOP
#    define CATGETS_UNLOCK  NOOP
#  endif
#endif

#ifndef CATOPEN_LOCK
#  define CATOPEN_LOCK    ENVr_LCr_LOCK_()
#  define CATOPEN_UNLOCK  ENVr_LCr_UNLOCK_()
#endif

#ifndef CLEARENV_LOCK
#  define CLEARENV_LOCK    ENVx_LOCK_
#  define CLEARENV_UNLOCK  ENVx_UNLOCK_
#endif

#ifndef CLEARERR_UNLOCKED_LOCK

   /* clearerr_unlocked() either was never in the POSIX Standard, or was
    *                     removed as of POSIX 2001.
    * clearerr_unlocked() has potential races with other threads concurrently
    *                     using any of: itself, addmntent(), __fbufsize(),
    *                     fflush_unlocked(), fgetc_unlocked(),
    *                     fgets_unlocked(), fgetwc_unlocked(),
    *                     fgetws_unlocked(), __fpending(), __fpurge(),
    *                     fputc_unlocked(), fputs_unlocked(),
    *                     fputwc_unlocked(), fputws_unlocked(),
    *                     fread_unlocked(), __fsetlocking(),
    *                     fwrite_unlocked(), getc_unlocked(),
    *                     getwc_unlocked(), putc_unlocked(), or
    *                     putwc_unlocked().
    * clearerr_unlocked() Is thread-safe if flockfile() or ftrylockfile() have
    *                     locked the stream, but should not be used since not
    *                     standardized and not widely implemented */
#  define CLEARERR_UNLOCKED_LOCK    LCx_LOCK_()
#  define CLEARERR_UNLOCKED_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef CRYPT_LOCK

   /* crypt() has potential races with other threads concurrently using any
    *         of: itself, encrypt(), or setkey(). */
#  define CRYPT_LOCK    GENx_LOCK_
#  define CRYPT_UNLOCK  GENx_UNLOCK_
#endif

#ifndef CRYPT_GENSALT_LOCK

   /* crypt_gensalt() either was never in the POSIX Standard, or was removed
    *                 as of POSIX 2001. */
#  define CRYPT_GENSALT_LOCK    GENx_LOCK_
#  define CRYPT_GENSALT_UNLOCK  GENx_UNLOCK_
#endif

#ifndef CRYPT_R_LOCK

   /* crypt_r() either was never in the POSIX Standard, or was removed as of
    *           POSIX 2001. */
#  define CRYPT_R_LOCK    NOOP
#  define CRYPT_R_UNLOCK  NOOP
#endif

#ifndef CTERMID_LOCK
#  ifndef __GLIBC__

     /* ctermid() locking macros are only valid if '!s' */
#    define CTERMID_LOCK    NOOP
#    define CTERMID_UNLOCK  NOOP
#  else
#    define CTERMID_LOCK    NOOP
#    define CTERMID_UNLOCK  NOOP
#  endif
#endif

#ifndef CTERMID_R_LOCK

   /* ctermid_r() either was never in the POSIX Standard, or was removed as of
    *             POSIX 2001. */
#  define CTERMID_R_LOCK    NOOP
#  define CTERMID_R_UNLOCK  NOOP
#endif

#ifndef CTIME_LOCK

   /* ctime() Obsolete; use Perl_sv_strftime_ints() instead
    * ctime() has potential races with other threads concurrently using any
    *         of: itself, asctime(), ctime_r(), daylight, gmtime(),
    *         localtime(), localtime_r(), mktime(), strftime(), timezone,
    *         tzname, or tzset(). */
#  define CTIME_LOCK    GENx_ENVr_LCr_LOCK_()
#  define CTIME_UNLOCK  GENx_ENVr_LCr_UNLOCK_()
#endif

#ifndef CTIME_R_LOCK

   /* ctime_r() Obsolete; use Perl_sv_strftime_ints() instead
    * ctime_r() has potential races with other threads concurrently using any
    *           of: itself, ctime(), daylight, localtime(), localtime_r(),
    *           mktime(), strftime(), timezone, tzname, or tzset(). */
#  define CTIME_R_LOCK    GENx_ENVr_LCr_LOCK_()
#  define CTIME_R_UNLOCK  GENx_ENVr_LCr_UNLOCK_()
#endif

#ifndef CUSERID_LOCK

   /* cuserid() Obsolete; DO NOT USE; see its man page
    * cuserid() either was never in the POSIX Standard, or was removed as of
    *           POSIX 2001.
    * cuserid() locking macros are only valid if '!string' */
#  define CUSERID_LOCK    LCr_LOCK_()
#  define CUSERID_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef DAYLIGHT_LOCK

   /* daylight has potential races with other threads concurrently using any
    *          of: itself, ctime(), ctime_r(), localtime(), localtime_r(),
    *          mktime(), strftime(), timezone, tzname, or tzset().
    * daylight locking macros are only valid if its value is used read-only */
#  define DAYLIGHT_LOCK    GENx_LCr_LOCK_()
#  define DAYLIGHT_UNLOCK  GENx_LCr_UNLOCK_()
#endif

#ifndef DBM_CLEARERR_LOCK

   /* dbm_clearerr() has potential races with other threads concurrently using
    *                any of: itself, dbm_close(), dbm_delete(), dbm_error(),
    *                dbm_fetch(), dbm_firstkey(), dbm_nextkey(), dbm_open(),
    *                or dbm_store(). */
#  define DBM_CLEARERR_LOCK    GENx_LOCK_
#  define DBM_CLEARERR_UNLOCK  GENx_UNLOCK_
#endif

#ifndef DBM_CLOSE_LOCK

   /* dbm_close() has potential races with other threads concurrently using
    *             any of: itself, dbm_clearerr(), dbm_delete(), dbm_error(),
    *             dbm_fetch(), dbm_firstkey(), dbm_nextkey(), dbm_open(), or
    *             dbm_store(). */
#  define DBM_CLOSE_LOCK    GENx_LOCK_
#  define DBM_CLOSE_UNLOCK  GENx_UNLOCK_
#endif

#ifndef DBM_DELETE_LOCK

   /* dbm_delete() has potential races with other threads concurrently using
    *              any of: itself, dbm_clearerr(), dbm_close(), dbm_error(),
    *              dbm_fetch(), dbm_firstkey(), dbm_nextkey(), dbm_open(), or
    *              dbm_store(). */
#  define DBM_DELETE_LOCK    GENx_LOCK_
#  define DBM_DELETE_UNLOCK  GENx_UNLOCK_
#endif

#ifndef DBM_ERROR_LOCK

   /* dbm_error() has potential races with other threads concurrently using
    *             any of: itself, dbm_clearerr(), dbm_close(), dbm_delete(),
    *             dbm_fetch(), dbm_firstkey(), dbm_nextkey(), dbm_open(), or
    *             dbm_store(). */
#  define DBM_ERROR_LOCK    GENx_LOCK_
#  define DBM_ERROR_UNLOCK  GENx_UNLOCK_
#endif

#ifndef DBM_FETCH_LOCK

   /* dbm_fetch() has potential races with other threads concurrently using
    *             any of: itself, dbm_clearerr(), dbm_close(), dbm_delete(),
    *             dbm_error(), dbm_firstkey(), dbm_nextkey(), dbm_open(), or
    *             dbm_store(). */
#  define DBM_FETCH_LOCK    GENx_LOCK_
#  define DBM_FETCH_UNLOCK  GENx_UNLOCK_
#endif

#ifndef DBM_FIRSTKEY_LOCK

   /* dbm_firstkey() has potential races with other threads concurrently using
    *                any of: itself, dbm_clearerr(), dbm_close(),
    *                dbm_delete(), dbm_error(), dbm_fetch(), dbm_nextkey(),
    *                dbm_open(), or dbm_store(). */
#  define DBM_FIRSTKEY_LOCK    GENx_LOCK_
#  define DBM_FIRSTKEY_UNLOCK  GENx_UNLOCK_
#endif

#ifndef DBM_NEXTKEY_LOCK

   /* dbm_nextkey() has potential races with other threads concurrently using
    *               any of: itself, dbm_clearerr(), dbm_close(), dbm_delete(),
    *               dbm_error(), dbm_fetch(), dbm_firstkey(), dbm_open(), or
    *               dbm_store(). */
#  define DBM_NEXTKEY_LOCK    GENx_LOCK_
#  define DBM_NEXTKEY_UNLOCK  GENx_UNLOCK_
#endif

#ifndef DBM_OPEN_LOCK

   /* dbm_open() has potential races with other threads concurrently using any
    *            of: itself, dbm_clearerr(), dbm_close(), dbm_delete(),
    *            dbm_error(), dbm_fetch(), dbm_firstkey(), dbm_nextkey(), or
    *            dbm_store(). */
#  define DBM_OPEN_LOCK    GENx_LOCK_
#  define DBM_OPEN_UNLOCK  GENx_UNLOCK_
#endif

#ifndef DBM_STORE_LOCK

   /* dbm_store() has potential races with other threads concurrently using
    *             any of: itself, dbm_clearerr(), dbm_close(), dbm_delete(),
    *             dbm_error(), dbm_fetch(), dbm_firstkey(), dbm_nextkey(), or
    *             dbm_open(). */
#  define DBM_STORE_LOCK    GENx_LOCK_
#  define DBM_STORE_UNLOCK  GENx_UNLOCK_
#endif

#ifndef DIRNAME_LOCK
#  ifndef __GLIBC__
#    define DIRNAME_LOCK    LCr_LOCK_()
#    define DIRNAME_UNLOCK  LCr_UNLOCK_()
#  else
#    define DIRNAME_LOCK    NOOP
#    define DIRNAME_UNLOCK  NOOP
#  endif
#endif

#ifndef DLERROR_LOCK
#  ifndef __GLIBC__
#    define DLERROR_LOCK    GENx_LOCK_
#    define DLERROR_UNLOCK  GENx_UNLOCK_
#  else
#    define DLERROR_LOCK    NOOP
#    define DLERROR_UNLOCK  NOOP
#  endif
#endif

#ifndef DPRINTF_LOCK
#  define DPRINTF_LOCK    LCr_LOCK_()
#  define DPRINTF_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef DRAND48_LOCK

   /* drand48() has potential races with other threads concurrently using any
    *           of: itself, erand48(), jrand48(), lcong48(), lrand48(),
    *           mrand48(), nrand48(), seed48(), or srand48(). */
#  define DRAND48_LOCK    GENx_LOCK_
#  define DRAND48_UNLOCK  GENx_UNLOCK_
#endif

#ifndef DRAND48_R_LOCK

   /* drand48_r() either was never in the POSIX Standard, or was removed as of
    *             POSIX 2001.
    * drand48_r() has potential races with other threads concurrently using
    *             any of: itself, erand48_r(), jrand48_r(), lcong48_r(),
    *             lrand48_r(), mrand48_r(), nrand48_r(), seed48_r(), or
    *             srand48_r(). */
#  define DRAND48_R_LOCK    GENx_LOCK_
#  define DRAND48_R_UNLOCK  GENx_UNLOCK_
#endif

#ifndef ECVT_LOCK

   /* ecvt() Obsolete; use snprintf() instead */
#  define ECVT_LOCK    GENx_LOCK_
#  define ECVT_UNLOCK  GENx_UNLOCK_
#endif

#ifndef ENCRYPT_LOCK

   /* encrypt() has potential races with other threads concurrently using any
    *           of: itself, crypt(), or setkey(). */
#  define ENCRYPT_LOCK    GENx_LOCK_
#  define ENCRYPT_UNLOCK  GENx_UNLOCK_
#endif

#ifndef ENDALIASENT_LOCK

   /* endaliasent() either was never in the POSIX Standard, or was removed as
    *               of POSIX 2001. */
#  define ENDALIASENT_LOCK    LCr_LOCK_()
#  define ENDALIASENT_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef ENDFSENT_LOCK

   /* endfsent() either was never in the POSIX Standard, or was removed as of
    *            POSIX 2001.
    * endfsent() has potential races with other threads concurrently using any
    *            of: itself, getfsent(), getfsfile(), getfsspec(), or
    *            setfsent(). */
#  define ENDFSENT_LOCK    LCx_LOCK_()
#  define ENDFSENT_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef ENDGRENT_LOCK

   /* endgrent() has potential races with other threads concurrently using any
    *            of: itself, endgrent_r(), getgrent(), getgrent_r(),
    *            setgrent(), or setgrent_r(). */
#  define ENDGRENT_LOCK    LCx_LOCK_()
#  define ENDGRENT_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef ENDGRENT_R_LOCK

   /* endgrent_r() Obsolete; use endgrent() instead
    * endgrent_r() either was never in the POSIX Standard, or was removed as
    *              of POSIX 2001.
    * endgrent_r() has potential races with other threads concurrently using
    *              any of: itself, endgrent(), getgrent(), getgrent_r(),
    *              setgrent(), or setgrent_r(). */
#  define ENDGRENT_R_LOCK    LCx_LOCK_()
#  define ENDGRENT_R_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef ENDHOSTENT_LOCK

   /* endhostent() has potential races with other threads concurrently using
    *              any of: itself, endhostent_r(), gethostent(),
    *              gethostent_r(), sethostent(), or sethostent_r(). */
#  define ENDHOSTENT_LOCK    GENx_ENVr_LCr_LOCK_()
#  define ENDHOSTENT_UNLOCK  GENx_ENVr_LCr_UNLOCK_()
#endif

#ifndef ENDHOSTENT_R_LOCK

   /* endhostent_r() Obsolete; use endhostent() instead
    * endhostent_r() either was never in the POSIX Standard, or was removed as
    *                of POSIX 2001.
    * endhostent_r() has potential races with other threads concurrently using
    *                any of: itself, endhostent(), gethostent(),
    *                gethostent_r(), sethostent(), or sethostent_r(). */
#  define ENDHOSTENT_R_LOCK    GENx_ENVr_LCr_LOCK_()
#  define ENDHOSTENT_R_UNLOCK  GENx_ENVr_LCr_UNLOCK_()
#endif

#ifndef ENDNETENT_LOCK

   /* endnetent() has potential races with other threads concurrently using
    *             any of: itself, endnetent_r(), getnetent(), setnetent(), or
    *             setnetent_r(). */
#  define ENDNETENT_LOCK    GENx_ENVr_LCr_LOCK_()
#  define ENDNETENT_UNLOCK  GENx_ENVr_LCr_UNLOCK_()
#endif

#ifndef ENDNETENT_R_LOCK

   /* endnetent_r() Obsolete; use endnetent() instead
    * endnetent_r() either was never in the POSIX Standard, or was removed as
    *               of POSIX 2001.
    * endnetent_r() has potential races with other threads concurrently using
    *               any of: itself, endnetent(), getnetent(), setnetent(), or
    *               setnetent_r(). */
#  define ENDNETENT_R_LOCK    GENx_ENVr_LCr_LOCK_()
#  define ENDNETENT_R_UNLOCK  GENx_ENVr_LCr_UNLOCK_()
#endif

#ifndef ENDNETGRENT_LOCK

   /* endnetgrent() either was never in the POSIX Standard, or was removed as
    *               of POSIX 2001.
    * endnetgrent() has potential races with other threads concurrently using
    *               any of: itself, getnetgrent(), getnetgrent_r(), innetgr(),
    *               or setnetgrent(). */
#  define ENDNETGRENT_LOCK    LCx_LOCK_()
#  define ENDNETGRENT_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef ENDPROTOENT_LOCK

   /* endprotoent() has potential races with other threads concurrently using
    *               any of: itself, endprotoent_r(), getprotoent(),
    *               setprotoent(), or setprotoent_r(). */
#  define ENDPROTOENT_LOCK    LCx_LOCK_()
#  define ENDPROTOENT_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef ENDPROTOENT_R_LOCK

   /* endprotoent_r() Obsolete; use endprotoent() instead
    * endprotoent_r() either was never in the POSIX Standard, or was removed
    *                 as of POSIX 2001.
    * endprotoent_r() has potential races with other threads concurrently
    *                 using any of: itself, endprotoent(), getprotoent(),
    *                 setprotoent(), or setprotoent_r(). */
#  define ENDPROTOENT_R_LOCK    LCx_LOCK_()
#  define ENDPROTOENT_R_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef ENDPWENT_LOCK

   /* endpwent() has potential races with other threads concurrently using any
    *            of: itself, endpwent_r(), getpwent(), getpwent_r(),
    *            setpwent(), or setpwent_r(). */
#  define ENDPWENT_LOCK    LCx_LOCK_()
#  define ENDPWENT_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef ENDPWENT_R_LOCK

   /* endpwent_r() Obsolete; use endpwent() instead
    * endpwent_r() either was never in the POSIX Standard, or was removed as
    *              of POSIX 2001.
    * endpwent_r() has potential races with other threads concurrently using
    *              any of: itself, endpwent(), getpwent(), getpwent_r(),
    *              setpwent(), or setpwent_r(). */
#  define ENDPWENT_R_LOCK    LCx_LOCK_()
#  define ENDPWENT_R_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef ENDRPCENT_LOCK

   /* endrpcent() either was never in the POSIX Standard, or was removed as of
    *             POSIX 2001. */
#  define ENDRPCENT_LOCK    LCr_LOCK_()
#  define ENDRPCENT_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef ENDSERVENT_LOCK

   /* endservent() has potential races with other threads concurrently using
    *              any of: itself, endservent_r(), getservent(), setservent(),
    *              or setservent_r(). */
#  define ENDSERVENT_LOCK    LCx_LOCK_()
#  define ENDSERVENT_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef ENDSERVENT_R_LOCK

   /* endservent_r() Obsolete; use endservent() instead
    * endservent_r() either was never in the POSIX Standard, or was removed as
    *                of POSIX 2001.
    * endservent_r() has potential races with other threads concurrently using
    *                any of: itself, endservent(), getservent(), setservent(),
    *                or setservent_r(). */
#  define ENDSERVENT_R_LOCK    LCx_LOCK_()
#  define ENDSERVENT_R_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef ENDSPENT_LOCK

   /* endspent() either was never in the POSIX Standard, or was removed as of
    *            POSIX 2001.
    * endspent() has potential races with other threads concurrently using any
    *            of: itself, getspent(), getspent_r(), or setspent(). */
#  define ENDSPENT_LOCK    LCx_LOCK_()
#  define ENDSPENT_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef ENDTTYENT_LOCK

   /* endttyent() either was never in the POSIX Standard, or was removed as of
    *             POSIX 2001.
    * endttyent() has potential races with other threads concurrently using
    *             any of: itself, getttyent(), getttynam(), or setttyent(). */
#  define ENDTTYENT_LOCK    GENx_LOCK_
#  define ENDTTYENT_UNLOCK  GENx_UNLOCK_
#endif

#ifndef ENDUSERSHELL_LOCK

   /* endusershell() either was never in the POSIX Standard, or was removed as
    *                of POSIX 2001. */
#  define ENDUSERSHELL_LOCK                              \
#    error_endusershell_not_suitable_for_multi-threaded_operation
#endif

#ifndef ENDUTENT_LOCK

   /* endutent() Obsolete; use endutxent() instead
    * endutent() either was never in the POSIX Standard, or was removed as of
    *            POSIX 2001.
    * endutent() has potential races with other threads concurrently using any
    *            of: itself, endutxent(), getlogin(), getlogin_r(),
    *            getutent(), getutid(), getutline(), getutxent(), getutxid(),
    *            getutxline(), glob(), login(), logout(), pututline(),
    *            pututxline(), setutent(), setutxent(), utmpname(), or
    *            wordexp(). */
#  define ENDUTENT_LOCK    GENx_LOCK_
#  define ENDUTENT_UNLOCK  GENx_UNLOCK_
#endif

#ifndef ENDUTXENT_LOCK

   /* endutxent() has potential races with other threads concurrently using
    *             any of: itself, endutent(), getlogin(), getlogin_r(),
    *             getutent(), getutid(), getutline(), getutxent(), getutxid(),
    *             getutxline(), glob(), login(), logout(), pututline(),
    *             pututxline(), setutent(), setutxent(), utmpname(), or
    *             wordexp(). */
#  define ENDUTXENT_LOCK    GENx_LOCK_
#  define ENDUTXENT_UNLOCK  GENx_UNLOCK_
#endif

#ifndef ERAND48_LOCK

   /* erand48() has potential races with other threads concurrently using any
    *           of: itself, drand48(), jrand48(), lcong48(), lrand48(),
    *           mrand48(), nrand48(), seed48(), or srand48(). */
#  define ERAND48_LOCK    GENx_LOCK_
#  define ERAND48_UNLOCK  GENx_UNLOCK_
#endif

#ifndef ERAND48_R_LOCK

   /* erand48_r() either was never in the POSIX Standard, or was removed as of
    *             POSIX 2001.
    * erand48_r() has potential races with other threads concurrently using
    *             any of: itself, drand48_r(), jrand48_r(), lcong48_r(),
    *             lrand48_r(), mrand48_r(), nrand48_r(), seed48_r(), or
    *             srand48_r(). */
#  define ERAND48_R_LOCK    GENx_LOCK_
#  define ERAND48_R_UNLOCK  GENx_UNLOCK_
#endif

#ifndef ERR_LOCK

   /* err() either was never in the POSIX Standard, or was removed as of POSIX
    *       2001. */
#  define ERR_LOCK    LCr_LOCK_()
#  define ERR_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef ERROR_LOCK

   /* error() either was never in the POSIX Standard, or was removed as of
    *         POSIX 2001. */
#  define ERROR_LOCK    LCr_LOCK_()
#  define ERROR_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef ERROR_AT_LINE_LOCK

   /* error_at_line() either was never in the POSIX Standard, or was removed
    *                 as of POSIX 2001.
    * error_at_line() locking macros are only valid if 'error_one_per_line' */
#  define ERROR_AT_LINE_LOCK    LCr_LOCK_()
#  define ERROR_AT_LINE_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef ERRX_LOCK

   /* errx() either was never in the POSIX Standard, or was removed as of
    *        POSIX 2001. */
#  define ERRX_LOCK    LCr_LOCK_()
#  define ERRX_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef ETHER_ATON_LOCK

   /* ether_aton() either was never in the POSIX Standard, or was removed as
    *              of POSIX 2001. */
#  define ETHER_ATON_LOCK                              \
#    error_ether_aton_not_suitable_for_multi-threaded_operation
#endif

#ifndef ETHER_NTOA_LOCK

   /* ether_ntoa() either was never in the POSIX Standard, or was removed as
    *              of POSIX 2001. */
#  define ETHER_NTOA_LOCK                              \
#    error_ether_ntoa_not_suitable_for_multi-threaded_operation
#endif

#ifndef EXECLP_LOCK
#  define EXECLP_LOCK    ENVr_LOCK_
#  define EXECLP_UNLOCK  ENVr_UNLOCK_
#endif

#ifndef EXECVP_LOCK
#  define EXECVP_LOCK    ENVr_LOCK_
#  define EXECVP_UNLOCK  ENVr_UNLOCK_
#endif

#ifndef EXECVPE_LOCK

   /* execvpe() either was never in the POSIX Standard, or was removed as of
    *           POSIX 2001. */
#  define EXECVPE_LOCK    ENVr_LOCK_
#  define EXECVPE_UNLOCK  ENVr_UNLOCK_
#endif

#ifndef EXIT_LOCK
#  define EXIT_LOCK    GENx_LOCK_
#  define EXIT_UNLOCK  GENx_UNLOCK_
#endif

#ifndef __FBUFSIZE_LOCK

   /* __fbufsize() either was never in the POSIX Standard, or was removed as
    *              of POSIX 2001.
    * __fbufsize() has potential races with other threads concurrently using
    *              any of: itself, addmntent(), clearerr_unlocked(),
    *              fflush_unlocked(), fgetc_unlocked(), fgets_unlocked(),
    *              fgetwc_unlocked(), fgetws_unlocked(), __fpending(),
    *              __fpurge(), fputc_unlocked(), fputs_unlocked(),
    *              fputwc_unlocked(), fputws_unlocked(), fread_unlocked(),
    *              __fsetlocking(), fwrite_unlocked(), getc_unlocked(),
    *              getwc_unlocked(), putc_unlocked(), or putwc_unlocked(). */
#  define __FBUFSIZE_LOCK    LCx_LOCK_()
#  define __FBUFSIZE_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef FCLOSEALL_LOCK

   /* fcloseall() either was never in the POSIX Standard, or was removed as of
    *             POSIX 2001. */
#  define FCLOSEALL_LOCK    GENx_LOCK_
#  define FCLOSEALL_UNLOCK  GENx_UNLOCK_
#endif

#ifndef FCVT_LOCK

   /* fcvt() Obsolete; use snprintf() instead */
#  define FCVT_LOCK    GENx_LOCK_
#  define FCVT_UNLOCK  GENx_UNLOCK_
#endif

#ifndef FFLUSH_UNLOCKED_LOCK

   /* fflush_unlocked() either was never in the POSIX Standard, or was removed
    *                   as of POSIX 2001.
    * fflush_unlocked() has potential races with other threads concurrently
    *                   using any of: itself, addmntent(),
    *                   clearerr_unlocked(), __fbufsize(), fgetc_unlocked(),
    *                   fgets_unlocked(), fgetwc_unlocked(),
    *                   fgetws_unlocked(), __fpending(), __fpurge(),
    *                   fputc_unlocked(), fputs_unlocked(), fputwc_unlocked(),
    *                   fputws_unlocked(), fread_unlocked(), __fsetlocking(),
    *                   fwrite_unlocked(), getc_unlocked(), getwc_unlocked(),
    *                   putc_unlocked(), or putwc_unlocked().
    * fflush_unlocked() Is thread-safe if flockfile() or ftrylockfile() have
    *                   locked the stream, but should not be used since not
    *                   standardized and not widely implemented */
#  define FFLUSH_UNLOCKED_LOCK    LCx_LOCK_()
#  define FFLUSH_UNLOCKED_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef FGETC_UNLOCKED_LOCK

   /* fgetc_unlocked() either was never in the POSIX Standard, or was removed
    *                  as of POSIX 2001.
    * fgetc_unlocked() has potential races with other threads concurrently
    *                  using any of: itself, addmntent(), clearerr_unlocked(),
    *                  __fbufsize(), fflush_unlocked(), fgets_unlocked(),
    *                  fgetwc_unlocked(), fgetws_unlocked(), __fpending(),
    *                  __fpurge(), fputc_unlocked(), fputs_unlocked(),
    *                  fputwc_unlocked(), fputws_unlocked(), fread_unlocked(),
    *                  __fsetlocking(), fwrite_unlocked(), getc_unlocked(),
    *                  getwc_unlocked(), putc_unlocked(), or putwc_unlocked().
    * fgetc_unlocked() Is thread-safe if flockfile() or ftrylockfile() have
    *                  locked the stream, but should not be used since not
    *                  standardized and not widely implemented */
#  define FGETC_UNLOCKED_LOCK    LCx_LOCK_()
#  define FGETC_UNLOCKED_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef FGETGRENT_LOCK

   /* fgetgrent() either was never in the POSIX Standard, or was removed as of
    *             POSIX 2001. */
#  define FGETGRENT_LOCK    GENx_LOCK_
#  define FGETGRENT_UNLOCK  GENx_UNLOCK_
#endif

#ifndef FGETPWENT_LOCK

   /* fgetpwent() either was never in the POSIX Standard, or was removed as of
    *             POSIX 2001. */
#  define FGETPWENT_LOCK    GENx_LOCK_
#  define FGETPWENT_UNLOCK  GENx_UNLOCK_
#endif

#ifndef FGETSPENT_LOCK

   /* fgetspent() either was never in the POSIX Standard, or was removed as of
    *             POSIX 2001. */
#  define FGETSPENT_LOCK    GENx_LOCK_
#  define FGETSPENT_UNLOCK  GENx_UNLOCK_
#endif

#ifndef FGETS_UNLOCKED_LOCK

   /* fgets_unlocked() either was never in the POSIX Standard, or was removed
    *                  as of POSIX 2001.
    * fgets_unlocked() has potential races with other threads concurrently
    *                  using any of: itself, addmntent(), clearerr_unlocked(),
    *                  __fbufsize(), fflush_unlocked(), fgetc_unlocked(),
    *                  fgetwc_unlocked(), fgetws_unlocked(), __fpending(),
    *                  __fpurge(), fputc_unlocked(), fputs_unlocked(),
    *                  fputwc_unlocked(), fputws_unlocked(), fread_unlocked(),
    *                  __fsetlocking(), fwrite_unlocked(), getc_unlocked(),
    *                  getwc_unlocked(), putc_unlocked(), or putwc_unlocked().
    * fgets_unlocked() Is thread-safe if flockfile() or ftrylockfile() have
    *                  locked the stream, but should not be used since not
    *                  standardized and not widely implemented */
#  define FGETS_UNLOCKED_LOCK    LCx_LOCK_()
#  define FGETS_UNLOCKED_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef FGETWC_LOCK
#  define FGETWC_LOCK
#  define FGETWC_UNLOCK
#endif

#ifndef FGETWC_UNLOCKED_LOCK

   /* fgetwc_unlocked() either was never in the POSIX Standard, or was removed
    *                   as of POSIX 2001.
    * fgetwc_unlocked() has potential races with other threads concurrently
    *                   using any of: itself, addmntent(),
    *                   clearerr_unlocked(), __fbufsize(), fflush_unlocked(),
    *                   fgetc_unlocked(), fgets_unlocked(), fgetws_unlocked(),
    *                   __fpending(), __fpurge(), fputc_unlocked(),
    *                   fputs_unlocked(), fputwc_unlocked(),
    *                   fputws_unlocked(), fread_unlocked(), __fsetlocking(),
    *                   fwrite_unlocked(), getc_unlocked(), getwc_unlocked(),
    *                   putc_unlocked(), or putwc_unlocked().
    * fgetwc_unlocked() Is thread-safe if flockfile() or ftrylockfile() have
    *                   locked the stream, but should not be used since not
    *                   standardized and not widely implemented */
#  define FGETWC_UNLOCKED_LOCK    LCx_LOCK_()
#  define FGETWC_UNLOCKED_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef FGETWS_LOCK
#  define FGETWS_LOCK
#  define FGETWS_UNLOCK
#endif

#ifndef FGETWS_UNLOCKED_LOCK

   /* fgetws_unlocked() either was never in the POSIX Standard, or was removed
    *                   as of POSIX 2001.
    * fgetws_unlocked() has potential races with other threads concurrently
    *                   using any of: itself, addmntent(),
    *                   clearerr_unlocked(), __fbufsize(), fflush_unlocked(),
    *                   fgetc_unlocked(), fgets_unlocked(), fgetwc_unlocked(),
    *                   __fpending(), __fpurge(), fputc_unlocked(),
    *                   fputs_unlocked(), fputwc_unlocked(),
    *                   fputws_unlocked(), fread_unlocked(), __fsetlocking(),
    *                   fwrite_unlocked(), getc_unlocked(), getwc_unlocked(),
    *                   putc_unlocked(), or putwc_unlocked().
    * fgetws_unlocked() Is thread-safe if flockfile() or ftrylockfile() have
    *                   locked the stream, but should not be used since not
    *                   standardized and not widely implemented */
#  define FGETWS_UNLOCKED_LOCK    LCx_LOCK_()
#  define FGETWS_UNLOCKED_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef FNMATCH_LOCK
#  define FNMATCH_LOCK    ENVr_LCr_LOCK_()
#  define FNMATCH_UNLOCK  ENVr_LCr_UNLOCK_()
#endif

#ifndef FORKPTY_LOCK

   /* forkpty() either was never in the POSIX Standard, or was removed as of
    *           POSIX 2001. */
#  define FORKPTY_LOCK    LCr_LOCK_()
#  define FORKPTY_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef __FPENDING_LOCK

   /* __fpending() either was never in the POSIX Standard, or was removed as
    *              of POSIX 2001.
    * __fpending() has potential races with other threads concurrently using
    *              any of: itself, addmntent(), clearerr_unlocked(),
    *              __fbufsize(), fflush_unlocked(), fgetc_unlocked(),
    *              fgets_unlocked(), fgetwc_unlocked(), fgetws_unlocked(),
    *              __fpurge(), fputc_unlocked(), fputs_unlocked(),
    *              fputwc_unlocked(), fputws_unlocked(), fread_unlocked(),
    *              __fsetlocking(), fwrite_unlocked(), getc_unlocked(),
    *              getwc_unlocked(), putc_unlocked(), or putwc_unlocked(). */
#  define __FPENDING_LOCK    LCx_LOCK_()
#  define __FPENDING_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef FPRINTF_LOCK
#  define FPRINTF_LOCK    LCr_LOCK_()
#  define FPRINTF_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef __FPURGE_LOCK

   /* __fpurge() either was never in the POSIX Standard, or was removed as of
    *            POSIX 2001.
    * __fpurge() has potential races with other threads concurrently using any
    *            of: itself, addmntent(), clearerr_unlocked(), __fbufsize(),
    *            fflush_unlocked(), fgetc_unlocked(), fgets_unlocked(),
    *            fgetwc_unlocked(), fgetws_unlocked(), __fpending(),
    *            fputc_unlocked(), fputs_unlocked(), fputwc_unlocked(),
    *            fputws_unlocked(), fread_unlocked(), __fsetlocking(),
    *            fwrite_unlocked(), getc_unlocked(), getwc_unlocked(),
    *            putc_unlocked(), or putwc_unlocked(). */
#  define __FPURGE_LOCK    LCx_LOCK_()
#  define __FPURGE_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef FPUTC_UNLOCKED_LOCK

   /* fputc_unlocked() either was never in the POSIX Standard, or was removed
    *                  as of POSIX 2001.
    * fputc_unlocked() has potential races with other threads concurrently
    *                  using any of: itself, addmntent(), clearerr_unlocked(),
    *                  __fbufsize(), fflush_unlocked(), fgetc_unlocked(),
    *                  fgets_unlocked(), fgetwc_unlocked(), fgetws_unlocked(),
    *                  __fpending(), __fpurge(), fputs_unlocked(),
    *                  fputwc_unlocked(), fputws_unlocked(), fread_unlocked(),
    *                  __fsetlocking(), fwrite_unlocked(), getc_unlocked(),
    *                  getwc_unlocked(), putc_unlocked(), or putwc_unlocked().
    * fputc_unlocked() Is thread-safe if flockfile() or ftrylockfile() have
    *                  locked the stream, but should not be used since not
    *                  standardized and not widely implemented */
#  define FPUTC_UNLOCKED_LOCK    LCx_LOCK_()
#  define FPUTC_UNLOCKED_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef FPUTS_UNLOCKED_LOCK

   /* fputs_unlocked() either was never in the POSIX Standard, or was removed
    *                  as of POSIX 2001.
    * fputs_unlocked() has potential races with other threads concurrently
    *                  using any of: itself, addmntent(), clearerr_unlocked(),
    *                  __fbufsize(), fflush_unlocked(), fgetc_unlocked(),
    *                  fgets_unlocked(), fgetwc_unlocked(), fgetws_unlocked(),
    *                  __fpending(), __fpurge(), fputc_unlocked(),
    *                  fputwc_unlocked(), fputws_unlocked(), fread_unlocked(),
    *                  __fsetlocking(), fwrite_unlocked(), getc_unlocked(),
    *                  getwc_unlocked(), putc_unlocked(), or putwc_unlocked().
    * fputs_unlocked() Is thread-safe if flockfile() or ftrylockfile() have
    *                  locked the stream, but should not be used since not
    *                  standardized and not widely implemented */
#  define FPUTS_UNLOCKED_LOCK    LCx_LOCK_()
#  define FPUTS_UNLOCKED_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef FPUTWC_LOCK
#  define FPUTWC_LOCK
#  define FPUTWC_UNLOCK
#endif

#ifndef FPUTWC_UNLOCKED_LOCK

   /* fputwc_unlocked() either was never in the POSIX Standard, or was removed
    *                   as of POSIX 2001.
    * fputwc_unlocked() has potential races with other threads concurrently
    *                   using any of: itself, addmntent(),
    *                   clearerr_unlocked(), __fbufsize(), fflush_unlocked(),
    *                   fgetc_unlocked(), fgets_unlocked(), fgetwc_unlocked(),
    *                   fgetws_unlocked(), __fpending(), __fpurge(),
    *                   fputc_unlocked(), fputs_unlocked(), fputws_unlocked(),
    *                   fread_unlocked(), __fsetlocking(), fwrite_unlocked(),
    *                   getc_unlocked(), getwc_unlocked(), putc_unlocked(), or
    *                   putwc_unlocked().
    * fputwc_unlocked() Is thread-safe if flockfile() or ftrylockfile() have
    *                   locked the stream, but should not be used since not
    *                   standardized and not widely implemented */
#  define FPUTWC_UNLOCKED_LOCK    LCx_LOCK_()
#  define FPUTWC_UNLOCKED_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef FPUTWS_LOCK
#  define FPUTWS_LOCK
#  define FPUTWS_UNLOCK
#endif

#ifndef FPUTWS_UNLOCKED_LOCK

   /* fputws_unlocked() either was never in the POSIX Standard, or was removed
    *                   as of POSIX 2001.
    * fputws_unlocked() has potential races with other threads concurrently
    *                   using any of: itself, addmntent(),
    *                   clearerr_unlocked(), __fbufsize(), fflush_unlocked(),
    *                   fgetc_unlocked(), fgets_unlocked(), fgetwc_unlocked(),
    *                   fgetws_unlocked(), __fpending(), __fpurge(),
    *                   fputc_unlocked(), fputs_unlocked(), fputwc_unlocked(),
    *                   fread_unlocked(), __fsetlocking(), fwrite_unlocked(),
    *                   getc_unlocked(), getwc_unlocked(), putc_unlocked(), or
    *                   putwc_unlocked().
    * fputws_unlocked() Is thread-safe if flockfile() or ftrylockfile() have
    *                   locked the stream, but should not be used since not
    *                   standardized and not widely implemented */
#  define FPUTWS_UNLOCKED_LOCK    LCx_LOCK_()
#  define FPUTWS_UNLOCKED_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef FREAD_UNLOCKED_LOCK

   /* fread_unlocked() either was never in the POSIX Standard, or was removed
    *                  as of POSIX 2001.
    * fread_unlocked() has potential races with other threads concurrently
    *                  using any of: itself, addmntent(), clearerr_unlocked(),
    *                  __fbufsize(), fflush_unlocked(), fgetc_unlocked(),
    *                  fgets_unlocked(), fgetwc_unlocked(), fgetws_unlocked(),
    *                  __fpending(), __fpurge(), fputc_unlocked(),
    *                  fputs_unlocked(), fputwc_unlocked(), fputws_unlocked(),
    *                  __fsetlocking(), fwrite_unlocked(), getc_unlocked(),
    *                  getwc_unlocked(), putc_unlocked(), or putwc_unlocked().
    * fread_unlocked() Is thread-safe if flockfile() or ftrylockfile() have
    *                  locked the stream, but should not be used since not
    *                  standardized and not widely implemented */
#  define FREAD_UNLOCKED_LOCK    LCx_LOCK_()
#  define FREAD_UNLOCKED_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef FSCANF_LOCK
#  define FSCANF_LOCK    LCr_LOCK_()
#  define FSCANF_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef __FSETLOCKING_LOCK

   /* __fsetlocking() either was never in the POSIX Standard, or was removed
    *                 as of POSIX 2001.
    * __fsetlocking() has potential races with other threads concurrently
    *                 using any of: itself, addmntent(), clearerr_unlocked(),
    *                 __fbufsize(), fflush_unlocked(), fgetc_unlocked(),
    *                 fgets_unlocked(), fgetwc_unlocked(), fgetws_unlocked(),
    *                 __fpending(), __fpurge(), fputc_unlocked(),
    *                 fputs_unlocked(), fputwc_unlocked(), fputws_unlocked(),
    *                 fread_unlocked(), fwrite_unlocked(), getc_unlocked(),
    *                 getwc_unlocked(), putc_unlocked(), or putwc_unlocked().
    */
#  define __FSETLOCKING_LOCK    LCx_LOCK_()
#  define __FSETLOCKING_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef FTS_CHILDREN_LOCK

   /* fts_children() either was never in the POSIX Standard, or was removed as
    *                of POSIX 2001. */
#  define FTS_CHILDREN_LOCK                              \
#    error_fts_children_not_suitable_for_multi-threaded_operation
#endif

#ifndef FTS_READ_LOCK

   /* fts_read() either was never in the POSIX Standard, or was removed as of
    *            POSIX 2001. */
#  define FTS_READ_LOCK                              \
#    error_fts_read_not_suitable_for_multi-threaded_operation
#endif

#ifndef FTW_LOCK

   /* ftw() Obsolete; use nftw() instead */
#  define FTW_LOCK    GENx_LOCK_
#  define FTW_UNLOCK  GENx_UNLOCK_
#endif

#ifndef FWPRINTF_LOCK
#  define FWPRINTF_LOCK    LCr_LOCK_()
#  define FWPRINTF_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef FWRITE_UNLOCKED_LOCK

   /* fwrite_unlocked() either was never in the POSIX Standard, or was removed
    *                   as of POSIX 2001.
    * fwrite_unlocked() has potential races with other threads concurrently
    *                   using any of: itself, addmntent(),
    *                   clearerr_unlocked(), __fbufsize(), fflush_unlocked(),
    *                   fgetc_unlocked(), fgets_unlocked(), fgetwc_unlocked(),
    *                   fgetws_unlocked(), __fpending(), __fpurge(),
    *                   fputc_unlocked(), fputs_unlocked(), fputwc_unlocked(),
    *                   fputws_unlocked(), fread_unlocked(), __fsetlocking(),
    *                   getc_unlocked(), getwc_unlocked(), putc_unlocked(), or
    *                   putwc_unlocked().
    * fwrite_unlocked() Is thread-safe if flockfile() or ftrylockfile() have
    *                   locked the stream, but should not be used since not
    *                   standardized and not widely implemented */
#  define FWRITE_UNLOCKED_LOCK    LCx_LOCK_()
#  define FWRITE_UNLOCKED_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef FWSCANF_LOCK
#  define FWSCANF_LOCK    LCr_LOCK_()
#  define FWSCANF_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef GAMMA_LOCK

   /* gamma() has potential races with other threads concurrently using any
    *         of: itself, gammaf(), gammal(), lgamma(), lgammaf(), or
    *         lgammal(). */
#  define GAMMA_LOCK    GENx_LOCK_
#  define GAMMA_UNLOCK  GENx_UNLOCK_
#endif

#ifndef GAMMAF_LOCK

   /* gammaf() either was never in the POSIX Standard, or was removed as of
    *          POSIX 2001.
    * gammaf() has potential races with other threads concurrently using any
    *          of: itself, gamma(), gammal(), lgamma(), lgammaf(), or
    *          lgammal(). */
#  define GAMMAF_LOCK    GENx_LOCK_
#  define GAMMAF_UNLOCK  GENx_UNLOCK_
#endif

#ifndef GAMMAL_LOCK

   /* gammal() either was never in the POSIX Standard, or was removed as of
    *          POSIX 2001.
    * gammal() has potential races with other threads concurrently using any
    *          of: itself, gamma(), gammaf(), lgamma(), lgammaf(), or
    *          lgammal(). */
#  define GAMMAL_LOCK    GENx_LOCK_
#  define GAMMAL_UNLOCK  GENx_UNLOCK_
#endif

#ifndef GETADDRINFO_LOCK
#  define GETADDRINFO_LOCK    ENVr_LCr_LOCK_()
#  define GETADDRINFO_UNLOCK  ENVr_LCr_UNLOCK_()
#endif

#ifndef GETALIASBYNAME_LOCK

   /* getaliasbyname() Use getaliasbyname_r() instead
    * getaliasbyname() either was never in the POSIX Standard, or was removed
    *                  as of POSIX 2001. */
#  define GETALIASBYNAME_LOCK                              \
#    error_getaliasbyname_not_suitable_for_multi-threaded_operation
#endif

#ifndef GETALIASBYNAME_R_LOCK

   /* getaliasbyname_r() either was never in the POSIX Standard, or was
    *                    removed as of POSIX 2001. */
#  define GETALIASBYNAME_R_LOCK    LCr_LOCK_()
#  define GETALIASBYNAME_R_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef GETALIASENT_LOCK

   /* getaliasent() Use getaliasent_r() instead
    * getaliasent() either was never in the POSIX Standard, or was removed as
    *               of POSIX 2001. */
#  define GETALIASENT_LOCK                              \
#    error_getaliasent_not_suitable_for_multi-threaded_operation
#endif

#ifndef GETALIASENT_R_LOCK

   /* getaliasent_r() either was never in the POSIX Standard, or was removed
    *                 as of POSIX 2001. */
#  define GETALIASENT_R_LOCK    LCr_LOCK_()
#  define GETALIASENT_R_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef GETCHAR_UNLOCKED_LOCK

   /* getchar_unlocked() has potential races with other threads concurrently
    *                    using either itself or getwchar_unlocked().
    * getchar_unlocked() Is thread-safe if flockfile() or ftrylockfile() have
    *                    locked stdin */
#  define GETCHAR_UNLOCKED_LOCK    GENx_LOCK_
#  define GETCHAR_UNLOCKED_UNLOCK  GENx_UNLOCK_
#endif

#ifndef GETCONTEXT_LOCK

   /* getcontext() has potential races with other threads concurrently using
    *              any of: itself, makecontext(), setcontext(), or
    *              swapcontext(). */
#  define GETCONTEXT_LOCK    GENx_LOCK_
#  define GETCONTEXT_UNLOCK  GENx_UNLOCK_
#endif

#ifndef GETC_UNLOCKED_LOCK

   /* getc_unlocked() has potential races with other threads concurrently
    *                 using any of: itself, addmntent(), clearerr_unlocked(),
    *                 __fbufsize(), fflush_unlocked(), fgetc_unlocked(),
    *                 fgets_unlocked(), fgetwc_unlocked(), fgetws_unlocked(),
    *                 __fpending(), __fpurge(), fputc_unlocked(),
    *                 fputs_unlocked(), fputwc_unlocked(), fputws_unlocked(),
    *                 fread_unlocked(), __fsetlocking(), fwrite_unlocked(),
    *                 getwc_unlocked(), putc_unlocked(), or putwc_unlocked().
    * getc_unlocked() Is thread-safe if flockfile() or ftrylockfile() have
    *                 locked the stream */
#  define GETC_UNLOCKED_LOCK    LCx_LOCK_()
#  define GETC_UNLOCKED_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef GET_CURRENT_DIR_NAME_LOCK

   /* get_current_dir_name() either was never in the POSIX Standard, or was
    *                        removed as of POSIX 2001. */
#  define GET_CURRENT_DIR_NAME_LOCK    ENVr_LOCK_
#  define GET_CURRENT_DIR_NAME_UNLOCK  ENVr_UNLOCK_
#endif

#ifndef GETDATE_LOCK
#  define GETDATE_LOCK    GENx_ENVr_LCr_LOCK_()
#  define GETDATE_UNLOCK  GENx_ENVr_LCr_UNLOCK_()
#endif

#ifndef GETDATE_R_LOCK

   /* getdate_r() either was never in the POSIX Standard, or was removed as of
    *             POSIX 2001. */
#  define GETDATE_R_LOCK    ENVr_LCr_LOCK_()
#  define GETDATE_R_UNLOCK  ENVr_LCr_UNLOCK_()
#endif

#ifndef GETENV_LOCK
#  ifdef GETENV_PRESERVES_OTHER_THREAD
#    define GETENV_LOCK    ENVr_LOCK_
#    define GETENV_UNLOCK  ENVr_UNLOCK_
#  else
#    define GETENV_LOCK    ENVx_LOCK_
#    define GETENV_UNLOCK  ENVx_UNLOCK_
#  endif
#endif

#ifndef GETFSENT_LOCK

   /* getfsent() either was never in the POSIX Standard, or was removed as of
    *            POSIX 2001.
    * getfsent() has potential races with other threads concurrently using any
    *            of: itself, endfsent(), getfsfile(), getfsspec(), or
    *            setfsent(). */
#  define GETFSENT_LOCK    LCx_LOCK_()
#  define GETFSENT_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef GETFSFILE_LOCK

   /* getfsfile() either was never in the POSIX Standard, or was removed as of
    *             POSIX 2001.
    * getfsfile() has potential races with other threads concurrently using
    *             any of: itself, endfsent(), getfsent(), getfsspec(), or
    *             setfsent(). */
#  define GETFSFILE_LOCK    LCx_LOCK_()
#  define GETFSFILE_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef GETFSSPEC_LOCK

   /* getfsspec() either was never in the POSIX Standard, or was removed as of
    *             POSIX 2001.
    * getfsspec() has potential races with other threads concurrently using
    *             any of: itself, endfsent(), getfsent(), getfsfile(), or
    *             setfsent(). */
#  define GETFSSPEC_LOCK    LCx_LOCK_()
#  define GETFSSPEC_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef GETGRENT_LOCK

   /* getgrent() has potential races with other threads concurrently using any
    *            of: itself, endgrent(), endgrent_r(), getgrent_r(),
    *            setgrent(), or setgrent_r(). */
#  define GETGRENT_LOCK    LCx_LOCK_()
#  define GETGRENT_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef GETGRENT_R_LOCK

   /* getgrent_r() either was never in the POSIX Standard, or was removed as
    *              of POSIX 2001.
    * getgrent_r() has potential races with other threads concurrently using
    *              any of: itself, endgrent(), endgrent_r(), getgrent(),
    *              setgrent(), or setgrent_r(). */
#  define GETGRENT_R_LOCK    LCx_LOCK_()
#  define GETGRENT_R_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef GETGRGID_LOCK
#  define GETGRGID_LOCK    LCx_LOCK_()
#  define GETGRGID_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef GETGRGID_R_LOCK
#  define GETGRGID_R_LOCK    LCr_LOCK_()
#  define GETGRGID_R_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef GETGRNAM_LOCK
#  define GETGRNAM_LOCK    LCx_LOCK_()
#  define GETGRNAM_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef GETGRNAM_R_LOCK
#  define GETGRNAM_R_LOCK    LCr_LOCK_()
#  define GETGRNAM_R_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef GETGROUPLIST_LOCK

   /* getgrouplist() either was never in the POSIX Standard, or was removed as
    *                of POSIX 2001. */
#  define GETGROUPLIST_LOCK    LCr_LOCK_()
#  define GETGROUPLIST_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef GETHOSTBYADDR_LOCK

   /* gethostbyaddr() Obsolete; use getaddrinfo() instead
    * gethostbyaddr() return needs a deep copy for safety */
#  define GETHOSTBYADDR_LOCK    GENx_ENVr_LCr_LOCK_()
#  define GETHOSTBYADDR_UNLOCK  GENx_ENVr_LCr_UNLOCK_()
#endif

#ifndef GETHOSTBYADDR_R_LOCK

   /* gethostbyaddr_r() either was never in the POSIX Standard, or was removed
    *                   as of POSIX 2001. */
#  define GETHOSTBYADDR_R_LOCK    ENVr_LCr_LOCK_()
#  define GETHOSTBYADDR_R_UNLOCK  ENVr_LCr_UNLOCK_()
#endif

#ifndef GETHOSTBYNAME_LOCK

   /* gethostbyname() Obsolete; use getnameinfo() instead
    * gethostbyname() return needs a deep copy for safety */
#  define GETHOSTBYNAME_LOCK    GENx_ENVr_LCr_LOCK_()
#  define GETHOSTBYNAME_UNLOCK  GENx_ENVr_LCr_UNLOCK_()
#endif

#ifndef GETHOSTBYNAME2_LOCK

   /* gethostbyname2() either was never in the POSIX Standard, or was removed
    *                  as of POSIX 2001. */
#  define GETHOSTBYNAME2_LOCK    GENx_ENVr_LCr_LOCK_()
#  define GETHOSTBYNAME2_UNLOCK  GENx_ENVr_LCr_UNLOCK_()
#endif

#ifndef GETHOSTBYNAME2_R_LOCK

   /* gethostbyname2_r() either was never in the POSIX Standard, or was
    *                    removed as of POSIX 2001. */
#  define GETHOSTBYNAME2_R_LOCK    ENVr_LCr_LOCK_()
#  define GETHOSTBYNAME2_R_UNLOCK  ENVr_LCr_UNLOCK_()
#endif

#ifndef GETHOSTBYNAME_R_LOCK

   /* gethostbyname_r() either was never in the POSIX Standard, or was removed
    *                   as of POSIX 2001. */
#  define GETHOSTBYNAME_R_LOCK    ENVr_LCr_LOCK_()
#  define GETHOSTBYNAME_R_UNLOCK  ENVr_LCr_UNLOCK_()
#endif

#ifndef GETHOSTENT_LOCK

   /* gethostent() has potential races with other threads concurrently using
    *              any of: itself, endhostent(), endhostent_r(),
    *              gethostent_r(), sethostent(), or sethostent_r(). */
#  define GETHOSTENT_LOCK    GENx_ENVr_LCr_LOCK_()
#  define GETHOSTENT_UNLOCK  GENx_ENVr_LCr_UNLOCK_()
#endif

#ifndef GETHOSTENT_R_LOCK

   /* gethostent_r() either was never in the POSIX Standard, or was removed as
    *                of POSIX 2001.
    * gethostent_r() has potential races with other threads concurrently using
    *                any of: itself, endhostent(), endhostent_r(),
    *                gethostent(), sethostent(), or sethostent_r(). */
#  define GETHOSTENT_R_LOCK    GENx_ENVr_LCr_LOCK_()
#  define GETHOSTENT_R_UNLOCK  GENx_ENVr_LCr_UNLOCK_()
#endif

#ifndef GETHOSTID_LOCK
#  define GETHOSTID_LOCK    GENr_ENVr_LCr_LOCK_()
#  define GETHOSTID_UNLOCK  GENr_ENVr_LCr_UNLOCK_()
#endif

#ifndef GETLOGIN_LOCK

   /* getlogin() is vulnerable to signal ALRM
    * getlogin() has potential races with other threads concurrently using any
    *            of: itself, endutent(), endutxent(), getlogin_r(),
    *            getutent(), getutid(), getutline(), getutxent(), getutxid(),
    *            getutxline(), glob(), login(), logout(), pututline(),
    *            pututxline(), setutent(), setutxent(), utmpname(), or
    *            wordexp(). */
#  define GETLOGIN_LOCK    GENx_LCr_LOCK_()
#  define GETLOGIN_UNLOCK  GENx_LCr_UNLOCK_()
#endif

#ifndef GETLOGIN_R_LOCK

   /* getlogin_r() is vulnerable to signal ALRM
    * getlogin_r() has potential races with other threads concurrently using
    *              any of: itself, endutent(), endutxent(), getlogin(),
    *              getutent(), getutid(), getutline(), getutxent(),
    *              getutxid(), getutxline(), glob(), login(), logout(),
    *              pututline(), pututxline(), setutent(), setutxent(),
    *              utmpname(), or wordexp(). */
#  define GETLOGIN_R_LOCK    GENx_LCr_LOCK_()
#  define GETLOGIN_R_UNLOCK  GENx_LCr_UNLOCK_()
#endif

#ifndef GETMNTENT_LOCK

   /* getmntent() either was never in the POSIX Standard, or was removed as of
    *             POSIX 2001. */
#  define GETMNTENT_LOCK    LCx_LOCK_()
#  define GETMNTENT_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef GETMNTENT_R_LOCK

   /* getmntent_r() either was never in the POSIX Standard, or was removed as
    *               of POSIX 2001. */
#  define GETMNTENT_R_LOCK    LCr_LOCK_()
#  define GETMNTENT_R_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef GETNAMEINFO_LOCK
#  define GETNAMEINFO_LOCK    ENVr_LCr_LOCK_()
#  define GETNAMEINFO_UNLOCK  ENVr_LCr_UNLOCK_()
#endif

#ifndef GETNETBYADDR_LOCK
#  define GETNETBYADDR_LOCK    LCx_LOCK_()
#  define GETNETBYADDR_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef GETNETBYADDR_R_LOCK

   /* getnetbyaddr_r() either was never in the POSIX Standard, or was removed
    *                  as of POSIX 2001. */
#  define GETNETBYADDR_R_LOCK    LCr_LOCK_()
#  define GETNETBYADDR_R_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef GETNETBYNAME_LOCK
#  define GETNETBYNAME_LOCK    GENx_ENVr_LCr_LOCK_()
#  define GETNETBYNAME_UNLOCK  GENx_ENVr_LCr_UNLOCK_()
#endif

#ifndef GETNETBYNAME_R_LOCK

   /* getnetbyname_r() either was never in the POSIX Standard, or was removed
    *                  as of POSIX 2001. */
#  define GETNETBYNAME_R_LOCK    LCr_LOCK_()
#  define GETNETBYNAME_R_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef GETNETENT_LOCK

   /* getnetent() has potential races with other threads concurrently using
    *             any of: itself, endnetent(), endnetent_r(), setnetent(), or
    *             setnetent_r(). */
#  define GETNETENT_LOCK    GENx_ENVr_LCr_LOCK_()
#  define GETNETENT_UNLOCK  GENx_ENVr_LCr_UNLOCK_()
#endif

#ifndef GETNETENT_R_LOCK

   /* getnetent_r() either was never in the POSIX Standard, or was removed as
    *               of POSIX 2001. */
#  define GETNETENT_R_LOCK    LCr_LOCK_()
#  define GETNETENT_R_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef GETNETGRENT_LOCK

   /* getnetgrent() either was never in the POSIX Standard, or was removed as
    *               of POSIX 2001.
    * getnetgrent() has potential races with other threads concurrently using
    *               any of: itself, endnetgrent(), getnetgrent_r(), innetgr(),
    *               or setnetgrent(). */
#  define GETNETGRENT_LOCK    LCx_LOCK_()
#  define GETNETGRENT_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef GETNETGRENT_R_LOCK

   /* getnetgrent_r() either was never in the POSIX Standard, or was removed
    *                 as of POSIX 2001.
    * getnetgrent_r() has potential races with other threads concurrently
    *                 using any of: itself, endnetgrent(), getnetgrent(),
    *                 innetgr(), or setnetgrent(). */
#  define GETNETGRENT_R_LOCK    LCx_LOCK_()
#  define GETNETGRENT_R_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef GETOPT_LOCK

   /* getopt() has potential races with other threads concurrently using any
    *          of: itself, getopt_long(), or getopt_long_only(). */
#  define GETOPT_LOCK    ENVx_LOCK_
#  define GETOPT_UNLOCK  ENVx_UNLOCK_
#endif

#ifndef GETOPT_LONG_LOCK

   /* getopt_long() either was never in the POSIX Standard, or was removed as
    *               of POSIX 2001.
    * getopt_long() has potential races with other threads concurrently using
    *               any of: itself, getopt(), or getopt_long_only(). */
#  define GETOPT_LONG_LOCK    ENVx_LOCK_
#  define GETOPT_LONG_UNLOCK  ENVx_UNLOCK_
#endif

#ifndef GETOPT_LONG_ONLY_LOCK

   /* getopt_long_only() either was never in the POSIX Standard, or was
    *                    removed as of POSIX 2001.
    * getopt_long_only() has potential races with other threads concurrently
    *                    using any of: itself, getopt(), or getopt_long(). */
#  define GETOPT_LONG_ONLY_LOCK    ENVx_LOCK_
#  define GETOPT_LONG_ONLY_UNLOCK  ENVx_UNLOCK_
#endif

#ifndef GETPASS_LOCK

   /* getpass() Obsolete; DO NOT USE; see its man page
    * getpass() either was never in the POSIX Standard, or was removed as of
    *           POSIX 2001. */
#  define GETPASS_LOCK    GENr_LOCK_
#  define GETPASS_UNLOCK  GENr_UNLOCK_
#endif

#ifndef GETPROTOBYNAME_LOCK
#  define GETPROTOBYNAME_LOCK    LCx_LOCK_()
#  define GETPROTOBYNAME_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef GETPROTOBYNAME_R_LOCK

   /* getprotobyname_r() either was never in the POSIX Standard, or was
    *                    removed as of POSIX 2001. */
#  define GETPROTOBYNAME_R_LOCK    LCr_LOCK_()
#  define GETPROTOBYNAME_R_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef GETPROTOBYNUMBER_LOCK
#  define GETPROTOBYNUMBER_LOCK    LCx_LOCK_()
#  define GETPROTOBYNUMBER_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef GETPROTOBYNUMBER_R_LOCK

   /* getprotobynumber_r() either was never in the POSIX Standard, or was
    *                      removed as of POSIX 2001. */
#  define GETPROTOBYNUMBER_R_LOCK    LCr_LOCK_()
#  define GETPROTOBYNUMBER_R_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef GETPROTOENT_LOCK

   /* getprotoent() has potential races with other threads concurrently using
    *               any of: itself, endprotoent(), endprotoent_r(),
    *               setprotoent(), or setprotoent_r(). */
#  define GETPROTOENT_LOCK    LCx_LOCK_()
#  define GETPROTOENT_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef GETPROTOENT_R_LOCK

   /* getprotoent_r() either was never in the POSIX Standard, or was removed
    *                 as of POSIX 2001. */
#  define GETPROTOENT_R_LOCK    LCr_LOCK_()
#  define GETPROTOENT_R_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef GETPW_LOCK

   /* getpw() Obsolete; use getpwuid() instead
    * getpw() either was never in the POSIX Standard, or was removed as of
    *         POSIX 2001. */
#  define GETPW_LOCK    LCr_LOCK_()
#  define GETPW_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef GETPWENT_LOCK

   /* getpwent() has potential races with other threads concurrently using any
    *            of: itself, endpwent(), endpwent_r(), getpwent_r(),
    *            setpwent(), or setpwent_r(). */
#  define GETPWENT_LOCK    LCx_LOCK_()
#  define GETPWENT_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef GETPWENT_R_LOCK

   /* getpwent_r() either was never in the POSIX Standard, or was removed as
    *              of POSIX 2001.
    * getpwent_r() has potential races with other threads concurrently using
    *              any of: itself, endpwent(), endpwent_r(), getpwent(),
    *              setpwent(), or setpwent_r(). */
#  define GETPWENT_R_LOCK    LCx_LOCK_()
#  define GETPWENT_R_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef GETPWNAM_LOCK
#  define GETPWNAM_LOCK    LCx_LOCK_()
#  define GETPWNAM_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef GETPWNAM_R_LOCK
#  define GETPWNAM_R_LOCK    LCr_LOCK_()
#  define GETPWNAM_R_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef GETPWUID_LOCK
#  define GETPWUID_LOCK    LCx_LOCK_()
#  define GETPWUID_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef GETPWUID_R_LOCK
#  define GETPWUID_R_LOCK    LCr_LOCK_()
#  define GETPWUID_R_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef GETRPCBYNAME_LOCK

   /* getrpcbyname() Use getrpcbyname_r() instead
    * getrpcbyname() either was never in the POSIX Standard, or was removed as
    *                of POSIX 2001. */
#  define GETRPCBYNAME_LOCK                              \
#    error_getrpcbyname_not_suitable_for_multi-threaded_operation
#endif

#ifndef GETRPCBYNAME_R_LOCK

   /* getrpcbyname_r() either was never in the POSIX Standard, or was removed
    *                  as of POSIX 2001. */
#  define GETRPCBYNAME_R_LOCK    LCr_LOCK_()
#  define GETRPCBYNAME_R_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef GETRPCBYNUMBER_LOCK

   /* getrpcbynumber() Use getrpcbynumber_r() instead
    * getrpcbynumber() either was never in the POSIX Standard, or was removed
    *                  as of POSIX 2001. */
#  define GETRPCBYNUMBER_LOCK                              \
#    error_getrpcbynumber_not_suitable_for_multi-threaded_operation
#endif

#ifndef GETRPCBYNUMBER_R_LOCK

   /* getrpcbynumber_r() either was never in the POSIX Standard, or was
    *                    removed as of POSIX 2001. */
#  define GETRPCBYNUMBER_R_LOCK    LCr_LOCK_()
#  define GETRPCBYNUMBER_R_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef GETRPCENT_LOCK

   /* getrpcent() Use getrpcent_r() instead
    * getrpcent() either was never in the POSIX Standard, or was removed as of
    *             POSIX 2001. */
#  define GETRPCENT_LOCK                              \
#    error_getrpcent_not_suitable_for_multi-threaded_operation
#endif

#ifndef GETRPCENT_R_LOCK

   /* getrpcent_r() either was never in the POSIX Standard, or was removed as
    *               of POSIX 2001. */
#  define GETRPCENT_R_LOCK    LCr_LOCK_()
#  define GETRPCENT_R_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef GETRPCPORT_LOCK

   /* getrpcport() either was never in the POSIX Standard, or was removed as
    *              of POSIX 2001. */
#  define GETRPCPORT_LOCK    ENVr_LCr_LOCK_()
#  define GETRPCPORT_UNLOCK  ENVr_LCr_UNLOCK_()
#endif

#ifndef GETSERVBYNAME_LOCK
#  define GETSERVBYNAME_LOCK    LCx_LOCK_()
#  define GETSERVBYNAME_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef GETSERVBYNAME_R_LOCK

   /* getservbyname_r() either was never in the POSIX Standard, or was removed
    *                   as of POSIX 2001. */
#  define GETSERVBYNAME_R_LOCK    LCr_LOCK_()
#  define GETSERVBYNAME_R_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef GETSERVBYPORT_LOCK
#  define GETSERVBYPORT_LOCK    LCx_LOCK_()
#  define GETSERVBYPORT_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef GETSERVBYPORT_R_LOCK

   /* getservbyport_r() either was never in the POSIX Standard, or was removed
    *                   as of POSIX 2001. */
#  define GETSERVBYPORT_R_LOCK    LCr_LOCK_()
#  define GETSERVBYPORT_R_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef GETSERVENT_LOCK

   /* getservent() has potential races with other threads concurrently using
    *              any of: itself, endservent(), endservent_r(), setservent(),
    *              or setservent_r(). */
#  define GETSERVENT_LOCK    LCx_LOCK_()
#  define GETSERVENT_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef GETSERVENT_R_LOCK

   /* getservent_r() either was never in the POSIX Standard, or was removed as
    *                of POSIX 2001. */
#  define GETSERVENT_R_LOCK    LCr_LOCK_()
#  define GETSERVENT_R_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef GETSPENT_LOCK

   /* getspent() either was never in the POSIX Standard, or was removed as of
    *            POSIX 2001.
    * getspent() has potential races with other threads concurrently using any
    *            of: itself, endspent(), getspent_r(), or setspent(). */
#  define GETSPENT_LOCK    LCx_LOCK_()
#  define GETSPENT_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef GETSPENT_R_LOCK

   /* getspent_r() either was never in the POSIX Standard, or was removed as
    *              of POSIX 2001.
    * getspent_r() has potential races with other threads concurrently using
    *              any of: itself, endspent(), getspent(), or setspent(). */
#  define GETSPENT_R_LOCK    LCx_LOCK_()
#  define GETSPENT_R_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef GETSPNAM_LOCK

   /* getspnam() either was never in the POSIX Standard, or was removed as of
    *            POSIX 2001. */
#  define GETSPNAM_LOCK    LCx_LOCK_()
#  define GETSPNAM_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef GETSPNAM_R_LOCK

   /* getspnam_r() either was never in the POSIX Standard, or was removed as
    *              of POSIX 2001. */
#  define GETSPNAM_R_LOCK    LCr_LOCK_()
#  define GETSPNAM_R_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef GETTTYENT_LOCK

   /* getttyent() either was never in the POSIX Standard, or was removed as of
    *             POSIX 2001.
    * getttyent() has potential races with other threads concurrently using
    *             any of: itself, endttyent(), getttynam(), or setttyent(). */
#  define GETTTYENT_LOCK    GENx_LOCK_
#  define GETTTYENT_UNLOCK  GENx_UNLOCK_
#endif

#ifndef GETTTYNAM_LOCK

   /* getttynam() either was never in the POSIX Standard, or was removed as of
    *             POSIX 2001.
    * getttynam() has potential races with other threads concurrently using
    *             any of: itself, endttyent(), getttyent(), or setttyent(). */
#  define GETTTYNAM_LOCK    GENx_LOCK_
#  define GETTTYNAM_UNLOCK  GENx_UNLOCK_
#endif

#ifndef GETUSERSHELL_LOCK

   /* getusershell() either was never in the POSIX Standard, or was removed as
    *                of POSIX 2001. */
#  define GETUSERSHELL_LOCK                              \
#    error_getusershell_not_suitable_for_multi-threaded_operation
#endif

#ifndef GETUTENT_LOCK

   /* getutent() Obsolete; use getutxent() instead
    * getutent() either was never in the POSIX Standard, or was removed as of
    *            POSIX 2001.
    * getutent() is vulnerable to signal ALRM
    * getutent() has potential races with other threads concurrently using any
    *            of: itself, endutent(), endutxent(), getlogin(),
    *            getlogin_r(), getutid(), getutline(), getutxent(),
    *            getutxid(), getutxline(), glob(), login(), logout(),
    *            pututline(), pututxline(), setutent(), setutxent(),
    *            utmpname(), or wordexp().
    * getutent() must be called at least once in single-threaded mode to
    *            enable thread-safety in subsequent calls when in
    *            multi-threaded mode. */
#  define GETUTENT_LOCK    GENx_LOCK_
#  define GETUTENT_UNLOCK  GENx_UNLOCK_
#endif

#ifndef GETUTID_LOCK

   /* getutid() Obsolete; use getutxid() instead
    * getutid() either was never in the POSIX Standard, or was removed as of
    *           POSIX 2001.
    * getutid() is vulnerable to signal ALRM
    * getutid() has potential races with other threads concurrently using any
    *           of: itself, endutent(), endutxent(), getlogin(), getlogin_r(),
    *           getutent(), getutline(), getutxent(), getutxid(),
    *           getutxline(), glob(), login(), logout(), pututline(),
    *           pututxline(), setutent(), setutxent(), utmpname(), or
    *           wordexp().
    * getutid() must be called at least once in single-threaded mode to enable
    *           thread-safety in subsequent calls when in multi-threaded mode.
    */
#  define GETUTID_LOCK    GENx_LOCK_
#  define GETUTID_UNLOCK  GENx_UNLOCK_
#endif

#ifndef GETUTLINE_LOCK

   /* getutline() Obsolete; use getutxline() instead
    * getutline() either was never in the POSIX Standard, or was removed as of
    *             POSIX 2001.
    * getutline() is vulnerable to signal ALRM
    * getutline() has potential races with other threads concurrently using
    *             any of: itself, endutent(), endutxent(), getlogin(),
    *             getlogin_r(), getutent(), getutid(), getutxent(),
    *             getutxid(), getutxline(), glob(), login(), logout(),
    *             pututline(), pututxline(), setutent(), setutxent(),
    *             utmpname(), or wordexp().
    * getutline() must be called at least once in single-threaded mode to
    *             enable thread-safety in subsequent calls when in
    *             multi-threaded mode. */
#  define GETUTLINE_LOCK    GENx_LOCK_
#  define GETUTLINE_UNLOCK  GENx_UNLOCK_
#endif

#ifndef GETUTXENT_LOCK

   /* getutxent() is vulnerable to signal ALRM
    * getutxent() has potential races with other threads concurrently using
    *             any of: itself, endutent(), endutxent(), getlogin(),
    *             getlogin_r(), getutent(), getutid(), getutline(),
    *             getutxid(), getutxline(), glob(), login(), logout(),
    *             pututline(), pututxline(), setutent(), setutxent(),
    *             utmpname(), or wordexp().
    * getutxent() must be called at least once in single-threaded mode to
    *             enable thread-safety in subsequent calls when in
    *             multi-threaded mode. */
#  define GETUTXENT_LOCK    GENx_LOCK_
#  define GETUTXENT_UNLOCK  GENx_UNLOCK_
#endif

#ifndef GETUTXID_LOCK

   /* getutxid() is vulnerable to signal ALRM
    * getutxid() has potential races with other threads concurrently using any
    *            of: itself, endutent(), endutxent(), getlogin(),
    *            getlogin_r(), getutent(), getutid(), getutline(),
    *            getutxent(), getutxline(), glob(), login(), logout(),
    *            pututline(), pututxline(), setutent(), setutxent(),
    *            utmpname(), or wordexp().
    * getutxid() must be called at least once in single-threaded mode to
    *            enable thread-safety in subsequent calls when in
    *            multi-threaded mode. */
#  define GETUTXID_LOCK    GENx_LOCK_
#  define GETUTXID_UNLOCK  GENx_UNLOCK_
#endif

#ifndef GETUTXLINE_LOCK

   /* getutxline() is vulnerable to signal ALRM
    * getutxline() has potential races with other threads concurrently using
    *              any of: itself, endutent(), endutxent(), getlogin(),
    *              getlogin_r(), getutent(), getutid(), getutline(),
    *              getutxent(), getutxid(), glob(), login(), logout(),
    *              pututline(), pututxline(), setutent(), setutxent(),
    *              utmpname(), or wordexp().
    * getutxline() must be called at least once in single-threaded mode to
    *              enable thread-safety in subsequent calls when in
    *              multi-threaded mode. */
#  define GETUTXLINE_LOCK    GENx_LOCK_
#  define GETUTXLINE_UNLOCK  GENx_UNLOCK_
#endif

#ifndef GETWC_LOCK
#  define GETWC_LOCK
#  define GETWC_UNLOCK
#endif

#ifndef GETWCHAR_LOCK
#  define GETWCHAR_LOCK
#  define GETWCHAR_UNLOCK
#endif

#ifndef GETWCHAR_UNLOCKED_LOCK

   /* getwchar_unlocked() either was never in the POSIX Standard, or was
    *                     removed as of POSIX 2001.
    * getwchar_unlocked() has potential races with other threads concurrently
    *                     using either itself or getchar_unlocked().
    * getwchar_unlocked() Is thread-safe if flockfile() or ftrylockfile() have
    *                     locked stdin, but should not be used since not
    *                     standardized and not widely implemented */
#  define GETWCHAR_UNLOCKED_LOCK    GENx_LOCK_
#  define GETWCHAR_UNLOCKED_UNLOCK  GENx_UNLOCK_
#endif

#ifndef GETWC_UNLOCKED_LOCK

   /* getwc_unlocked() either was never in the POSIX Standard, or was removed
    *                  as of POSIX 2001.
    * getwc_unlocked() has potential races with other threads concurrently
    *                  using any of: itself, addmntent(), clearerr_unlocked(),
    *                  __fbufsize(), fflush_unlocked(), fgetc_unlocked(),
    *                  fgets_unlocked(), fgetwc_unlocked(), fgetws_unlocked(),
    *                  __fpending(), __fpurge(), fputc_unlocked(),
    *                  fputs_unlocked(), fputwc_unlocked(), fputws_unlocked(),
    *                  fread_unlocked(), __fsetlocking(), fwrite_unlocked(),
    *                  getc_unlocked(), putc_unlocked(), or putwc_unlocked().
    * getwc_unlocked() Is thread-safe if flockfile() or ftrylockfile() have
    *                  locked the stream, but should not be used since not
    *                  standardized and not widely implemented */
#  define GETWC_UNLOCKED_LOCK    LCx_LOCK_()
#  define GETWC_UNLOCKED_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef GLOB_LOCK

   /* glob() is vulnerable to signal ALRM
    * glob() has potential races with other threads concurrently using any of:
    *        itself, endutent(), endutxent(), getlogin(), getlogin_r(),
    *        getutent(), getutid(), getutline(), getutxent(), getutxid(),
    *        getutxline(), login(), logout(), pututline(), pututxline(),
    *        setutent(), setutxent(), utmpname(), or wordexp(). */
#  define GLOB_LOCK    GENx_ENVr_LCr_LOCK_()
#  define GLOB_UNLOCK  GENx_ENVr_LCr_UNLOCK_()
#endif

#ifndef GMTIME_LOCK

   /* gmtime() has potential races with other threads concurrently using any
    *          of: itself, ctime(), or localtime(). */
#  define GMTIME_LOCK    GENx_ENVr_LCr_LOCK_()
#  define GMTIME_UNLOCK  GENx_ENVr_LCr_UNLOCK_()
#endif

#ifndef GMTIME_R_LOCK
#  define GMTIME_R_LOCK    ENVr_LCr_LOCK_()
#  define GMTIME_R_UNLOCK  ENVr_LCr_UNLOCK_()
#endif

#ifndef GRANTPT_LOCK
#  define GRANTPT_LOCK    LCr_LOCK_()
#  define GRANTPT_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef HCREATE_LOCK

   /* hcreate() has potential races with other threads concurrently using any
    *           of: itself, hdestroy(), or hsearch(). */
#  define HCREATE_LOCK    GENx_LOCK_
#  define HCREATE_UNLOCK  GENx_UNLOCK_
#endif

#ifndef HCREATE_R_LOCK

   /* hcreate_r() either was never in the POSIX Standard, or was removed as of
    *             POSIX 2001.
    * hcreate_r() has potential races with other threads concurrently using
    *             any of: itself, hdestroy_r(), or hsearch_r(). */
#  define HCREATE_R_LOCK    GENx_LOCK_
#  define HCREATE_R_UNLOCK  GENx_UNLOCK_
#endif

#ifndef HDESTROY_LOCK

   /* hdestroy() has potential races with other threads concurrently using any
    *            of: itself, hcreate(), or hsearch(). */
#  define HDESTROY_LOCK    GENx_LOCK_
#  define HDESTROY_UNLOCK  GENx_UNLOCK_
#endif

#ifndef HDESTROY_R_LOCK

   /* hdestroy_r() either was never in the POSIX Standard, or was removed as
    *              of POSIX 2001.
    * hdestroy_r() has potential races with other threads concurrently using
    *              any of: itself, hcreate_r(), or hsearch_r(). */
#  define HDESTROY_R_LOCK    GENx_LOCK_
#  define HDESTROY_R_UNLOCK  GENx_UNLOCK_
#endif

#ifndef HSEARCH_LOCK

   /* hsearch() has potential races with other threads concurrently using any
    *           of: itself, hcreate(), or hdestroy(). */
#  define HSEARCH_LOCK    GENx_LOCK_
#  define HSEARCH_UNLOCK  GENx_UNLOCK_
#endif

#ifndef HSEARCH_R_LOCK

   /* hsearch_r() either was never in the POSIX Standard, or was removed as of
    *             POSIX 2001.
    * hsearch_r() has potential races with other threads concurrently using
    *             any of: itself, hcreate_r(), or hdestroy_r(). */
#  define HSEARCH_R_LOCK    GENx_LOCK_
#  define HSEARCH_R_UNLOCK  GENx_UNLOCK_
#endif

#ifndef ICONV_LOCK
#  define ICONV_LOCK    GENx_LOCK_
#  define ICONV_UNLOCK  GENx_UNLOCK_
#endif

#ifndef ICONV_OPEN_LOCK
#  define ICONV_OPEN_LOCK    LCr_LOCK_()
#  define ICONV_OPEN_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef INET_ADDR_LOCK
#  define INET_ADDR_LOCK    LCr_LOCK_()
#  define INET_ADDR_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef INET_ATON_LOCK

   /* inet_aton() either was never in the POSIX Standard, or was removed as of
    *             POSIX 2001. */
#  define INET_ATON_LOCK    LCr_LOCK_()
#  define INET_ATON_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef INET_NETWORK_LOCK

   /* inet_network() either was never in the POSIX Standard, or was removed as
    *                of POSIX 2001. */
#  define INET_NETWORK_LOCK    LCr_LOCK_()
#  define INET_NETWORK_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef INET_NTOA_LOCK
#  define INET_NTOA_LOCK    LCr_LOCK_()
#  define INET_NTOA_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef INET_NTOP_LOCK
#  define INET_NTOP_LOCK    LCr_LOCK_()
#  define INET_NTOP_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef INET_PTON_LOCK
#  define INET_PTON_LOCK    LCr_LOCK_()
#  define INET_PTON_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef INITGROUPS_LOCK

   /* initgroups() either was never in the POSIX Standard, or was removed as
    *              of POSIX 2001. */
#  define INITGROUPS_LOCK    LCr_LOCK_()
#  define INITGROUPS_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef INITSTATE_R_LOCK

   /* initstate_r() either was never in the POSIX Standard, or was removed as
    *               of POSIX 2001.
    * initstate_r() has potential races with other threads concurrently using
    *               any of: itself, random_r(), setstate_r(), or srandom_r().
    */
#  define INITSTATE_R_LOCK    GENx_LOCK_
#  define INITSTATE_R_UNLOCK  GENx_UNLOCK_
#endif

#ifndef INNETGR_LOCK

   /* innetgr() either was never in the POSIX Standard, or was removed as of
    *           POSIX 2001.
    * innetgr() has potential races with other threads concurrently using any
    *           of: itself, endnetgrent(), getnetgrent(), getnetgrent_r(), or
    *           setnetgrent(). */
#  define INNETGR_LOCK    LCx_LOCK_()
#  define INNETGR_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef IRUSEROK_LOCK

   /* iruserok() either was never in the POSIX Standard, or was removed as of
    *            POSIX 2001. */
#  define IRUSEROK_LOCK    LCr_LOCK_()
#  define IRUSEROK_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef IRUSEROK_AF_LOCK

   /* iruserok_af() either was never in the POSIX Standard, or was removed as
    *               of POSIX 2001. */
#  define IRUSEROK_AF_LOCK    LCr_LOCK_()
#  define IRUSEROK_AF_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef ISALNUM_LOCK

   /* isalnum() Use a Perl isALNUM-family macro instead */
#  define ISALNUM_LOCK
#  define ISALNUM_UNLOCK
#endif

#ifndef ISALNUM_L_LOCK
#  define ISALNUM_L_LOCK
#  define ISALNUM_L_UNLOCK
#endif

#ifndef ISALPHA_LOCK

   /* isalpha() Use a Perl isALPHA-family macro instead */
#  define ISALPHA_LOCK
#  define ISALPHA_UNLOCK
#endif

#ifndef ISALPHA_L_LOCK
#  define ISALPHA_L_LOCK
#  define ISALPHA_L_UNLOCK
#endif

#ifndef ISASCII_LOCK

   /* isascii() Use a Perl isASCII-family macro instead
    * isascii() Considered obsolete as being non-portable, but Perl makes it
    *           portable when using a macro */
#  define ISASCII_LOCK
#  define ISASCII_UNLOCK
#endif

#ifndef ISASCII_L_LOCK

   /* isascii_l() either was never in the POSIX Standard, or was removed as of
    *             POSIX 2001. */
#  define ISASCII_L_LOCK
#  define ISASCII_L_UNLOCK
#endif

#ifndef ISBLANK_LOCK

   /* isblank() Use a Perl isBLANK-family macro instead */
#  define ISBLANK_LOCK
#  define ISBLANK_UNLOCK
#endif

#ifndef ISBLANK_L_LOCK
#  define ISBLANK_L_LOCK
#  define ISBLANK_L_UNLOCK
#endif

#ifndef ISCNTRL_LOCK

   /* iscntrl() Use a Perl isCNTRL-family macro instead */
#  define ISCNTRL_LOCK
#  define ISCNTRL_UNLOCK
#endif

#ifndef ISCNTRL_L_LOCK
#  define ISCNTRL_L_LOCK
#  define ISCNTRL_L_UNLOCK
#endif

#ifndef ISDIGIT_LOCK

   /* isdigit() Use a Perl isDIGIT-family macro instead */
#  define ISDIGIT_LOCK
#  define ISDIGIT_UNLOCK
#endif

#ifndef ISDIGIT_L_LOCK
#  define ISDIGIT_L_LOCK
#  define ISDIGIT_L_UNLOCK
#endif

#ifndef ISGRAPH_LOCK

   /* isgraph() Use a Perl isGRAPH-family macro instead */
#  define ISGRAPH_LOCK
#  define ISGRAPH_UNLOCK
#endif

#ifndef ISGRAPH_L_LOCK
#  define ISGRAPH_L_LOCK
#  define ISGRAPH_L_UNLOCK
#endif

#ifndef ISLOWER_LOCK

   /* islower() Use a Perl isLOWER-family macro instead */
#  define ISLOWER_LOCK
#  define ISLOWER_UNLOCK
#endif

#ifndef ISLOWER_L_LOCK
#  define ISLOWER_L_LOCK
#  define ISLOWER_L_UNLOCK
#endif

#ifndef ISPRINT_LOCK

   /* isprint() Use a Perl isPRINT-family macro instead */
#  define ISPRINT_LOCK
#  define ISPRINT_UNLOCK
#endif

#ifndef ISPRINT_L_LOCK
#  define ISPRINT_L_LOCK
#  define ISPRINT_L_UNLOCK
#endif

#ifndef ISPUNCT_LOCK

   /* ispunct() Use a Perl isPUNCT-family macro instead */
#  define ISPUNCT_LOCK
#  define ISPUNCT_UNLOCK
#endif

#ifndef ISPUNCT_L_LOCK
#  define ISPUNCT_L_LOCK
#  define ISPUNCT_L_UNLOCK
#endif

#ifndef ISSPACE_LOCK

   /* isspace() Use a Perl isSPACE-family macro instead */
#  define ISSPACE_LOCK
#  define ISSPACE_UNLOCK
#endif

#ifndef ISSPACE_L_LOCK
#  define ISSPACE_L_LOCK
#  define ISSPACE_L_UNLOCK
#endif

#ifndef ISUPPER_LOCK

   /* isupper() Use a Perl isUPPER-family macro instead */
#  define ISUPPER_LOCK
#  define ISUPPER_UNLOCK
#endif

#ifndef ISUPPER_L_LOCK
#  define ISUPPER_L_LOCK
#  define ISUPPER_L_UNLOCK
#endif

#ifndef ISWALNUM_LOCK

   /* iswalnum() Use a Perl isALNUM-family macro instead */
#  define ISWALNUM_LOCK    LCr_LOCK_()
#  define ISWALNUM_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef ISWALNUM_L_LOCK
#  define ISWALNUM_L_LOCK    LCr_LOCK_()
#  define ISWALNUM_L_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef ISWALPHA_LOCK

   /* iswalpha() Use a Perl isALPHA-family macro instead */
#  define ISWALPHA_LOCK    LCr_LOCK_()
#  define ISWALPHA_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef ISWALPHA_L_LOCK
#  define ISWALPHA_L_LOCK    LCr_LOCK_()
#  define ISWALPHA_L_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef ISWBLANK_LOCK

   /* iswblank() Use a Perl isBLANK-family macro instead */
#  define ISWBLANK_LOCK    LCr_LOCK_()
#  define ISWBLANK_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef ISWBLANK_L_LOCK
#  define ISWBLANK_L_LOCK    LCr_LOCK_()
#  define ISWBLANK_L_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef ISWCNTRL_LOCK

   /* iswcntrl() Use a Perl isCNTRL-family macro instead */
#  define ISWCNTRL_LOCK    LCr_LOCK_()
#  define ISWCNTRL_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef ISWCNTRL_L_LOCK
#  define ISWCNTRL_L_LOCK    LCr_LOCK_()
#  define ISWCNTRL_L_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef ISWDIGIT_LOCK

   /* iswdigit() Use a Perl isDIGIT-family macro instead */
#  define ISWDIGIT_LOCK    LCr_LOCK_()
#  define ISWDIGIT_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef ISWDIGIT_L_LOCK
#  define ISWDIGIT_L_LOCK    LCr_LOCK_()
#  define ISWDIGIT_L_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef ISWGRAPH_LOCK

   /* iswgraph() Use a Perl isGRAPH-family macro instead */
#  define ISWGRAPH_LOCK    LCr_LOCK_()
#  define ISWGRAPH_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef ISWGRAPH_L_LOCK
#  define ISWGRAPH_L_LOCK    LCr_LOCK_()
#  define ISWGRAPH_L_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef ISWLOWER_LOCK

   /* iswlower() Use a Perl isLOWER-family macro instead */
#  define ISWLOWER_LOCK    LCr_LOCK_()
#  define ISWLOWER_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef ISWLOWER_L_LOCK
#  define ISWLOWER_L_LOCK    LCr_LOCK_()
#  define ISWLOWER_L_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef ISWPRINT_LOCK

   /* iswprint() Use a Perl isPRINT-family macro instead */
#  define ISWPRINT_LOCK    LCr_LOCK_()
#  define ISWPRINT_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef ISWPRINT_L_LOCK
#  define ISWPRINT_L_LOCK    LCr_LOCK_()
#  define ISWPRINT_L_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef ISWPUNCT_LOCK

   /* iswpunct() Use a Perl isPUNCT-family macro instead */
#  define ISWPUNCT_LOCK    LCr_LOCK_()
#  define ISWPUNCT_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef ISWPUNCT_L_LOCK
#  define ISWPUNCT_L_LOCK    LCr_LOCK_()
#  define ISWPUNCT_L_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef ISWSPACE_LOCK

   /* iswspace() Use a Perl isSPACE-family macro instead */
#  define ISWSPACE_LOCK    LCr_LOCK_()
#  define ISWSPACE_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef ISWSPACE_L_LOCK
#  define ISWSPACE_L_LOCK    LCr_LOCK_()
#  define ISWSPACE_L_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef ISWUPPER_LOCK

   /* iswupper() Use a Perl isUPPER-family macro instead */
#  define ISWUPPER_LOCK    LCr_LOCK_()
#  define ISWUPPER_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef ISWUPPER_L_LOCK
#  define ISWUPPER_L_LOCK    LCr_LOCK_()
#  define ISWUPPER_L_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef ISWXDIGIT_LOCK

   /* iswxdigit() Use a Perl isXDIGIT-family macro instead */
#  define ISWXDIGIT_LOCK    LCr_LOCK_()
#  define ISWXDIGIT_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef ISWXDIGIT_L_LOCK
#  define ISWXDIGIT_L_LOCK    LCr_LOCK_()
#  define ISWXDIGIT_L_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef ISXDIGIT_LOCK

   /* isxdigit() Use a Perl isXDIGIT-family macro instead */
#  define ISXDIGIT_LOCK
#  define ISXDIGIT_UNLOCK
#endif

#ifndef ISXDIGIT_L_LOCK
#  define ISXDIGIT_L_LOCK
#  define ISXDIGIT_L_UNLOCK
#endif

#ifndef JRAND48_LOCK

   /* jrand48() has potential races with other threads concurrently using any
    *           of: itself, drand48(), erand48(), lcong48(), lrand48(),
    *           mrand48(), nrand48(), seed48(), or srand48(). */
#  define JRAND48_LOCK    GENx_LOCK_
#  define JRAND48_UNLOCK  GENx_UNLOCK_
#endif

#ifndef JRAND48_R_LOCK

   /* jrand48_r() either was never in the POSIX Standard, or was removed as of
    *             POSIX 2001.
    * jrand48_r() has potential races with other threads concurrently using
    *             any of: itself, drand48_r(), erand48_r(), lcong48_r(),
    *             lrand48_r(), mrand48_r(), nrand48_r(), seed48_r(), or
    *             srand48_r(). */
#  define JRAND48_R_LOCK    GENx_LOCK_
#  define JRAND48_R_UNLOCK  GENx_UNLOCK_
#endif

#ifndef L64A_LOCK
#  define L64A_LOCK    GENx_LOCK_
#  define L64A_UNLOCK  GENx_UNLOCK_
#endif

#ifndef LCONG48_LOCK

   /* lcong48() has potential races with other threads concurrently using any
    *           of: itself, drand48(), erand48(), jrand48(), lrand48(),
    *           mrand48(), nrand48(), seed48(), or srand48(). */
#  define LCONG48_LOCK    GENx_LOCK_
#  define LCONG48_UNLOCK  GENx_UNLOCK_
#endif

#ifndef LCONG48_R_LOCK

   /* lcong48_r() either was never in the POSIX Standard, or was removed as of
    *             POSIX 2001.
    * lcong48_r() has potential races with other threads concurrently using
    *             any of: itself, drand48_r(), erand48_r(), jrand48_r(),
    *             lrand48_r(), mrand48_r(), nrand48_r(), seed48_r(), or
    *             srand48_r(). */
#  define LCONG48_R_LOCK    GENx_LOCK_
#  define LCONG48_R_UNLOCK  GENx_UNLOCK_
#endif

#ifndef LGAMMA_LOCK

   /* lgamma() has potential races with other threads concurrently using any
    *          of: itself, gamma(), gammaf(), gammal(), lgammaf(), or
    *          lgammal(). */
#  define LGAMMA_LOCK    GENx_LOCK_
#  define LGAMMA_UNLOCK  GENx_UNLOCK_
#endif

#ifndef LGAMMAF_LOCK

   /* lgammaf() has potential races with other threads concurrently using any
    *           of: itself, gamma(), gammaf(), gammal(), lgamma(), or
    *           lgammal(). */
#  define LGAMMAF_LOCK    GENx_LOCK_
#  define LGAMMAF_UNLOCK  GENx_UNLOCK_
#endif

#ifndef LGAMMAL_LOCK

   /* lgammal() has potential races with other threads concurrently using any
    *           of: itself, gamma(), gammaf(), gammal(), lgamma(), or
    *           lgammaf(). */
#  define LGAMMAL_LOCK    GENx_LOCK_
#  define LGAMMAL_UNLOCK  GENx_UNLOCK_
#endif

#ifndef LOCALECONV_LOCK

   /* localeconv() Use Perl_localeconv() instead */
#  define LOCALECONV_LOCK    LCx_LOCK_()
#  define LOCALECONV_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef LOCALTIME_LOCK

   /* localtime() has potential races with other threads concurrently using
    *             any of: itself, ctime(), ctime_r(), daylight, gmtime(),
    *             localtime_r(), mktime(), strftime(), timezone, tzname, or
    *             tzset(). */
#  define LOCALTIME_LOCK    GENx_ENVr_LCr_LOCK_()
#  define LOCALTIME_UNLOCK  GENx_ENVr_LCr_UNLOCK_()
#endif

#ifndef LOCALTIME_R_LOCK

   /* localtime_r() has potential races with other threads concurrently using
    *               any of: itself, ctime(), ctime_r(), daylight, localtime(),
    *               mktime(), strftime(), timezone, tzname, or tzset(). */
#  define LOCALTIME_R_LOCK    GENx_ENVr_LCr_LOCK_()
#  define LOCALTIME_R_UNLOCK  GENx_ENVr_LCr_UNLOCK_()
#endif

#ifndef LOGIN_LOCK

   /* login() either was never in the POSIX Standard, or was removed as of
    *         POSIX 2001.
    * login() is vulnerable to signal ALRM
    * login() has potential races with other threads concurrently using any
    *         of: itself, endutent(), endutxent(), getlogin(), getlogin_r(),
    *         getutent(), getutid(), getutline(), getutxent(), getutxid(),
    *         getutxline(), glob(), logout(), pututline(), pututxline(),
    *         setutent(), setutxent(), utmpname(), or wordexp(). */
#  define LOGIN_LOCK    GENx_LOCK_
#  define LOGIN_UNLOCK  GENx_UNLOCK_
#endif

#ifndef LOGIN_TTY_LOCK

   /* login_tty() either was never in the POSIX Standard, or was removed as of
    *             POSIX 2001.
    * login_tty() has potential races with other threads concurrently using
    *             either itself or ttyname(). */
#  define LOGIN_TTY_LOCK    GENx_LOCK_
#  define LOGIN_TTY_UNLOCK  GENx_UNLOCK_
#endif

#ifndef LOGOUT_LOCK

   /* logout() either was never in the POSIX Standard, or was removed as of
    *          POSIX 2001.
    * logout() is vulnerable to signal ALRM
    * logout() has potential races with other threads concurrently using any
    *          of: itself, endutent(), endutxent(), getlogin(), getlogin_r(),
    *          getutent(), getutid(), getutline(), getutxent(), getutxid(),
    *          getutxline(), glob(), login(), pututline(), pututxline(),
    *          setutent(), setutxent(), utmpname(), or wordexp(). */
#  define LOGOUT_LOCK    GENx_LOCK_
#  define LOGOUT_UNLOCK  GENx_UNLOCK_
#endif

#ifndef LOGWTMP_LOCK

   /* logwtmp() either was never in the POSIX Standard, or was removed as of
    *           POSIX 2001.
    * logwtmp() is vulnerable to signal ALRM */
#  define LOGWTMP_LOCK    NOOP
#  define LOGWTMP_UNLOCK  NOOP
#endif

#ifndef LRAND48_LOCK

   /* lrand48() has potential races with other threads concurrently using any
    *           of: itself, drand48(), erand48(), jrand48(), lcong48(),
    *           mrand48(), nrand48(), seed48(), or srand48(). */
#  define LRAND48_LOCK    GENx_LOCK_
#  define LRAND48_UNLOCK  GENx_UNLOCK_
#endif

#ifndef LRAND48_R_LOCK

   /* lrand48_r() either was never in the POSIX Standard, or was removed as of
    *             POSIX 2001.
    * lrand48_r() has potential races with other threads concurrently using
    *             any of: itself, drand48_r(), erand48_r(), jrand48_r(),
    *             lcong48_r(), mrand48_r(), nrand48_r(), seed48_r(), or
    *             srand48_r(). */
#  define LRAND48_R_LOCK    GENx_LOCK_
#  define LRAND48_R_UNLOCK  GENx_UNLOCK_
#endif

#ifndef MAKECONTEXT_LOCK

   /* makecontext() has potential races with other threads concurrently using
    *               any of: itself, getcontext(), setcontext(), or
    *               swapcontext(). */
#  define MAKECONTEXT_LOCK    GENx_LOCK_
#  define MAKECONTEXT_UNLOCK  GENx_UNLOCK_
#endif

#ifndef MALLINFO_LOCK

   /* mallinfo() either was never in the POSIX Standard, or was removed as of
    *            POSIX 2001.
    * mallinfo() must be called at least once in single-threaded mode to
    *            enable thread-safety in subsequent calls when in
    *            multi-threaded mode. */
#  define MALLINFO_LOCK    GENx_LOCK_
#  define MALLINFO_UNLOCK  GENx_UNLOCK_
#endif

#ifndef MB_CUR_MAX_LOCK

   /* MB_CUR_MAX locking macros are only valid if its value is used read-only
    */
#  define MB_CUR_MAX_LOCK
#  define MB_CUR_MAX_UNLOCK
#endif

#ifndef MBLEN_LOCK

   /* mblen() Use mbrlen() instead */
#  define MBLEN_LOCK    LCx_LOCK_()
#  define MBLEN_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef MBRLEN_LOCK

   /* mbrlen() locking macros are only valid if '!ps' */
#  define MBRLEN_LOCK
#  define MBRLEN_UNLOCK
#endif

#ifndef MBRTOWC_LOCK

   /* mbrtowc() locking macros are only valid if '!ps' */
#  define MBRTOWC_LOCK
#  define MBRTOWC_UNLOCK
#endif

#ifndef MBSINIT_LOCK
#  define MBSINIT_LOCK
#  define MBSINIT_UNLOCK
#endif

#ifndef MBSNRTOWCS_LOCK

   /* mbsnrtowcs() locking macros are only valid if '!ps' */
#  define MBSNRTOWCS_LOCK
#  define MBSNRTOWCS_UNLOCK
#endif

#ifndef MBSRTOWCS_LOCK

   /* mbsrtowcs() locking macros are only valid if '!ps' */
#  define MBSRTOWCS_LOCK
#  define MBSRTOWCS_UNLOCK
#endif

#ifndef MBSTOWCS_LOCK
#  define MBSTOWCS_LOCK
#  define MBSTOWCS_UNLOCK
#endif

#ifndef MBTOWC_LOCK

   /* mbtowc() Use mbrtowc() instead */
#  define MBTOWC_LOCK    LCx_LOCK_()
#  define MBTOWC_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef MCHECK_LOCK

   /* mcheck() either was never in the POSIX Standard, or was removed as of
    *          POSIX 2001.
    * mcheck() has potential races with other threads concurrently using any
    *          of: itself, mcheck_check_all(), mcheck_pedantic(), or mprobe().
    */
#  define MCHECK_LOCK    GENx_LOCK_
#  define MCHECK_UNLOCK  GENx_UNLOCK_
#endif

#ifndef MCHECK_CHECK_ALL_LOCK

   /* mcheck_check_all() either was never in the POSIX Standard, or was
    *                    removed as of POSIX 2001.
    * mcheck_check_all() has potential races with other threads concurrently
    *                    using any of: itself, mcheck(), mcheck_pedantic(), or
    *                    mprobe(). */
#  define MCHECK_CHECK_ALL_LOCK    GENx_LOCK_
#  define MCHECK_CHECK_ALL_UNLOCK  GENx_UNLOCK_
#endif

#ifndef MCHECK_PEDANTIC_LOCK

   /* mcheck_pedantic() either was never in the POSIX Standard, or was removed
    *                   as of POSIX 2001.
    * mcheck_pedantic() has potential races with other threads concurrently
    *                   using any of: itself, mcheck(), mcheck_check_all(), or
    *                   mprobe(). */
#  define MCHECK_PEDANTIC_LOCK    GENx_LOCK_
#  define MCHECK_PEDANTIC_UNLOCK  GENx_UNLOCK_
#endif

#ifndef MKTIME_LOCK

   /* mktime() has potential races with other threads concurrently using any
    *          of: itself, ctime(), ctime_r(), daylight, localtime(),
    *          localtime_r(), strftime(), timezone, tzname, or tzset(). */
#  define MKTIME_LOCK    GENx_ENVr_LCr_LOCK_()
#  define MKTIME_UNLOCK  GENx_ENVr_LCr_UNLOCK_()
#endif

#ifndef MPROBE_LOCK

   /* mprobe() either was never in the POSIX Standard, or was removed as of
    *          POSIX 2001.
    * mprobe() has potential races with other threads concurrently using any
    *          of: itself, mcheck(), mcheck_check_all(), or mcheck_pedantic().
    */
#  define MPROBE_LOCK    GENx_LOCK_
#  define MPROBE_UNLOCK  GENx_UNLOCK_
#endif

#ifndef MRAND48_LOCK

   /* mrand48() has potential races with other threads concurrently using any
    *           of: itself, drand48(), erand48(), jrand48(), lcong48(),
    *           lrand48(), nrand48(), seed48(), or srand48(). */
#  define MRAND48_LOCK    GENx_LOCK_
#  define MRAND48_UNLOCK  GENx_UNLOCK_
#endif

#ifndef MRAND48_R_LOCK

   /* mrand48_r() either was never in the POSIX Standard, or was removed as of
    *             POSIX 2001.
    * mrand48_r() has potential races with other threads concurrently using
    *             any of: itself, drand48_r(), erand48_r(), jrand48_r(),
    *             lcong48_r(), lrand48_r(), nrand48_r(), seed48_r(), or
    *             srand48_r(). */
#  define MRAND48_R_LOCK    GENx_LOCK_
#  define MRAND48_R_UNLOCK  GENx_UNLOCK_
#endif

#ifndef MTRACE_LOCK

   /* mtrace() either was never in the POSIX Standard, or was removed as of
    *          POSIX 2001. */
#  define MTRACE_LOCK                              \
#    error_mtrace_not_suitable_for_multi-threaded_operation
#endif

#ifndef MUNTRACE_LOCK

   /* muntrace() either was never in the POSIX Standard, or was removed as of
    *            POSIX 2001. */
#  define MUNTRACE_LOCK                              \
#    error_muntrace_not_suitable_for_multi-threaded_operation
#endif

#ifndef NAN_LOCK
#  define NAN_LOCK    LCr_LOCK_()
#  define NAN_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef NANF_LOCK
#  define NANF_LOCK    LCr_LOCK_()
#  define NANF_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef NANL_LOCK
#  define NANL_LOCK    LCr_LOCK_()
#  define NANL_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef NEWLOCALE_LOCK
#  define NEWLOCALE_LOCK    ENVr_LOCK_
#  define NEWLOCALE_UNLOCK  ENVr_UNLOCK_
#endif

#ifndef NFTW_LOCK

   /* nftw() chdir() in another thread will mess this up */
#  define NFTW_LOCK    GENr_LOCK_
#  define NFTW_UNLOCK  GENr_UNLOCK_
#endif

#ifndef NL_LANGINFO_LOCK
#  define NL_LANGINFO_LOCK    LCx_LOCK_()
#  define NL_LANGINFO_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef NRAND48_LOCK

   /* nrand48() has potential races with other threads concurrently using any
    *           of: itself, drand48(), erand48(), jrand48(), lcong48(),
    *           lrand48(), mrand48(), seed48(), or srand48(). */
#  define NRAND48_LOCK    GENx_LOCK_
#  define NRAND48_UNLOCK  GENx_UNLOCK_
#endif

#ifndef NRAND48_R_LOCK

   /* nrand48_r() either was never in the POSIX Standard, or was removed as of
    *             POSIX 2001.
    * nrand48_r() has potential races with other threads concurrently using
    *             any of: itself, drand48_r(), erand48_r(), jrand48_r(),
    *             lcong48_r(), lrand48_r(), mrand48_r(), seed48_r(), or
    *             srand48_r(). */
#  define NRAND48_R_LOCK    GENx_LOCK_
#  define NRAND48_R_UNLOCK  GENx_UNLOCK_
#endif

#ifndef OPENPTY_LOCK

   /* openpty() either was never in the POSIX Standard, or was removed as of
    *           POSIX 2001. */
#  define OPENPTY_LOCK    LCr_LOCK_()
#  define OPENPTY_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef PERROR_LOCK
#  define PERROR_LOCK    GENx_LOCK_
#  define PERROR_UNLOCK  GENx_UNLOCK_
#endif

#ifndef POSIX_FALLOCATE_LOCK

   /* posix_fallocate() The safety in glibc depends on the file system.
    *                   Generally safe */
#  define POSIX_FALLOCATE_LOCK    NOOP
#  define POSIX_FALLOCATE_UNLOCK  NOOP
#endif

#ifndef PRINTF_LOCK
#  define PRINTF_LOCK    LCr_LOCK_()
#  define PRINTF_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef PROFIL_LOCK

   /* profil() either was never in the POSIX Standard, or was removed as of
    *          POSIX 2001. */
#  define PROFIL_LOCK                              \
#    error_profil_not_suitable_for_multi-threaded_operation
#endif

#ifndef PSIGINFO_LOCK
#  define PSIGINFO_LOCK    LCr_LOCK_()
#  define PSIGINFO_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef PSIGNAL_LOCK
#  define PSIGNAL_LOCK    LCr_LOCK_()
#  define PSIGNAL_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef PTSNAME_LOCK
#  define PTSNAME_LOCK    GENx_LOCK_
#  define PTSNAME_UNLOCK  GENx_UNLOCK_
#endif

#ifndef PUTCHAR_UNLOCKED_LOCK

   /* putchar_unlocked() has potential races with other threads concurrently
    *                    using either itself or putwchar_unlocked().
    * putchar_unlocked() Is thread-safe if flockfile() or ftrylockfile() have
    *                    locked stdin */
#  define PUTCHAR_UNLOCKED_LOCK    GENx_LOCK_
#  define PUTCHAR_UNLOCKED_UNLOCK  GENx_UNLOCK_
#endif

#ifndef PUTC_UNLOCKED_LOCK

   /* putc_unlocked() has potential races with other threads concurrently
    *                 using any of: itself, addmntent(), clearerr_unlocked(),
    *                 __fbufsize(), fflush_unlocked(), fgetc_unlocked(),
    *                 fgets_unlocked(), fgetwc_unlocked(), fgetws_unlocked(),
    *                 __fpending(), __fpurge(), fputc_unlocked(),
    *                 fputs_unlocked(), fputwc_unlocked(), fputws_unlocked(),
    *                 fread_unlocked(), __fsetlocking(), fwrite_unlocked(),
    *                 getc_unlocked(), getwc_unlocked(), or putwc_unlocked().
    * putc_unlocked() Is thread-safe if flockfile() or ftrylockfile() have
    *                 locked the stream */
#  define PUTC_UNLOCKED_LOCK    LCx_LOCK_()
#  define PUTC_UNLOCKED_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef PUTENV_LOCK
#  define PUTENV_LOCK    ENVx_LOCK_
#  define PUTENV_UNLOCK  ENVx_UNLOCK_
#endif

#ifndef PUTPWENT_LOCK
#  define PUTPWENT_LOCK    LCr_LOCK_()
#  define PUTPWENT_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef PUTSPENT_LOCK

   /* putspent() either was never in the POSIX Standard, or was removed as of
    *            POSIX 2001. */
#  define PUTSPENT_LOCK    LCr_LOCK_()
#  define PUTSPENT_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef PUTUTLINE_LOCK

   /* pututline() Obsolete; use pututxline() instead
    * pututline() either was never in the POSIX Standard, or was removed as of
    *             POSIX 2001.
    * pututline() is vulnerable to signal ALRM
    * pututline() has potential races with other threads concurrently using
    *             any of: itself, endutent(), endutxent(), getlogin(),
    *             getlogin_r(), getutent(), getutid(), getutline(),
    *             getutxent(), getutxid(), getutxline(), glob(), login(),
    *             logout(), pututxline(), setutent(), setutxent(), utmpname(),
    *             or wordexp(). */
#  define PUTUTLINE_LOCK    GENx_LOCK_
#  define PUTUTLINE_UNLOCK  GENx_UNLOCK_
#endif

#ifndef PUTUTXLINE_LOCK

   /* pututxline() is vulnerable to signal ALRM
    * pututxline() has potential races with other threads concurrently using
    *              any of: itself, endutent(), endutxent(), getlogin(),
    *              getlogin_r(), getutent(), getutid(), getutline(),
    *              getutxent(), getutxid(), getutxline(), glob(), login(),
    *              logout(), pututline(), setutent(), setutxent(), utmpname(),
    *              or wordexp(). */
#  define PUTUTXLINE_LOCK    GENx_LOCK_
#  define PUTUTXLINE_UNLOCK  GENx_UNLOCK_
#endif

#ifndef PUTWC_LOCK
#  define PUTWC_LOCK
#  define PUTWC_UNLOCK
#endif

#ifndef PUTWCHAR_LOCK
#  define PUTWCHAR_LOCK
#  define PUTWCHAR_UNLOCK
#endif

#ifndef PUTWCHAR_UNLOCKED_LOCK

   /* putwchar_unlocked() either was never in the POSIX Standard, or was
    *                     removed as of POSIX 2001.
    * putwchar_unlocked() has potential races with other threads concurrently
    *                     using either itself or putchar_unlocked().
    * putwchar_unlocked() Is thread-safe if flockfile() or ftrylockfile() have
    *                     locked stdout, but should not be used since not
    *                     standardized and not widely implemented */
#  define PUTWCHAR_UNLOCKED_LOCK    GENx_LOCK_
#  define PUTWCHAR_UNLOCKED_UNLOCK  GENx_UNLOCK_
#endif

#ifndef PUTWC_UNLOCKED_LOCK

   /* putwc_unlocked() either was never in the POSIX Standard, or was removed
    *                  as of POSIX 2001.
    * putwc_unlocked() has potential races with other threads concurrently
    *                  using any of: itself, addmntent(), clearerr_unlocked(),
    *                  __fbufsize(), fflush_unlocked(), fgetc_unlocked(),
    *                  fgets_unlocked(), fgetwc_unlocked(), fgetws_unlocked(),
    *                  __fpending(), __fpurge(), fputc_unlocked(),
    *                  fputs_unlocked(), fputwc_unlocked(), fputws_unlocked(),
    *                  fread_unlocked(), __fsetlocking(), fwrite_unlocked(),
    *                  getc_unlocked(), getwc_unlocked(), or putc_unlocked().
    * putwc_unlocked() Is thread-safe if flockfile() or ftrylockfile() have
    *                  locked the stream, but should not be used since not
    *                  standardized and not widely implemented */
#  define PUTWC_UNLOCKED_LOCK    LCx_LOCK_()
#  define PUTWC_UNLOCKED_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef PVALLOC_LOCK

   /* pvalloc() either was never in the POSIX Standard, or was removed as of
    *           POSIX 2001.
    * pvalloc() must be called at least once in single-threaded mode to enable
    *           thread-safety in subsequent calls when in multi-threaded mode.
    */
#  define PVALLOC_LOCK    NOOP
#  define PVALLOC_UNLOCK  NOOP
#endif

#ifndef QECVT_LOCK

   /* qecvt() Obsolete; use snprintf() instead
    * qecvt() either was never in the POSIX Standard, or was removed as of
    *         POSIX 2001. */
#  define QECVT_LOCK    GENx_LOCK_
#  define QECVT_UNLOCK  GENx_UNLOCK_
#endif

#ifndef QFCVT_LOCK

   /* qfcvt() Obsolete; use snprintf() instead
    * qfcvt() either was never in the POSIX Standard, or was removed as of
    *         POSIX 2001. */
#  define QFCVT_LOCK    GENx_LOCK_
#  define QFCVT_UNLOCK  GENx_UNLOCK_
#endif

#ifndef QUERYLOCALE_LOCK

   /* querylocale() Use Perl_setlocale() instead
    * querylocale() This function is non-portable, found usually only on
    *               *BSD-derived platforms, and is buggy in various ways. DO
    *               NOT USE.  The next version of the POSIX Standard is
    *               scheduled to have a replacement for this, but you should
    *               be using Perl_setlocale() which copes for the deficiencies
    *               in this. */
#  define QUERYLOCALE_LOCK    NOOP
#  define QUERYLOCALE_UNLOCK  NOOP
#endif

#ifndef RAND_LOCK
#  ifndef __GLIBC__

     /* rand() Problematic and should be avoided; See POSIX Standard */
#    define RAND_LOCK    NOOP
#    define RAND_UNLOCK  NOOP
#  else
#    define RAND_LOCK    NOOP
#    define RAND_UNLOCK  NOOP
#  endif
#endif

#ifndef RANDOM_R_LOCK

   /* random_r() either was never in the POSIX Standard, or was removed as of
    *            POSIX 2001.
    * random_r() has potential races with other threads concurrently using any
    *            of: itself, initstate_r(), setstate_r(), or srandom_r(). */
#  define RANDOM_R_LOCK    GENx_LOCK_
#  define RANDOM_R_UNLOCK  GENx_UNLOCK_
#endif

#ifndef RCMD_LOCK

   /* rcmd() either was never in the POSIX Standard, or was removed as of
    *        POSIX 2001. */
#  define RCMD_LOCK                              \
#    error_rcmd_not_suitable_for_multi-threaded_operation
#endif

#ifndef RCMD_AF_LOCK

   /* rcmd_af() either was never in the POSIX Standard, or was removed as of
    *           POSIX 2001. */
#  define RCMD_AF_LOCK                              \
#    error_rcmd_af_not_suitable_for_multi-threaded_operation
#endif

#ifndef READDIR_LOCK

   /* readdir() has potential races with other threads concurrently using
    *           either itself or readdir64(). */
#  define READDIR_LOCK    GENx_LOCK_
#  define READDIR_UNLOCK  GENx_UNLOCK_
#endif

#ifndef READDIR64_LOCK

   /* readdir64() either was never in the POSIX Standard, or was removed as of
    *             POSIX 2001.
    * readdir64() has potential races with other threads concurrently using
    *             either itself or readdir(). */
#  define READDIR64_LOCK    GENx_LOCK_
#  define READDIR64_UNLOCK  GENx_UNLOCK_
#endif

#ifndef READDIR64_R_LOCK

   /* readdir64_r() either was never in the POSIX Standard, or was removed as
    *               of POSIX 2001. */
#  define READDIR64_R_LOCK    NOOP
#  define READDIR64_R_UNLOCK  NOOP
#endif

#ifndef READDIR_R_LOCK

   /* readdir_r() Obsolete; use readdir() instead
    * readdir_r() Deprecated by glibc.  It is recommended to use plain
    *             readdir() instead due to various limitations, and modern
    *             implementations of readdir tend to be thread-safe if
    *             concurrent calls use different directory streams */
#  define READDIR_R_LOCK    NOOP
#  define READDIR_R_UNLOCK  NOOP
#endif

#ifndef RE_COMP_LOCK

   /* re_comp() Obsolete; use regcomp() instead
    * re_comp() either was never in the POSIX Standard, or was removed as of
    *           POSIX 2001. */
#  define RE_COMP_LOCK                              \
#    error_re_comp_not_suitable_for_multi-threaded_operation
#endif

#ifndef RE_EXEC_LOCK

   /* re_exec() Obsolete; use regexec() instead
    * re_exec() either was never in the POSIX Standard, or was removed as of
    *           POSIX 2001. */
#  define RE_EXEC_LOCK                              \
#    error_re_exec_not_suitable_for_multi-threaded_operation
#endif

#ifndef REGCOMP_LOCK
#  define REGCOMP_LOCK    LCr_LOCK_()
#  define REGCOMP_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef REGERROR_LOCK
#  define REGERROR_LOCK    ENVr_LOCK_
#  define REGERROR_UNLOCK  ENVr_UNLOCK_
#endif

#ifndef REGEXEC_LOCK
#  define REGEXEC_LOCK    LCr_LOCK_()
#  define REGEXEC_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef RES_NCLOSE_LOCK

   /* res_nclose() either was never in the POSIX Standard, or was removed as
    *              of POSIX 2001. */
#  define RES_NCLOSE_LOCK    LCr_LOCK_()
#  define RES_NCLOSE_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef RES_NINIT_LOCK

   /* res_ninit() either was never in the POSIX Standard, or was removed as of
    *             POSIX 2001. */
#  define RES_NINIT_LOCK    LCr_LOCK_()
#  define RES_NINIT_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef RES_NQUERY_LOCK

   /* res_nquery() either was never in the POSIX Standard, or was removed as
    *              of POSIX 2001. */
#  define RES_NQUERY_LOCK    LCr_LOCK_()
#  define RES_NQUERY_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef RES_NQUERYDOMAIN_LOCK

   /* res_nquerydomain() either was never in the POSIX Standard, or was
    *                    removed as of POSIX 2001. */
#  define RES_NQUERYDOMAIN_LOCK    LCr_LOCK_()
#  define RES_NQUERYDOMAIN_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef RES_NSEARCH_LOCK

   /* res_nsearch() either was never in the POSIX Standard, or was removed as
    *               of POSIX 2001. */
#  define RES_NSEARCH_LOCK    LCr_LOCK_()
#  define RES_NSEARCH_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef RES_NSEND_LOCK

   /* res_nsend() either was never in the POSIX Standard, or was removed as of
    *             POSIX 2001. */
#  define RES_NSEND_LOCK    LCr_LOCK_()
#  define RES_NSEND_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef REXEC_LOCK

   /* rexec() Obsolete; use rcmd() instead
    * rexec() either was never in the POSIX Standard, or was removed as of
    *         POSIX 2001. */
#  define REXEC_LOCK                              \
#    error_rexec_not_suitable_for_multi-threaded_operation
#endif

#ifndef REXEC_AF_LOCK

   /* rexec_af() Obsolete; use rcmd() instead
    * rexec_af() either was never in the POSIX Standard, or was removed as of
    *            POSIX 2001. */
#  define REXEC_AF_LOCK                              \
#    error_rexec_af_not_suitable_for_multi-threaded_operation
#endif

#ifndef RPMATCH_LOCK

   /* rpmatch() either was never in the POSIX Standard, or was removed as of
    *           POSIX 2001. */
#  define RPMATCH_LOCK    LCr_LOCK_()
#  define RPMATCH_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef RUSEROK_LOCK

   /* ruserok() either was never in the POSIX Standard, or was removed as of
    *           POSIX 2001. */
#  define RUSEROK_LOCK    LCr_LOCK_()
#  define RUSEROK_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef RUSEROK_AF_LOCK

   /* ruserok_af() either was never in the POSIX Standard, or was removed as
    *              of POSIX 2001. */
#  define RUSEROK_AF_LOCK    LCr_LOCK_()
#  define RUSEROK_AF_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef SCANDIR_LOCK
#  define SCANDIR_LOCK
#  define SCANDIR_UNLOCK
#endif

#ifndef SCANF_LOCK
#  define SCANF_LOCK    LCr_LOCK_()
#  define SCANF_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef SECURE_GETENV_LOCK
#  ifdef GETENV_PRESERVES_OTHER_THREAD

     /* secure_getenv() either was never in the POSIX Standard, or was removed
      *                 as of POSIX 2001. */
#    define SECURE_GETENV_LOCK    ENVr_LOCK_
#    define SECURE_GETENV_UNLOCK  ENVr_UNLOCK_
#  else

     /* secure_getenv() either was never in the POSIX Standard, or was removed
      *                 as of POSIX 2001. */
#    define SECURE_GETENV_LOCK    ENVx_LOCK_
#    define SECURE_GETENV_UNLOCK  ENVx_UNLOCK_
#  endif
#endif

#ifndef SEED48_LOCK

   /* seed48() has potential races with other threads concurrently using any
    *          of: itself, drand48(), erand48(), jrand48(), lcong48(),
    *          lrand48(), mrand48(), nrand48(), or srand48(). */
#  define SEED48_LOCK    GENx_LOCK_
#  define SEED48_UNLOCK  GENx_UNLOCK_
#endif

#ifndef SEED48_R_LOCK

   /* seed48_r() either was never in the POSIX Standard, or was removed as of
    *            POSIX 2001.
    * seed48_r() has potential races with other threads concurrently using any
    *            of: itself, drand48_r(), erand48_r(), jrand48_r(),
    *            lcong48_r(), lrand48_r(), mrand48_r(), nrand48_r(), or
    *            srand48_r(). */
#  define SEED48_R_LOCK    GENx_LOCK_
#  define SEED48_R_UNLOCK  GENx_UNLOCK_
#endif

#ifndef SETALIASENT_LOCK

   /* setaliasent() either was never in the POSIX Standard, or was removed as
    *               of POSIX 2001. */
#  define SETALIASENT_LOCK    LCr_LOCK_()
#  define SETALIASENT_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef SETCONTEXT_LOCK

   /* setcontext() has potential races with other threads concurrently using
    *              any of: itself, getcontext(), makecontext(), or
    *              swapcontext(). */
#  define SETCONTEXT_LOCK    GENx_LOCK_
#  define SETCONTEXT_UNLOCK  GENx_UNLOCK_
#endif

#ifndef SETENV_LOCK
#  define SETENV_LOCK    ENVx_LOCK_
#  define SETENV_UNLOCK  ENVx_UNLOCK_
#endif

#ifndef SETFSENT_LOCK

   /* setfsent() either was never in the POSIX Standard, or was removed as of
    *            POSIX 2001.
    * setfsent() has potential races with other threads concurrently using any
    *            of: itself, endfsent(), getfsent(), getfsfile(), or
    *            getfsspec(). */
#  define SETFSENT_LOCK    LCx_LOCK_()
#  define SETFSENT_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef SETGRENT_LOCK

   /* setgrent() has potential races with other threads concurrently using any
    *            of: itself, endgrent(), endgrent_r(), getgrent(),
    *            getgrent_r(), or setgrent_r(). */
#  define SETGRENT_LOCK    LCx_LOCK_()
#  define SETGRENT_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef SETGRENT_R_LOCK

   /* setgrent_r() Obsolete; use setgrent() instead
    * setgrent_r() either was never in the POSIX Standard, or was removed as
    *              of POSIX 2001.
    * setgrent_r() has potential races with other threads concurrently using
    *              any of: itself, endgrent(), endgrent_r(), getgrent(),
    *              getgrent_r(), or setgrent(). */
#  define SETGRENT_R_LOCK    LCx_LOCK_()
#  define SETGRENT_R_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef SETHOSTENT_LOCK

   /* sethostent() has potential races with other threads concurrently using
    *              any of: itself, endhostent(), endhostent_r(), gethostent(),
    *              gethostent_r(), or sethostent_r(). */
#  define SETHOSTENT_LOCK    GENx_ENVr_LCr_LOCK_()
#  define SETHOSTENT_UNLOCK  GENx_ENVr_LCr_UNLOCK_()
#endif

#ifndef SETHOSTENT_R_LOCK

   /* sethostent_r() Obsolete; use sethostent() instead
    * sethostent_r() either was never in the POSIX Standard, or was removed as
    *                of POSIX 2001.
    * sethostent_r() has potential races with other threads concurrently using
    *                any of: itself, endhostent(), endhostent_r(),
    *                gethostent(), gethostent_r(), or sethostent(). */
#  define SETHOSTENT_R_LOCK    GENx_ENVr_LCr_LOCK_()
#  define SETHOSTENT_R_UNLOCK  GENx_ENVr_LCr_UNLOCK_()
#endif

#ifndef SETHOSTID_LOCK
#  define SETHOSTID_LOCK    GENx_LOCK_
#  define SETHOSTID_UNLOCK  GENx_UNLOCK_
#endif

#ifndef SETKEY_LOCK

   /* setkey() has potential races with other threads concurrently using any
    *          of: itself, crypt(), or encrypt(). */
#  define SETKEY_LOCK    GENx_LOCK_
#  define SETKEY_UNLOCK  GENx_UNLOCK_
#endif

#ifndef SETLOCALE_LOCK
#  ifndef WIN32

     /* setlocale() Use Perl_setlocale() instead */
#    define SETLOCALE_LOCK    GENx_ENVr_LCx_LOCK_()
#    define SETLOCALE_UNLOCK  GENx_ENVr_LCx_UNLOCK_()
#  else
#    define SETLOCALE_LOCK    NOOP
#    define SETLOCALE_UNLOCK  NOOP
#  endif
#endif

#ifndef SETLOCALE_R_LOCK
#  ifndef WIN32

     /* setlocale_r() Obsolete; use Perl_setlocale() instead
      * setlocale_r() Use Perl_setlocale() instead
      * setlocale_r() either was never in the POSIX Standard, or was removed
      *               as of POSIX 2001. */
#    define SETLOCALE_R_LOCK    ENVr_LCx_LOCK_()
#    define SETLOCALE_R_UNLOCK  ENVr_LCx_UNLOCK_()
#  else
#    define SETLOCALE_R_LOCK    NOOP
#    define SETLOCALE_R_UNLOCK  NOOP
#  endif
#endif

#ifndef SETLOGMASK_LOCK
#  define SETLOGMASK_LOCK    GENx_LOCK_
#  define SETLOGMASK_UNLOCK  GENx_UNLOCK_
#endif

#ifndef SETNETENT_LOCK

   /* setnetent() has potential races with other threads concurrently using
    *             any of: itself, endnetent(), endnetent_r(), getnetent(), or
    *             setnetent_r(). */
#  define SETNETENT_LOCK    GENx_ENVr_LCr_LOCK_()
#  define SETNETENT_UNLOCK  GENx_ENVr_LCr_UNLOCK_()
#endif

#ifndef SETNETENT_R_LOCK

   /* setnetent_r() Obsolete; use setnetent() instead
    * setnetent_r() either was never in the POSIX Standard, or was removed as
    *               of POSIX 2001.
    * setnetent_r() has potential races with other threads concurrently using
    *               any of: itself, endnetent(), endnetent_r(), getnetent(),
    *               or setnetent(). */
#  define SETNETENT_R_LOCK    GENx_ENVr_LCr_LOCK_()
#  define SETNETENT_R_UNLOCK  GENx_ENVr_LCr_UNLOCK_()
#endif

#ifndef SETNETGRENT_LOCK

   /* setnetgrent() either was never in the POSIX Standard, or was removed as
    *               of POSIX 2001.
    * setnetgrent() has potential races with other threads concurrently using
    *               any of: itself, endnetgrent(), getnetgrent(),
    *               getnetgrent_r(), or innetgr(). */
#  define SETNETGRENT_LOCK    LCx_LOCK_()
#  define SETNETGRENT_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef SETPROTOENT_LOCK

   /* setprotoent() has potential races with other threads concurrently using
    *               any of: itself, endprotoent(), endprotoent_r(),
    *               getprotoent(), or setprotoent_r(). */
#  define SETPROTOENT_LOCK    LCx_LOCK_()
#  define SETPROTOENT_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef SETPROTOENT_R_LOCK

   /* setprotoent_r() Obsolete; use setprotoent() instead
    * setprotoent_r() either was never in the POSIX Standard, or was removed
    *                 as of POSIX 2001.
    * setprotoent_r() has potential races with other threads concurrently
    *                 using any of: itself, endprotoent(), endprotoent_r(),
    *                 getprotoent(), or setprotoent(). */
#  define SETPROTOENT_R_LOCK    LCx_LOCK_()
#  define SETPROTOENT_R_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef SETPWENT_LOCK

   /* setpwent() has potential races with other threads concurrently using any
    *            of: itself, endpwent(), endpwent_r(), getpwent(),
    *            getpwent_r(), or setpwent_r(). */
#  define SETPWENT_LOCK    LCx_LOCK_()
#  define SETPWENT_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef SETPWENT_R_LOCK

   /* setpwent_r() Obsolete; use setpwent() instead
    * setpwent_r() either was never in the POSIX Standard, or was removed as
    *              of POSIX 2001.
    * setpwent_r() has potential races with other threads concurrently using
    *              any of: itself, endpwent(), endpwent_r(), getpwent(),
    *              getpwent_r(), or setpwent(). */
#  define SETPWENT_R_LOCK    LCx_LOCK_()
#  define SETPWENT_R_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef SETRPCENT_LOCK

   /* setrpcent() either was never in the POSIX Standard, or was removed as of
    *             POSIX 2001. */
#  define SETRPCENT_LOCK    LCr_LOCK_()
#  define SETRPCENT_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef SETSERVENT_LOCK

   /* setservent() has potential races with other threads concurrently using
    *              any of: itself, endservent(), endservent_r(), getservent(),
    *              or setservent_r(). */
#  define SETSERVENT_LOCK    LCx_LOCK_()
#  define SETSERVENT_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef SETSERVENT_R_LOCK

   /* setservent_r() Obsolete; use setservent() instead
    * setservent_r() either was never in the POSIX Standard, or was removed as
    *                of POSIX 2001.
    * setservent_r() has potential races with other threads concurrently using
    *                any of: itself, endservent(), endservent_r(),
    *                getservent(), or setservent(). */
#  define SETSERVENT_R_LOCK    LCx_LOCK_()
#  define SETSERVENT_R_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef SETSPENT_LOCK

   /* setspent() either was never in the POSIX Standard, or was removed as of
    *            POSIX 2001.
    * setspent() has potential races with other threads concurrently using any
    *            of: itself, endspent(), getspent(), or getspent_r(). */
#  define SETSPENT_LOCK    LCx_LOCK_()
#  define SETSPENT_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef SETSTATE_R_LOCK

   /* setstate_r() either was never in the POSIX Standard, or was removed as
    *              of POSIX 2001.
    * setstate_r() has potential races with other threads concurrently using
    *              any of: itself, initstate_r(), random_r(), or srandom_r().
    */
#  define SETSTATE_R_LOCK    GENx_LOCK_
#  define SETSTATE_R_UNLOCK  GENx_UNLOCK_
#endif

#ifndef SETTTYENT_LOCK

   /* setttyent() either was never in the POSIX Standard, or was removed as of
    *             POSIX 2001.
    * setttyent() has potential races with other threads concurrently using
    *             any of: itself, endttyent(), getttyent(), or getttynam(). */
#  define SETTTYENT_LOCK    GENx_LOCK_
#  define SETTTYENT_UNLOCK  GENx_UNLOCK_
#endif

#ifndef SETUSERSHELL_LOCK

   /* setusershell() either was never in the POSIX Standard, or was removed as
    *                of POSIX 2001. */
#  define SETUSERSHELL_LOCK                              \
#    error_setusershell_not_suitable_for_multi-threaded_operation
#endif

#ifndef SETUTENT_LOCK

   /* setutent() Obsolete; use setutxent() instead
    * setutent() either was never in the POSIX Standard, or was removed as of
    *            POSIX 2001.
    * setutent() has potential races with other threads concurrently using any
    *            of: itself, endutent(), endutxent(), getlogin(),
    *            getlogin_r(), getutent(), getutid(), getutline(),
    *            getutxent(), getutxid(), getutxline(), glob(), login(),
    *            logout(), pututline(), pututxline(), setutxent(), utmpname(),
    *            or wordexp(). */
#  define SETUTENT_LOCK    GENx_LOCK_
#  define SETUTENT_UNLOCK  GENx_UNLOCK_
#endif

#ifndef SETUTXENT_LOCK

   /* setutxent() has potential races with other threads concurrently using
    *             any of: itself, endutent(), endutxent(), getlogin(),
    *             getlogin_r(), getutent(), getutid(), getutline(),
    *             getutxent(), getutxid(), getutxline(), glob(), login(),
    *             logout(), pututline(), pututxline(), setutent(), utmpname(),
    *             or wordexp(). */
#  define SETUTXENT_LOCK    GENx_LOCK_
#  define SETUTXENT_UNLOCK  GENx_UNLOCK_
#endif

#ifndef SGETSPENT_LOCK

   /* sgetspent() either was never in the POSIX Standard, or was removed as of
    *             POSIX 2001. */
#  define SGETSPENT_LOCK    GENx_LOCK_
#  define SGETSPENT_UNLOCK  GENx_UNLOCK_
#endif

#ifndef SGETSPENT_R_LOCK

   /* sgetspent_r() either was never in the POSIX Standard, or was removed as
    *               of POSIX 2001. */
#  define SGETSPENT_R_LOCK    LCr_LOCK_()
#  define SGETSPENT_R_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef SHM_OPEN_LOCK
#  define SHM_OPEN_LOCK    LCr_LOCK_()
#  define SHM_OPEN_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef SHM_UNLINK_LOCK
#  define SHM_UNLINK_LOCK    LCr_LOCK_()
#  define SHM_UNLINK_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef SIGINTERRUPT_LOCK

   /* siginterrupt() Obsolete; Use sigaction(2) with the SA_RESTART flag
    *                instead */
#  define SIGINTERRUPT_LOCK    GENx_LOCK_
#  define SIGINTERRUPT_UNLOCK  GENx_UNLOCK_
#endif

#ifndef SLEEP_LOCK

   /* sleep() is vulnerable to signal SIGCHLD/linux */
#  define SLEEP_LOCK    NOOP
#  define SLEEP_UNLOCK  NOOP
#endif

#ifndef SNPRINTF_LOCK
#  define SNPRINTF_LOCK    LCr_LOCK_()
#  define SNPRINTF_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef SPRINTF_LOCK
#  define SPRINTF_LOCK    LCr_LOCK_()
#  define SPRINTF_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef SRAND48_LOCK

   /* srand48() has potential races with other threads concurrently using any
    *           of: itself, drand48(), erand48(), jrand48(), lcong48(),
    *           lrand48(), mrand48(), nrand48(), or seed48(). */
#  define SRAND48_LOCK    GENx_LOCK_
#  define SRAND48_UNLOCK  GENx_UNLOCK_
#endif

#ifndef SRAND48_R_LOCK

   /* srand48_r() either was never in the POSIX Standard, or was removed as of
    *             POSIX 2001.
    * srand48_r() has potential races with other threads concurrently using
    *             any of: itself, drand48_r(), erand48_r(), jrand48_r(),
    *             lcong48_r(), lrand48_r(), mrand48_r(), nrand48_r(), or
    *             seed48_r(). */
#  define SRAND48_R_LOCK    GENx_LOCK_
#  define SRAND48_R_UNLOCK  GENx_UNLOCK_
#endif

#ifndef SRANDOM_R_LOCK

   /* srandom_r() either was never in the POSIX Standard, or was removed as of
    *             POSIX 2001.
    * srandom_r() has potential races with other threads concurrently using
    *             any of: itself, initstate_r(), random_r(), or setstate_r().
    */
#  define SRANDOM_R_LOCK    GENx_LOCK_
#  define SRANDOM_R_UNLOCK  GENx_UNLOCK_
#endif

#ifndef SSCANF_LOCK
#  define SSCANF_LOCK    LCr_LOCK_()
#  define SSCANF_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef SSIGNAL_LOCK

   /* ssignal() Obsolete
    * ssignal() either was never in the POSIX Standard, or was removed as of
    *           POSIX 2001. */
#  define SSIGNAL_LOCK    GENr_LOCK_
#  define SSIGNAL_UNLOCK  GENr_UNLOCK_
#endif

#ifndef STRCASECMP_LOCK

   /* strcasecmp() The POSIX Standard says results are undefined unless
    *              LC_CTYPE is the POSIX locale */
#  define STRCASECMP_LOCK    LCr_LOCK_()
#  define STRCASECMP_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef STRCASESTR_LOCK

   /* strcasestr() either was never in the POSIX Standard, or was removed as
    *              of POSIX 2001. */
#  define STRCASESTR_LOCK    LCr_LOCK_()
#  define STRCASESTR_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef STRCOLL_LOCK
#  define STRCOLL_LOCK    LCr_LOCK_()
#  define STRCOLL_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef STRERROR_LOCK
#  define STRERROR_LOCK    LCx_LOCK_()
#  define STRERROR_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef STRERROR_L_LOCK
#  define STRERROR_L_LOCK
#  define STRERROR_L_UNLOCK
#endif

#ifndef STRERROR_R_LOCK
#  define STRERROR_R_LOCK
#  define STRERROR_R_UNLOCK
#endif

#ifndef STRFMON_LOCK
#  define STRFMON_LOCK    LCr_LOCK_()
#  define STRFMON_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef STRFMON_L_LOCK
#  define STRFMON_L_LOCK
#  define STRFMON_L_UNLOCK
#endif

#ifndef STRFROMD_LOCK

   /* strfromd() Asynchronous unsafe */
#  define STRFROMD_LOCK    LCr_LOCK_()
#  define STRFROMD_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef STRFROMF_LOCK

   /* strfromf() Asynchronous unsafe */
#  define STRFROMF_LOCK    LCr_LOCK_()
#  define STRFROMF_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef STRFROML_LOCK

   /* strfroml() Asynchronous unsafe */
#  define STRFROML_LOCK    LCr_LOCK_()
#  define STRFROML_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef STRFTIME_LOCK

   /* strftime() Use Perl_sv_strftime_tm() or Perl_sv_strftime_ints() instead
    * strftime() has potential races with other threads concurrently using any
    *            of: itself, ctime(), ctime_r(), daylight, localtime(),
    *            localtime_r(), mktime(), timezone, tzname, or tzset(). */
#  define STRFTIME_LOCK    GENx_ENVr_LCr_LOCK_()
#  define STRFTIME_UNLOCK  GENx_ENVr_LCr_UNLOCK_()
#endif

#ifndef STRFTIME_L_LOCK
#  define STRFTIME_L_LOCK
#  define STRFTIME_L_UNLOCK
#endif

#ifndef STRNCASECMP_LOCK

   /* strncasecmp() The POSIX Standard says results are undefined unless
    *               LC_CTYPE is the POSIX locale */
#  define STRNCASECMP_LOCK    LCr_LOCK_()
#  define STRNCASECMP_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef STRPTIME_LOCK
#  define STRPTIME_LOCK    ENVr_LCr_LOCK_()
#  define STRPTIME_UNLOCK  ENVr_LCr_UNLOCK_()
#endif

#ifndef STRSIGNAL_LOCK
#  define STRSIGNAL_LOCK    LCx_LOCK_()
#  define STRSIGNAL_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef STRTOD_LOCK
#  define STRTOD_LOCK    LCr_LOCK_()
#  define STRTOD_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef STRTOF_LOCK
#  define STRTOF_LOCK    LCr_LOCK_()
#  define STRTOF_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef STRTOIMAX_LOCK
#  define STRTOIMAX_LOCK    LCr_LOCK_()
#  define STRTOIMAX_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef STRTOK_LOCK

   /* strtok() Use strtok_r() instead */
#  define STRTOK_LOCK    GENx_LOCK_
#  define STRTOK_UNLOCK  GENx_UNLOCK_
#endif

#ifndef STRTOL_LOCK
#  define STRTOL_LOCK    LCr_LOCK_()
#  define STRTOL_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef STRTOLD_LOCK
#  define STRTOLD_LOCK    LCr_LOCK_()
#  define STRTOLD_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef STRTOLL_LOCK
#  define STRTOLL_LOCK    LCr_LOCK_()
#  define STRTOLL_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef STRTOQ_LOCK

   /* strtoq() either was never in the POSIX Standard, or was removed as of
    *          POSIX 2001. */
#  define STRTOQ_LOCK    LCr_LOCK_()
#  define STRTOQ_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef STRTOUL_LOCK
#  define STRTOUL_LOCK    LCr_LOCK_()
#  define STRTOUL_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef STRTOULL_LOCK
#  define STRTOULL_LOCK    LCr_LOCK_()
#  define STRTOULL_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef STRTOUMAX_LOCK
#  define STRTOUMAX_LOCK    LCr_LOCK_()
#  define STRTOUMAX_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef STRTOUQ_LOCK

   /* strtouq() either was never in the POSIX Standard, or was removed as of
    *           POSIX 2001. */
#  define STRTOUQ_LOCK    LCr_LOCK_()
#  define STRTOUQ_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef STRVERSCMP_LOCK

   /* strverscmp() either was never in the POSIX Standard, or was removed as
    *              of POSIX 2001. */
#  define STRVERSCMP_LOCK
#  define STRVERSCMP_UNLOCK
#endif

#ifndef STRXFRM_LOCK
#  define STRXFRM_LOCK    LCr_LOCK_()
#  define STRXFRM_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef SWAPCONTEXT_LOCK

   /* swapcontext() has potential races with other threads concurrently using
    *               any of: itself, getcontext(), makecontext(), or
    *               setcontext(). */
#  define SWAPCONTEXT_LOCK    GENx_LOCK_
#  define SWAPCONTEXT_UNLOCK  GENx_UNLOCK_
#endif

#ifndef SWPRINTF_LOCK
#  define SWPRINTF_LOCK    LCr_LOCK_()
#  define SWPRINTF_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef SWSCANF_LOCK
#  define SWSCANF_LOCK    LCr_LOCK_()
#  define SWSCANF_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef SYSCONF_LOCK
#  define SYSCONF_LOCK    ENVr_LOCK_
#  define SYSCONF_UNLOCK  ENVr_UNLOCK_
#endif

#ifndef SYSLOG_LOCK
#  define SYSLOG_LOCK    ENVr_LCr_LOCK_()
#  define SYSLOG_UNLOCK  ENVr_LCr_UNLOCK_()
#endif

#ifndef SYSTEM_LOCK
#  ifndef __GLIBC__

     /* system() Some implementations are not-thread safe; See POSIX Standard
      */
#    define SYSTEM_LOCK    NOOP
#    define SYSTEM_UNLOCK  NOOP
#  else
#    define SYSTEM_LOCK    NOOP
#    define SYSTEM_UNLOCK  NOOP
#  endif
#endif

#ifndef TDELETE_LOCK

   /* tdelete() has potential races with other threads concurrently using any
    *           of: itself, tfind(), or tsearch(). */
#  define TDELETE_LOCK    GENx_LOCK_
#  define TDELETE_UNLOCK  GENx_UNLOCK_
#endif

#ifndef TEMPNAM_LOCK

   /* tempnam() Obsolete; use mkstemp() or tmpfile() instead */
#  define TEMPNAM_LOCK    ENVr_LOCK_
#  define TEMPNAM_UNLOCK  ENVr_UNLOCK_
#endif

#ifndef TFIND_LOCK

   /* tfind() has potential races with other threads concurrently using any
    *         of: itself, tdelete(), or tsearch(). */
#  define TFIND_LOCK    GENx_LOCK_
#  define TFIND_UNLOCK  GENx_UNLOCK_
#endif

#ifndef TIMEGM_LOCK

   /* timegm() either was never in the POSIX Standard, or was removed as of
    *          POSIX 2001. */
#  define TIMEGM_LOCK    ENVr_LCr_LOCK_()
#  define TIMEGM_UNLOCK  ENVr_LCr_UNLOCK_()
#endif

#ifndef TIMELOCAL_LOCK

   /* timelocal() either was never in the POSIX Standard, or was removed as of
    *             POSIX 2001. */
#  define TIMELOCAL_LOCK    ENVr_LCr_LOCK_()
#  define TIMELOCAL_UNLOCK  ENVr_LCr_UNLOCK_()
#endif

#ifndef TIMEZONE_LOCK

   /* timezone has potential races with other threads concurrently using any
    *          of: itself, ctime(), ctime_r(), daylight, localtime(),
    *          localtime_r(), mktime(), strftime(), tzname, or tzset().
    * timezone locking macros are only valid if its value is used read-only */
#  define TIMEZONE_LOCK    GENx_LCr_LOCK_()
#  define TIMEZONE_UNLOCK  GENx_LCr_UNLOCK_()
#endif

#ifndef TMPNAM_LOCK

   /* tmpnam() Obsolete; use mkstemp() or tmpfile() instead
    * tmpnam() locking macros are only valid if '!s' */
#  define TMPNAM_LOCK    NOOP
#  define TMPNAM_UNLOCK  NOOP
#endif

#ifndef TMPNAM_R_LOCK

   /* tmpnam_r() Use mkstemp() or tmpfile() instead
    * tmpnam_r() either was never in the POSIX Standard, or was removed as of
    *            POSIX 2001. */
#  define TMPNAM_R_LOCK    NOOP
#  define TMPNAM_R_UNLOCK  NOOP
#endif

#ifndef TOLOWER_LOCK

   /* tolower() Use a Perl toLOWER-family macro instead */
#  define TOLOWER_LOCK
#  define TOLOWER_UNLOCK
#endif

#ifndef TOLOWER_L_LOCK

   /* tolower_l() Use a Perl toLOWER-family macro instead */
#  define TOLOWER_L_LOCK
#  define TOLOWER_L_UNLOCK
#endif

#ifndef TOUPPER_LOCK

   /* toupper() Use a Perl toUPPER-family macro instead */
#  define TOUPPER_LOCK
#  define TOUPPER_UNLOCK
#endif

#ifndef TOUPPER_L_LOCK

   /* toupper_l() Use a Perl toUPPER-family macro instead */
#  define TOUPPER_L_LOCK
#  define TOUPPER_L_UNLOCK
#endif

#ifndef TOWCTRANS_LOCK
#  define TOWCTRANS_LOCK
#  define TOWCTRANS_UNLOCK
#endif

#ifndef TOWLOWER_LOCK

   /* towlower() Use a Perl toLOWER-family macro instead */
#  define TOWLOWER_LOCK
#  define TOWLOWER_UNLOCK
#endif

#ifndef TOWLOWER_L_LOCK

   /* towlower_l() Use a Perl toLOWER-family macro instead */
#  define TOWLOWER_L_LOCK
#  define TOWLOWER_L_UNLOCK
#endif

#ifndef TOWUPPER_LOCK

   /* towupper() Use a Perl toUPPER-family macro instead */
#  define TOWUPPER_LOCK
#  define TOWUPPER_UNLOCK
#endif

#ifndef TOWUPPER_L_LOCK

   /* towupper_l() Use a Perl toUPPER-family macro instead */
#  define TOWUPPER_L_LOCK
#  define TOWUPPER_L_UNLOCK
#endif

#ifndef TSEARCH_LOCK

   /* tsearch() has potential races with other threads concurrently using any
    *           of: itself, tdelete(), or tfind(). */
#  define TSEARCH_LOCK    GENx_LOCK_
#  define TSEARCH_UNLOCK  GENx_UNLOCK_
#endif

#ifndef TTYNAME_LOCK

   /* ttyname() Use ttyname_r() instead
    * ttyname() has potential races with other threads concurrently using
    *           either itself or login_tty(). */
#  define TTYNAME_LOCK    GENx_LOCK_
#  define TTYNAME_UNLOCK  GENx_UNLOCK_
#endif

#ifndef TTYNAME_R_LOCK
#  define TTYNAME_R_LOCK    NOOP
#  define TTYNAME_R_UNLOCK  NOOP
#endif

#ifndef TTYSLOT_LOCK

   /* ttyslot() either was never in the POSIX Standard, or was removed as of
    *           POSIX 2001. */
#  define TTYSLOT_LOCK                              \
#    error_ttyslot_not_suitable_for_multi-threaded_operation
#endif

#ifndef TWALK_LOCK

   /* twalk() has potential races with other threads concurrently using either
    *         itself or twalk_r(). */
#  define TWALK_LOCK    GENx_LOCK_
#  define TWALK_UNLOCK  GENx_UNLOCK_
#endif

#ifndef TWALK_R_LOCK

   /* twalk_r() either was never in the POSIX Standard, or was removed as of
    *           POSIX 2001.
    * twalk_r() has potential races with other threads concurrently using
    *           either itself or twalk(). */
#  define TWALK_R_LOCK    GENx_LOCK_
#  define TWALK_R_UNLOCK  GENx_UNLOCK_
#endif

#ifndef TZNAME_LOCK

   /* tzname has potential races with other threads concurrently using any of:
    *        itself, ctime(), ctime_r(), daylight, localtime(), localtime_r(),
    *        mktime(), strftime(), timezone, or tzset().
    * tzname locking macros are only valid if its value is used read-only */
#  define TZNAME_LOCK    GENx_LCr_LOCK_()
#  define TZNAME_UNLOCK  GENx_LCr_UNLOCK_()
#endif

#ifndef TZSET_LOCK

   /* tzset() has potential races with other threads concurrently using any
    *         of: itself, ctime(), ctime_r(), daylight, localtime(),
    *         localtime_r(), mktime(), strftime(), timezone, or tzname. */
#  define TZSET_LOCK    GENx_ENVr_LCr_LOCK_()
#  define TZSET_UNLOCK  GENx_ENVr_LCr_UNLOCK_()
#endif

#ifndef UNGETWC_LOCK
#  define UNGETWC_LOCK
#  define UNGETWC_UNLOCK
#endif

#ifndef UNSETENV_LOCK
#  define UNSETENV_LOCK    ENVx_LOCK_
#  define UNSETENV_UNLOCK  ENVx_UNLOCK_
#endif

#ifndef UPDWTMP_LOCK

   /* updwtmp() either was never in the POSIX Standard, or was removed as of
    *           POSIX 2001.
    * updwtmp() is vulnerable to signal ALRM */
#  define UPDWTMP_LOCK    NOOP
#  define UPDWTMP_UNLOCK  NOOP
#endif

#ifndef UTMPNAME_LOCK

   /* utmpname() either was never in the POSIX Standard, or was removed as of
    *            POSIX 2001.
    * utmpname() has potential races with other threads concurrently using any
    *            of: itself, endutent(), endutxent(), getlogin(),
    *            getlogin_r(), getutent(), getutid(), getutline(),
    *            getutxent(), getutxid(), getutxline(), glob(), login(),
    *            logout(), pututline(), pututxline(), setutent(), setutxent(),
    *            or wordexp(). */
#  define UTMPNAME_LOCK    GENx_LOCK_
#  define UTMPNAME_UNLOCK  GENx_UNLOCK_
#endif

#ifndef VA_ARG_LOCK

   /* va_arg() locking macros are only valid if 'arg-ap-is-local-to-its-thread'
    */
#  define VA_ARG_LOCK    NOOP
#  define VA_ARG_UNLOCK  NOOP
#endif

#ifndef VALLOC_LOCK

   /* valloc() either was never in the POSIX Standard, or was removed as of
    *          POSIX 2001.
    * valloc() must be called at least once in single-threaded mode to enable
    *          thread-safety in subsequent calls when in multi-threaded mode.
    */
#  define VALLOC_LOCK    NOOP
#  define VALLOC_UNLOCK  NOOP
#endif

#ifndef VASPRINTF_LOCK

   /* vasprintf() either was never in the POSIX Standard, or was removed as of
    *             POSIX 2001. */
#  define VASPRINTF_LOCK    LCr_LOCK_()
#  define VASPRINTF_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef VDPRINTF_LOCK
#  define VDPRINTF_LOCK    LCr_LOCK_()
#  define VDPRINTF_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef VERR_LOCK

   /* verr() either was never in the POSIX Standard, or was removed as of
    *        POSIX 2001. */
#  define VERR_LOCK    LCr_LOCK_()
#  define VERR_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef VERRX_LOCK

   /* verrx() either was never in the POSIX Standard, or was removed as of
    *         POSIX 2001. */
#  define VERRX_LOCK    LCr_LOCK_()
#  define VERRX_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef VERSIONSORT_LOCK

   /* versionsort() either was never in the POSIX Standard, or was removed as
    *               of POSIX 2001. */
#  define VERSIONSORT_LOCK    LCr_LOCK_()
#  define VERSIONSORT_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef VFPRINTF_LOCK
#  define VFPRINTF_LOCK    LCr_LOCK_()
#  define VFPRINTF_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef VFSCANF_LOCK
#  define VFSCANF_LOCK    LCr_LOCK_()
#  define VFSCANF_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef VFWPRINTF_LOCK
#  define VFWPRINTF_LOCK    LCr_LOCK_()
#  define VFWPRINTF_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef VPRINTF_LOCK
#  define VPRINTF_LOCK    LCr_LOCK_()
#  define VPRINTF_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef VSCANF_LOCK
#  define VSCANF_LOCK    LCr_LOCK_()
#  define VSCANF_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef VSNPRINTF_LOCK
#  define VSNPRINTF_LOCK    LCr_LOCK_()
#  define VSNPRINTF_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef VSPRINTF_LOCK
#  define VSPRINTF_LOCK    LCr_LOCK_()
#  define VSPRINTF_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef VSSCANF_LOCK
#  define VSSCANF_LOCK    LCr_LOCK_()
#  define VSSCANF_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef VSWPRINTF_LOCK
#  define VSWPRINTF_LOCK    LCr_LOCK_()
#  define VSWPRINTF_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef VSYSLOG_LOCK

   /* vsyslog() either was never in the POSIX Standard, or was removed as of
    *           POSIX 2001. */
#  define VSYSLOG_LOCK    ENVr_LCr_LOCK_()
#  define VSYSLOG_UNLOCK  ENVr_LCr_UNLOCK_()
#endif

#ifndef VWARN_LOCK

   /* vwarn() either was never in the POSIX Standard, or was removed as of
    *         POSIX 2001. */
#  define VWARN_LOCK    LCr_LOCK_()
#  define VWARN_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef VWARNX_LOCK

   /* vwarnx() either was never in the POSIX Standard, or was removed as of
    *          POSIX 2001. */
#  define VWARNX_LOCK    LCr_LOCK_()
#  define VWARNX_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef VWPRINTF_LOCK
#  define VWPRINTF_LOCK    LCr_LOCK_()
#  define VWPRINTF_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef WARN_LOCK

   /* warn() either was never in the POSIX Standard, or was removed as of
    *        POSIX 2001. */
#  define WARN_LOCK    LCr_LOCK_()
#  define WARN_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef WARNX_LOCK

   /* warnx() either was never in the POSIX Standard, or was removed as of
    *         POSIX 2001. */
#  define WARNX_LOCK    LCr_LOCK_()
#  define WARNX_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef WCRTOMB_LOCK

   /* wcrtomb() locking macros are only valid if '!ps' */
#  define WCRTOMB_LOCK
#  define WCRTOMB_UNLOCK
#endif

#ifndef WCSCASECMP_LOCK
#  define WCSCASECMP_LOCK    LCr_LOCK_()
#  define WCSCASECMP_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef WCSCHR_LOCK
#  define WCSCHR_LOCK
#  define WCSCHR_UNLOCK
#endif

#ifndef WCSCOLL_LOCK
#  define WCSCOLL_LOCK    LCr_LOCK_()
#  define WCSCOLL_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef WCSFTIME_LOCK
#  define WCSFTIME_LOCK
#  define WCSFTIME_UNLOCK
#endif

#ifndef WCSNCASECMP_LOCK
#  define WCSNCASECMP_LOCK    LCr_LOCK_()
#  define WCSNCASECMP_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef WCSNRTOMBS_LOCK

   /* wcsnrtombs() locking macros are only valid if '!ps' */
#  define WCSNRTOMBS_LOCK
#  define WCSNRTOMBS_UNLOCK
#endif

#ifndef WCSRCHR_LOCK
#  define WCSRCHR_LOCK
#  define WCSRCHR_UNLOCK
#endif

#ifndef WCSRTOMBS_LOCK

   /* wcsrtombs() locking macros are only valid if '!ps' */
#  define WCSRTOMBS_LOCK
#  define WCSRTOMBS_UNLOCK
#endif

#ifndef WCSTOD_LOCK
#  define WCSTOD_LOCK    LCr_LOCK_()
#  define WCSTOD_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef WCSTOF_LOCK
#  define WCSTOF_LOCK    LCr_LOCK_()
#  define WCSTOF_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef WCSTOIMAX_LOCK
#  define WCSTOIMAX_LOCK    LCr_LOCK_()
#  define WCSTOIMAX_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef WCSTOLD_LOCK
#  define WCSTOLD_LOCK    LCr_LOCK_()
#  define WCSTOLD_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef WCSTOMBS_LOCK
#  define WCSTOMBS_LOCK
#  define WCSTOMBS_UNLOCK
#endif

#ifndef WCSTOUMAX_LOCK
#  define WCSTOUMAX_LOCK    LCr_LOCK_()
#  define WCSTOUMAX_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef WCSWIDTH_LOCK
#  define WCSWIDTH_LOCK    LCr_LOCK_()
#  define WCSWIDTH_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef WCSXFRM_LOCK
#  define WCSXFRM_LOCK    LCr_LOCK_()
#  define WCSXFRM_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef WCTOB_LOCK

   /* wctob() Use wctomb() or wcrtomb() instead */
#  define WCTOB_LOCK
#  define WCTOB_UNLOCK
#endif

#ifndef WCTOMB_LOCK

   /* wctomb() Use wcrtomb() instead */
#  define WCTOMB_LOCK    LCx_LOCK_()
#  define WCTOMB_UNLOCK  LCx_UNLOCK_()
#endif

#ifndef WCTRANS_LOCK
#  define WCTRANS_LOCK    LCr_LOCK_()
#  define WCTRANS_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef WCTYPE_LOCK
#  define WCTYPE_LOCK    LCr_LOCK_()
#  define WCTYPE_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef WCWIDTH_LOCK
#  define WCWIDTH_LOCK    LCr_LOCK_()
#  define WCWIDTH_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef WORDEXP_LOCK

   /* wordexp() is vulnerable to signal ALRM
    * wordexp() has potential races with other threads concurrently using any
    *           of: itself, endutent(), endutxent(), getlogin(), getlogin_r(),
    *           getutent(), getutid(), getutline(), getutxent(), getutxid(),
    *           getutxline(), glob(), login(), logout(), pututline(),
    *           pututxline(), setutent(), setutxent(), or utmpname(). */
#  define WORDEXP_LOCK    GENx_ENVx_LCr_LOCK_()
#  define WORDEXP_UNLOCK  GENx_ENVx_LCr_UNLOCK_()
#endif

#ifndef WPRINTF_LOCK
#  define WPRINTF_LOCK    LCr_LOCK_()
#  define WPRINTF_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef WSCANF_LOCK
#  define WSCANF_LOCK    LCr_LOCK_()
#  define WSCANF_UNLOCK  LCr_UNLOCK_()
#endif

#ifndef WSETLOCALE_LOCK
#  ifdef WIN32

     /* wsetlocale() Use Perl_setlocale() instead
      * wsetlocale() Actually "_wsetlocale()", and its macro name would be
      *              _WSETLOCALE_LOCK().  But any name beginning  with an
      *              underscore is technically reserved for the libc
      *              implementation itself; hence is illegal for perl to use. 
      *              The real definition of WSETLOCALE_LOCK() is in perl.h, as
      *              is too complicated to define here.  But you should be
      *              using Perl_setlocale() anyway. */
#    define WSETLOCALE_LOCK    NOOP
#    define WSETLOCALE_UNLOCK  NOOP
#  else
#    define WSETLOCALE_LOCK    NOOP
#    define WSETLOCALE_UNLOCK  NOOP
#  endif
#endif

/* ex: set ro ft=c: */
