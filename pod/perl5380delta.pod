=encoding utf8

=head1 NAME

perldelta - what is new for perl v5.38.0

=head1 DESCRIPTION

This document describes differences between the 5.36.0 release and the 5.38.0
release.

=head1 Notice

XXX Any important notices here

=head1 Core Enhancements

=head2 PERL_RAND_SEED

Added a new environment variable C<PERL_RAND_SEED> which can be used to
cause a perl program which uses C<rand> without using C<srand()>
explicitly or which uses C<srand()> with no arguments to be repeatable.
See L<perlrun>. This feature can be disabled at compile time by passing

    -Accflags=-DNO_PERL_RAND_SEED

to F<Configure> during the build process.

=head1 Security

=head1 Incompatible Changes

=head2 readline() no longer clears the stream error flag

C<readline()>, also spelled C<< <> >>, would clear the handle's error
flag after an error occurred on the stream.

The error flag is now only cleared when an error occurs when reading
from the child process for glob() in F<miniperl>.  This allows it to
correctly report errors from the child process on close().

Since the error flag is no longer cleared calling close() on the
stream may fail and if the stream was not explicitly closed, the
implicit close of the stream may produce a warning.

[L<GH #20060|https://github.com/Perl/perl5/issues/20060>]

=head2 C<INIT> blocks no longer run after an C<exit()> in C<BEGIN>

C<INIT> blocks will no longer run after an C<exit()> performed inside of
a C<BEGIN>. This means that the combination of the C<-v> option and the
C<-c> option no longer executes a compile check as well as showing the
perl version. The C<-v> option executes an exit(0) after printing the
version information inside of a C<BEGIN> block, and the C<-c> check is
implemented by using C<INIT> hooks, resulting in the C<-v> option taking
precedence.

[L<GH #1537|https://github.com/Perl/perl5/issues/1537>]
[L<GH #20181|https://github.com/Perl/perl5/issues/20181>]

=head2 Syntax errors will no longer produce "phantom error messages".

Generally perl will continue parsing the source code even after
encountering a compile error. In many cases this is helpful, for
instance with misspelled variable names it is helpful to show as many
examples of the error as possible. But in the case of syntax errors
continuing often produces bizarre error messages, and may even cause
segmentation faults during the compile process. In this release the
compiler will halt at the first syntax error encountered. This means
that any code expecting to see the specific error messages we used to
produce will be broken. The error that is emitted will be one of the
diagnostics that used to be produced, but in some cases some messages
that used to be produced will no longer be displayed.

See L<Changes to Existing Diagnostics> for more details.

=head1 Deprecations

=head1 Performance Enhancements

=over 4

=item *

Additional optree optimizations for common OP patterns. For example, multiple
simple OPs replaced by a single streamlined OP, so as to be more efficient at
runtime. L<[GH #19943]|https://github.com/Perl/perl5/pull/19943>,
L<[GH #20063]|https://github.com/Perl/perl5/pull/20063>,
L<[GH #20077]|https://github.com/Perl/perl5/pull/20077>.

=back

=head1 Modules and Pragmata

XXX All changes to installed files in F<cpan/>, F<dist/>, F<ext/> and F<lib/>
go here.  If Module::CoreList is updated, generate an initial draft of the
following sections using F<Porting/corelist-perldelta.pl>.  A paragraph summary
for important changes should then be added by hand.  In an ideal world,
dual-life modules would have a F<Changes> file that could be cribbed.

The list of new and updated modules is modified automatically as part of
preparing a Perl release, so the only reason to manually add entries here is if
you're summarising the important changes in the module update. (Also, if the
manually-added details don't match the automatically-generated ones, the
release manager will have to investigate the situation carefully.)

[ Within each section, list entries as an =item entry ]

=head2 New Modules and Pragmata

=over 4

=item *

XXX Remove this section if Porting/corelist-perldelta.pl did not add any content here.

=back

=head2 Updated Modules and Pragmata

=over 4

=item *

=item *

Added the C<is_tainted()> builtin function. [L<github #19854|https://github.com/Perl/perl5/issues/19854>]

=item *

Added the C<export_lexically()> builtin function as per PPC 0020. [L<github #19895|https://github.com/Perl/perl5/issues/19895>]

=back

=head2 Removed Modules and Pragmata

=over 4

=item *

XXX Remove this section if Porting/corelist-perldelta.pl did not add any content here.

=back

=head1 Documentation

=head2 New Documentation

=head3 L<XXX>

=head2 Changes to Existing Documentation

We have attempted to update the documentation to reflect the changes
listed in this document.  If you find any we have missed, open an issue
at L<https://github.com/Perl/perl5/issues>.

XXX Changes which significantly change existing files in F<pod/> go here.
However, any changes to F<pod/perldiag.pod> should go in the L</Diagnostics>
section.

Additionally, the following selected changes have been made:

=head3 L<perlapi>

=over 4

=item *

Documented L<C<hv_ksplit>|perlapi/hv_ksplit>

=item *

Documented L<C<hv_name_set>|perlapi/hv_name_set>

=item *

L<C<hv_store>|perlapi/hv_store> and L<C<hv_stores>|perlapi/hv_stores>
documentation have been greatly improved.

=item *

Documented L<C<gv_autoload_pv>|perlapi/gv_autoload_pv>

=item *

Documented L<C<gv_autoload_pvn>|perlapi/gv_autoload_pvn>

=item *

Documented L<C<gv_autoload_sv>|perlapi/gv_autoload_sv>

=item *

Documented L<C<gv_name_set>|perlapi/gv_name_set>

=item *

Documented L<C<start_subparse>|perlapi/start_subparse>

=item *

Documented L<C<SV_CHECK_THINKFIRST_COW_DROP>|perlapi/SV_CHECK_THINKFIRST_COW_DROP>

=item *

Documented L<C<SV_CHECK_THINKFIRST>|perlapi/SV_CHECK_THINKFIRST>

=item *

Documented L<C<SvPV_shrink_to_cur>|perlapi/SvPV_shrink_to_cur>

=item *

Documented L<C<save_aelem>|perlapi/save_aelem>

=item *

Documented L<C<save_aelem_flags>|perlapi/save_aelem_flags>

=item *

Documented L<C<save_helem>|perlapi/save_helem>

=item *

Documented L<C<save_helem_flags>|perlapi/save_helem_flags>

=back

=head3 L<perlintern>

=over 4

=item *

Documented L<C<save_pushptr>|perlintern/save_pushptr>

=item *

Documented L<C<save_scalar_at>|perlintern/save_scalar_at>

=item *

Entries have been added to L<perlguts> for the new C<newAV_alloc_x>, C<newAV_alloc_xz> and
C<*_simple> functions.

=item *

References to the now-defunct PrePAN service have been removed from
L<perlcommunity> and L<perlmodstyle>.

=item *

A section on symbol naming has been added to L<perlhacktips>.

=item *

L<perlexperiment> has been edited to properly reference the warning categories
for the defer block modifier and extra paired delimiters for quote-like
operators.

=back

=back

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

XXX New or changed warnings emitted by the core's C<C> code go here.  Also
include any changes in L<perldiag> that reconcile it to the C<C> code.

=head2 New Diagnostics

XXX Newly added diagnostic messages go under here, separated into New Errors
and New Warnings

=head3 New Errors

=over 4

=item *

A new syntax error has been added for the error that a C<catch> block does
not have its required variable declaration. See
L<catch block requires a (VAR)|perldiag/"catch block requires a (VAR)">

=item *

L<Too many nested BEGIN blocks, maximum of %d allowed|perldiag/"Too many nested BEGIN blocks, maximum of %d allowed">

=item *

L<Execution of %s aborted due to compilation errors.|perldiag/"Execution of %s aborted due to compilation errors.">

=back

=head3 New Warnings

=over 4

=item *

L<Unknown locale category %d|perldiag/"Unknown locale category %d">

This is a shortened form of an already existing diagnostic, for use when
there is no new locale being switched to.  The previous diagnostic was
misleading in such circumstances.

=item *

L<Locale '%s' is unsupported, and may crash the interpreter.|perldiag/"Locale '%s' is unsupported, and may crash the interpreter.">

=item *

L<Treating %s::INIT block as BEGIN block as workaround|perldiag/"Treating %s::INIT block as BEGIN block as workaround">

=item *

L<Filehandle STD%s reopened as %s only for input|perldiag/"Filehandle STD%s reopened as %s only for input">

=item *

L<%s on BEGIN block ignored|perldiag/"%s on BEGIN block ignored">

=back

=head2 Changes to Existing Diagnostics

=over 4

=item *

The compiler will now stop parsing on the first syntax error it
encounters. Historically the compiler would attempt to "skip past" the
error and continue parsing so that it could list multiple errors. For
things like undeclared variables under strict this makes sense. For
syntax errors however it has been found that continuing tends to result
in a storm of unrelated or bizarre errors that mostly just obscure the
true error. In extreme cases it can even lead to segfaults and other
incorrect behavior.

Therefore we have reformed the continuation logic so that the parse will
stop after the first seen syntax error. Semantic errors like undeclared
variables will not stop the parse, so you may still see multiple errors
when compiling code. However if there is a syntax error it will be the
last error message reported by perl and all of the errors that you see
will be something that actually needs to be fixed.

=item *

Error messages that output class or package names have been modified to
output double quoted strings with various characters escaped so as to
make the exact value clear to a reader. The exact rules on which
characters are escaped may change over time but currently are that
printable ASCII codepoints, with the exception of C<"> and C<\>, and
unicode word characters whose codepoint is over 255 are output raw, and
any other symbols are escaped much as Data::Dumper might escape them,
using C<\n> for newline and C<\"> for double quotes, etc. Codepoints in
the range 128-255 are always escaped as they can cause trouble on
unicode terminals when output raw.

In older versions of perl the one liner

    $ perl -le'"thing\n"->foo()'

would output the following error message exactly as shown here, with
text spread over multiple lines because the "\n" would be emitted as
a raw newline character:

    Can't locate object method "foo" via package "thing
    " (perhaps you forgot to load "thing
    "?) at -e line 1.

As of this release we would output this instead (as one line):

    Can't locate object method "foo" via package "thing\n"
      (perhaps you forgot to load "thing\n"?) at -e line 1.

Notice the newline in the package name has been quoted and escaped, and
thus the error message is a single line. The text is shown here wrapped
to two lines only for readability.

=item *

When package or class names in errors are very large the middle excess
portion will be elided from the message. As of this release error messages
will show only up to the first 128 characters and the last 128 characters
in a package or class name in error messages. For example

 $ perl -le'("Foo" x 1000)->new()'

will output the following as one line:

 Can't locate object method "new" via package "FooFooFooFooFooFooFoo
 FooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFoo
 FooFooFooFooFooFooFooFooFooFooFooFooFooFo"..."oFooFooFooFooFooFooFoo
 FooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFoo
 FooFooFooFooFooFooFooFooFooFooFooFooFoo" (perhaps you forgot to load
 "FooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFoo
 FooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFo"...
 "oFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFoo
 FooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFoo"?)
 at -e line 1.

Notice the C< "prefix"..."suffix" > form of the package name in this case.
In previous versions of perl the complete string would have been shown
making the error message over 6k long and there was no upper limit on the
length of the error message at all. If you accidentally used a 1MB string
as a class name then the error message would be over 2MB long. In this perl
the upper limit should be around 2k when eliding and escaping are taken into
account.

=item *

Removed C<< Complex regular subexpression recursion limit (%d) exceeded >>

The regular expresion engine has not used recursion in some time. This
warning no longer makes sense.

See [L<GH #19636|https://github.com/Perl/perl5/pull/19636>].

=back

=head1 Utility Changes

XXX Changes to installed programs such as F<perldoc> and F<xsubpp> go here.
Most of these are built within the directory F<utils>.

[ List utility changes as a =head2 entry for each utility and =item
entries for each change
Use L<XXX> with program names to get proper documentation linking. ]

=head2 L<XXX>

=over 4

=item *

XXX

=back

=head1 Configuration and Compilation

=over 4

=item *

C<make -j6 minitest> could fail due to a build conflict in building
C<$(MINIPERL_EXE)> between the main make process and a child process.
[github #19829]

=item *

Properly populate osvers on Dragonfly BSD when the hostname isn't set.

=item *

Fix typos for C99 macro name PRIX64.

=back

=head1 Testing

Tests were added and changed to reflect the other additions and
changes in this release.  Furthermore, these significant changes were
made:

=over 4

=item *

Unicode normalization tests have been added.

XXX Changes to F<Configure>, F<installperl>, F<installman>, and analogous tools
go here.  Any other changes to the Perl build process should be listed here.
However, any platform-specific changes should be listed in the
L</Platform Support> section, instead.

[ List changes as an =item entry ].

=over 4

=item *

XXX

=back

=head1 Platform Support

XXX Any changes to platform support should be listed in the sections below.

[ Within the sections, list each platform as an =item entry with specific
changes as paragraphs below it. ]

=head2 New Platforms

XXX List any platforms that this version of perl compiles on, that previous
versions did not.  These will either be enabled by new files in the F<hints/>
directories, or new subdirectories and F<README> files at the top level of the
source tree.

=over 4

=item XXX-some-platform

XXX

=back

=head2 Discontinued Platforms

=over 4

=item Ultrix

Support code for DEC Ultrix has been removed.  Ultrix was the native
Unix-like operating system for various Digital Equipment Corporation
machines.  Its final release was in 1995.

=back

=head2 Platform-Specific Notes

XXX List any changes for specific platforms.  This could include configuration
and compilation changes or changes in portability/compatibility.  However,
changes within modules for platforms should generally be listed in the
L</Modules and Pragmata> section.

=over 4

=item DragonflyBSD

Skip tests to workaround an apparent bug in setproctitle().  [L<github #19894|https://github.com/Perl/perl5/issues/19894>]

=item FreeBSD

FreeBSD no longer uses thread-safe locale operations, to avoid L<a bug in
FreeBSD|https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=265950>

Replace the first part of archname with `uname -p` [L<github #19791|https://github.com/Perl/perl5/issues/19791>]

=item Solaris

Avoid some compiler and compilation issues on NetBSD/Solaris from regexec.c and regcomp.c.

=item Synology

Update Synology Readme for DSM 7.

=item Windows

Fix win32 memory alignment needed for gcc-12 from vmem.h.

utimes() on Win32 would print a message to stderr if it failed to
convert a supplied C<time_t> to to a C<FILETIME>. [github #19668]

In some cases, timestamps returned by L<stat()|perlfunc/stat> and
L<lstat()|perlfunc/lstat> failed to take daylight saving time into account.
[L<GH #20018|https://github.com/Perl/perl5/issues/20018>]
[L<GH #20061|https://github.com/Perl/perl5/issues/20061>]

=back

=head1 Internal Changes

=over 4

=item *

Removed many deprecated C functions.

These have been deprecated for a long time. See
L<https://github.com/perl/perl5/commit/7008caa915ad99e650acf2aea40612b5e48b7ba2>
for a full list.

=item *

C<get_op_descs>, C<get_op_names>, C<get_opargs>, C<get_no_modify> and
C<get_ppaddr> have been marked deprecated.

=item *

C<hv_free_ent> has been marked as internal API.

=item *

C<save_pushptr>, C<save_pushptrptr>, and C<save_pushi32ptr> have been marked
as internal API.

=item *

New bool related functions and macros have been added to complement the new
bool type introduced in 5.36:

The functions are:

=over 4

=item L<C<newSVbool(const bool bool_val)>|perlapi/newSVbool>

=item L<C<newSV_true()>|perlapi/newSV_true>

=item L<C<newSV_false()>|perlapi/newSV_false>

=item L<C<sv_set_true(SV *sv)>|perlapi/sv_set_true>

=item L<C<sv_set_false(SV *sv)>|perlapi/sv_set_false>

=item L<C<sv_set_bool(SV *sv, const bool bool_val)>|perlapi/sv_set_bool>

=back

The macros are:

=over 4

=item L<C<SvIandPOK(sv)>|perlapi/SvIandPOK>

=item L<C<SvIandPOK_off(sv)>|perlapi/SvIandPOK_off>

=item L<C<SvIandPOK_on>|perlapi/SvIandPOK_on>

=back

=item *

Perl is no longer manipulating the C<environ> array directly. The variable
C<PL_use_safe_putenv> has been removed and C<PERL_USE_SAFE_PUTENV> is always
defined. This means XS modules can now call C<setenv> and C<putenv> without
causing segfaults. [L<perl #19399|https://github.com/Perl/perl5/issues/19399>]

=item *

Internal C API functions are now hidden with C<__attribute__((hidden))> on the
platforms that support it. This means they are no longer callable from XS
modules on those platforms.

It should be noted that those functions have always been hidden on Windows. This
change merely brings that to the other platforms.
[L<perl #19655|https://github.com/Perl/perl5/pull/19655>]

=item *

New formatting symbols were added for printing values declared as U32 or
I32:

=over

=item I32df -- Like %d

=item U32of -- Like %o

=item U32uf -- Like %u

=item U32xf -- Like %x

=item U32Xf -- Like %X

=back

These are used in the same way already existing similar symbols, such as
C<IVdf>, are used.  See L<perlapi/I/O Formats>.

=item *

new 'HvHasAUX' macro

=item *

regexec.c: Add some branch predictions reorder conds

=item *

locale: Change macro name to be C conformant

=item *

Rename the C<PADNAMEt_*> constants to C<PADNAMEf_*>

=item *

Changes all the API macros that retrieve a PV into a call to an
inline function so as to evaluate the parameter just once.

=item *

regexec.c: multiple code refactor to make the code more readable

=item *

perl.h: Change macro name to be C conformant
(remove leading _ from NOT_IN_NUMERIC macros)

=item *

regcomp.h: add new C<BITMAP_BIT> macro in addition to the existing C<BITMAP_BYTE>
and C<BITMAP_TEST> ones.

=item *

Create new regnode type ANYOFH.
populate_ANYOF_from_invlist was renamed to populate_bitmap_from_invlist

=item *

regex: Refactor bitmap vs non-bitmap of qr/[]/

=item *

regcomp.c: add new functions to convert from an inversion list to a bitmap (and vice versa)
C<populate_bitmap_from_invlist> and C<populate_invlist_from_bitmap>.

=item *

Add C<newAVav()> to create an AV from an existing AV.
Add C<newAVhv()> to create an AV using keys and values from an existing HV.

=item *

Fix definition of C<Perl_atof>.

=item *

Fix undefined behavior with overflow related OPTIMIZE_INFTY and delta
in C<regcomp.c>.

=item *

Fix regnode pointer alignment issue in <regcomp.h>.

=back

=item *

The C<CVf_METHOD> CV flag and associated C<CvMETHOD> macro has been renamed to
C<CVf_NOWARN_AMBIGUOUS> and C<CvNOWARN_AMBIGUOUS>. This closer reflects its
actual behaviour (it suppresses a warning that would otherwise be generated
about ambiguous names), in order to be less confusing with a possible upcoming
feature.

=item *

The C<OPf_SPECIAL> flag is no longer set on the C<OP_ENTERSUB> op
constructed to call the C<VERSION>, C<import> and C<unimport> methods
as part of a C<use> statement and attribute application, nor when
assigning to an C<:lvalue> subroutine.

=item *

A new CV flag C<CVf_REFCOUNTED_ANYSV> has been added, which indicates that the
CV is an XSUB and stores an SV pointer in the C<CvXSUBANY.any_sv> union field.
Perl core operations such as cloning or destroying the CV will maintain the
reference count of the pointed-to SV, destroying it when required.

=item *

A new API function L<perlapi/C<Perl_localeconv>> is added.  This is the
same as L<C<POSIX::localeconv>|POSIX/localeconv> (returning a hash of
the C<localeconv()> fields), but directly callable from XS code.

=item *

A new API function L<perlapi/C<my_strftime8>> is added.  This is the
same as plain L<perlapi/C<my_strftime>>, but with an extra parameter
that allows the caller to simply and reliably know if the returned
string is UTF-8.

=item *

A new API function, L<perlapi/C<Perl_langinfo8>> is added.  This is the
same as plain L<perlapi/C<Perl_langinfo>>, but with an extra parameter
that allows the caller to simply and reliably know if the returned
string is UTF-8.

=item *

We have introduced a limit on the number of nested C<eval EXPR>/C<BEGIN>
blocks and C<require>/C<BEGIN> (and thus C<use> statements as well) to
prevent C stack overflows. This variable can also be used to forbid
C<BEGIN> blocks from executing during C<eval EXPR> compilation. The
limit defaults to C<1000> but can be overridden by setting the
C<${^MAX_NESTED_EVAL_BEGIN_BLOCKS}> variable. The default itself can be
changed at compile time with

    -Accflags='-DPERL_MAX_NESTED_EVAL_BEGIN_BLOCKS_DEFAULT=12345'

Note that this value relates to the size of your C stack and if you
choose an inappropriately large value Perl may segfault, be conservative
about what you choose.

=back

=head1 Selected Bug Fixes

=over 4

=item *

Avoid recursion and stack overflow parsing 'pack' template

[L<GH #16319|https://github.com/Perl/perl5/issues/16319>]

=item *

An eval() as the last statement in a regex code block could trigger an
interpreter panic; e.g.

    /(?{ ...; eval {....}; })/

[L<GH #19680|https://github.com/Perl/perl5/issues/19680>]

=item *

Disabling the C<bareword_filehandles> feature no longer treats C<< print
Class->method >> as an error.  [L<github #19704|https://github.com/Perl/perl5/issues/19704>]

=item *

When a Perl subroutine tail-calls an XS subroutine using C<goto &xs_sub>,
the XS subroutine can now correctly determine its calling context.
Previously it was always reported as scalar.

In addition, where the Perl subroutine is freed at the same time:

    sub foo { *foo = sub {}; goto &xs_sub }

this formerly could lead to crashes if the XS subroutine tried to use the
value of C<PL_op>, since this was being set to NULL. This is now fixed.

[L<github #19936|https://github.com/Perl/perl5/issues/19936>]

=item *

setsockopt() now uses the mechanism added in 5.36 to better
distinguish between numeric and string values supplied as the
C<OPTVAL> parameter.  [L<github #18761|https://github.com/Perl/perl5/issues/18761>]

=item *

4-argument C<select()> now rejects strings with code points above
255. Additionally, for code points 128-255, this operator will now always
give the corresponding octet to the OS, regardless of how Perl stores
such code points in memory. (Previously Perl leaked its internal string
storage to the OS.) [L<github #19882|https://github.com/Perl/perl5/issues/19882>]

=item *

Fix panic issue from C<val {} inside /(?{...})/> [L<github #19390|https://github.com/Perl/perl5/issues/19390>]

=item *

Fix multiple compiler warnings from regexp.c., locale.c [L<github #19915|https://github.com/Perl/perl5/issues/19915>]

=item *

Fix querying locale without LC_NUMERIC on platform [L<github #19890|https://github.com/Perl/perl5/issues/19890>]

=item *

Prevent undefined behaviour in C<S_maybe_multideref()>.

=item *

Avoid signed integer overflow in C<use integer> ops.

=item *

Avoid adding an offset to a NULL pointer in C<hv_delete_common>.

=item * PerlIO::get_layers will now accept IO references too

Previously it would only take glob references or names of globs. Now it will
also accept IO references.

=back

=head1 Known Problems

XXX Descriptions of platform agnostic bugs we know we can't fix go here.  Any
tests that had to be C<TODO>ed for the release would be noted here.  Unfixed
platform specific bugs also go here.

[ List each fix as an =item entry ]

=over 4

=item *

XXX

=back

=head1 Errata From Previous Releases

=over 4

=item *

XXX Add anything here that we forgot to add, or were mistaken about, in
the perldelta of a previous release.

=back

=head1 Obituary

XXX If any significant core contributor or member of the CPAN community has
died, add a short obituary here.

=head1 Acknowledgements

XXX Generate this with:

  perl Porting/acknowledgements.pl v5.37.11..HEAD

=head1 Reporting Bugs

If you find what you think is a bug, you might check the perl bug database
at L<https://github.com/Perl/perl5/issues>.  There may also be information at
L<http://www.perl.org/>, the Perl Home Page.

If you believe you have an unreported bug, please open an issue at
L<https://github.com/Perl/perl5/issues>.  Be sure to trim your bug down to a
tiny but sufficient test case.

If the bug you are reporting has security implications which make it
inappropriate to send to a public issue tracker, then see
L<perlsec/SECURITY VULNERABILITY CONTACT INFORMATION>
for details of how to report the issue.

=head1 Give Thanks

If you wish to thank the Perl 5 Porters for the work we had done in Perl 5,
you can do so by running the C<perlthanks> program:

    perlthanks

This will send an email to the Perl 5 Porters list with your show of thanks.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
