=encoding utf8

=head1 NAME

[ this is a template for a new perldelta file. Any text flagged as XXX needs
to be processed before release. ]

perldelta - what is new for perl v5.41.3

=head1 DESCRIPTION

This document describes differences between the 5.41.2 release and the 5.41.3
release.

If you are upgrading from an earlier release such as 5.41.1, first read
L<perl5412delta>, which describes differences between 5.41.1 and 5.41.2.

=head1 Notice

XXX Any important notices here

=head1 Core Enhancements

XXX New core language features go here. Summarize user-visible core language
enhancements. Particularly prominent performance optimisations could go
here, but most should go in the L</Performance Enhancements> section.

[ List each enhancement as a =head2 entry ]

=head1 Security

XXX Any security-related notices go here. In particular, any security
vulnerabilities closed should be noted here rather than in the
L</Selected Bug Fixes> section.

[ List each security issue as a =head2 entry ]

=head1 Incompatible Changes

XXX For a release on a stable branch, this section aspires to be:

    There are no changes intentionally incompatible with 5.XXX.XXX
    If any exist, they are bugs, and we request that you submit a
    report. See L</Reporting Bugs> below.

[ List each incompatible change as a =head2 entry ]

=head2 Apostrophe is no longer recognized as a global name separator

The apostrophe C<'> has been recognized as a separator between
components of package names and package variables since Perl 3, acting
exactly like C<::>, which was introduced in Perl 5.

Use of C<'> as a package separator was deprecated in Perl 5.38 and has
now been removed.

[github #22303]

=head2 Switch and Smart Match operator removed

The "switch" feature and the smartmatch operator, C<~~>, were introduced in
v5.10.  Their behavior was significantly changed in v5.10.1.  When the
"experiment" system was added in v5.18.0, switch and smartmatch were
retroactively declared experimental.  Over the years, proposals to fix or
supplement the features have come and gone.

They were deprecated in Perl v5.38.0 and scheduled for removal in Perl
5.42.0

These features have now been entirely removed.

If you code currently uses C<given>/C<when> or smart match this can be
replaced with an C<if>/C<else> chain, or there are several alternative
"switch" or smart match implementations on CPAN.

In no particular order:

=over

=item *

L<Syntax::Infix::Smartmatch|https://metacpan.org/pod/Syntax::Infix::Smartmatch>

=item *

L<Switch::Back|https://metacpan.org/pod/Switch::Back>

=item *

L<Syntax::Operator::Matches|https://metacpan.org/pod/Syntax::Operator::Matches>

=item *

L<Syntax::Keyword::Match|https://metacpan.org/pod/Syntax::Keyword::Match>

=back

[github #22370]

=head1 Deprecations

XXX Any deprecated features, syntax, modules etc. should be listed here.

=head2 Module removals

XXX Remove this section if not applicable.

The following modules will be removed from the core distribution in a
future release, and will at that time need to be installed from CPAN.
Distributions on CPAN which require these modules will need to list them as
prerequisites.

The core versions of these modules will now issue C<deprecated>-category
warnings to alert you to this fact. To silence these deprecation warnings,
install the modules in question from CPAN.

Note that these are (with rare exceptions) fine modules that you are encouraged
to continue to use. Their disinclusion from core primarily hinges on their
necessity to bootstrapping a fully functional, CPAN-capable Perl installation,
not usually on concerns over their design.

=over

=item XXX

XXX Note that deprecated modules should be listed here even if they are listed
as an updated module in the L</Modules and Pragmata> section.

=back

[ List each other deprecation as a =head2 entry ]

=head1 Performance Enhancements

XXX Changes which enhance performance without changing behaviour go here.
There may well be none in a stable release.

[ List each enhancement as an =item entry ]

=over 4

=item *

C<tr///> now runs at the same speed regardless of the internal
representation of its operand, as long as the only characters being
translated are ASCII-range, for example C<tr/A-Z/a-z/>.  Previously, if
the internal encoding was UTF-8, a slower, more general implementation
was used.

=back

=head1 Modules and Pragmata

XXX All changes to installed files in F<cpan/>, F<dist/>, F<ext/> and F<lib/>
go here. If L<Module::CoreList> is updated, generate an initial draft of the
following sections using F<Porting/corelist-perldelta.pl>. A paragraph summary
for important changes should then be added by hand. In an ideal world,
dual-life modules would have a F<Changes> file that could be cribbed.

The list of new and updated modules is modified automatically as part of
preparing a Perl release, so the only reason to manually add entries here is if
you're summarising the important changes in the module update. (Also, if the
manually-added details don't match the automatically-generated ones, the
release manager will have to investigate the situation carefully.)

[ Within each section, list entries as an =item entry ]

=head2 New Modules and Pragmata

=over 4

=item *

XXX Remove this section if F<Porting/corelist-perldelta.pl> did not add any content here.

=back

=head2 Updated Modules and Pragmata

=over 4

=item *

L<perl5db.pl> has been upgraded from version 1.80 to 1.81.

C<b subname>, C<c subname>, C<b postpone subname> will now break on
the first line that is expected to execute in the sub. [github #799]

=item *

L<Test::Simple> has been upgraded from version 1.302199 to 1.302200 and
subsequently to 1.302201.  Upstream on CPAN, the Test2-Suite distribution has
been merged into the Test-Simple distribution.  Test2-Suite was formerly
shipped with the Perl core distribution.  Test2-Suite's files are now found
under F<cpan/Test-Simple> in the Perl 5 source tree (whether you access that
source tree in a git checkout or in a released tarball).  However, this should
have no impact whatsoever on any end-user of any modules formerly found under
Test2-Suite.

=item *

L<Scalar::Util> (the Scalar-List-Utils distribution) has been upgraded from
version 1.63 to 1.65.

=item *

L<Term::Table> has been upgraded from version 0.020 to 0.022.

=item *

L<parent> has been upgraded from version 0.241 to 0.242.

=item *

L<Test::Harness> has been upgraded from version 3.48 to 3.50.

=back

=head2 Removed Modules and Pragmata

=over 4

=item *

XXX Remove this section if F<Porting/corelist-perldelta.pl> did not add any content here.

=back

=head1 Documentation

XXX Changes to files in F<pod/> go here. Consider grouping entries by
file and be sure to link to the appropriate page, e.g. L<perlfunc>.

=head2 New Documentation

XXX Changes which create B<new> files in F<pod/> go here.

=head3 L<XXX>

XXX Description of the purpose of the new file here

=head2 Changes to Existing Documentation

We have attempted to update the documentation to reflect the changes
listed in this document. If you find any we have missed, open an issue
at L<https://github.com/Perl/perl5/issues>.

XXX Changes which significantly change existing files in F<pod/> go here.
However, any changes to F<pod/perldiag.pod> should go in the L</Diagnostics>
section.

Additionally, the following selected changes have been made:

=head3 L<XXX>

=over 4

=item *

XXX Description of the change here

=back

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages. For the complete list of
diagnostic messages, see L<perldiag>.

XXX New or changed warnings emitted by the core's C<C> code go here. Also
include any changes in L<perldiag> that reconcile it to the C<C> code.

=head2 New Diagnostics

XXX Newly added diagnostic messages go under here, separated into L</New Errors>
and L</New Warnings>

=head3 New Errors

=over 4

=item *

XXX L<message|perldiag/"message">

=back

=head3 New Warnings

=over 4

=item *

L<%s() attempted on handle %s opened with open()|perldiag/"%s() attempted on handle %s opened with open()">

(W io) You called readdir(), telldir(), seekdir(), rewinddir() or
closedir() on a handle that was opened with open().  If you want to
use these functions to traverse the contents of a directory, you need
to open the handle with opendir().

[github #22394]

=back

=head2 Changes to Existing Diagnostics

XXX Changes (i.e. rewording) of diagnostic messages go here

=over 4

=item *

L<%s() attempted on invalid dirhandle %s|perldiag/"%s() attempted on invalid dirhandle %s">

This was consolidated from separate messages for readdir(), telldir(),
seekdir(), rewinddir() and closedir() as part of refactoring for
[github #22394].

=back

=head1 Utility Changes

XXX Changes to installed programs such as F<perldoc> and F<xsubpp> go here.
Most of these are built within the directory F<utils>.

[ List utility changes as a =head2 entry for each utility and =item
entries for each change
Use F<XXX> with program names to get proper documentation linking. ]

=head2 F<XXX>

=over 4

=item *

XXX

=back

=head1 Configuration and Compilation

XXX Changes to F<Configure>, F<installperl>, F<installman>, and analogous tools
go here. Any other changes to the Perl build process should be listed here.
However, any platform-specific changes should be listed in the
L</Platform Support> section, instead.

[ List changes as an =item entry ].

=over 4

=item *

XXX

=back

=head1 Testing

XXX Any significant changes to the testing of a freshly built perl should be
listed here. Changes which create B<new> files in F<t/> go here as do any
large changes to the testing harness (e.g. when parallel testing was added).
Changes to existing files in F<t/> aren't worth summarizing, although the bugs
that they represent may be covered elsewhere.

XXX If there were no significant test changes, say this:

Tests were added and changed to reflect the other additions and changes
in this release.

XXX If instead there were significant changes, say this:

Tests were added and changed to reflect the other additions and
changes in this release. Furthermore, these significant changes were
made:

[ List each test improvement as an =item entry ]

=over 4

=item *

Added testing of the perl headers against the C++ compiler
corresponding to the C compiler perl is being built with.  [github
#22232]

=back

=head1 Platform Support

XXX Any changes to platform support should be listed in the sections below.

[ Within the sections, list each platform as an =item entry with specific
changes as paragraphs below it. ]

=head2 New Platforms

XXX List any platforms that this version of perl compiles on, that previous
versions did not. These will either be enabled by new files in the F<hints/>
directories, or new subdirectories and F<README> files at the top level of the
source tree.

=over 4

=item XXX-some-platform

XXX

=back

=head2 Discontinued Platforms

XXX List any platforms that this version of perl no longer compiles on.

=over 4

=item XXX-some-platform

XXX

=back

=head2 Platform-Specific Notes

XXX List any changes for specific platforms. This could include configuration
and compilation changes or changes in portability/compatibility. However,
changes within modules for platforms should generally be listed in the
L</Modules and Pragmata> section.

=over 4

=item XXX-some-platform

XXX

=back

=head1 Internal Changes

XXX Changes which affect the interface available to C<XS> code go here. Other
significant internal changes for future core maintainers should be noted as
well.

[ List each change as an =item entry ]

=over 4

=item *

When built with the C<-DDEBUGGING> compile option, perl API functions that
take pointers to distinct types of SVs (AVs, HVs or CVs) will check the
C<SvTYPE()> of the passed values to ensure they are valid.  Additionally,
internal code within core functions that attempts to extract AVs, HVs or CVs
from reference values passed in will also perform such checks.

While this has been entirely tested by normal Perl CI testing, there may
still be some corner-cases where these constraints are violated in
otherwise-valid calls.  These may require further investigation if they are
found, and specific code to be adjusted to account for it.

=back

=head1 Selected Bug Fixes

XXX Important bug fixes in the core language are summarized here. Bug fixes in
files in F<ext/> and F<lib/> are best summarized in L</Modules and Pragmata>.

XXX Include references to GitHub issues and PRs as: [GH #12345] and the release
manager will later use a regex to expand these into links.

[ List each fix as an =item entry ]

=over 4

=item *

L<C<open>|perlfunc/open> automatically creates an anonymous temporary file when
passed C<undef> as a filename:

    open(my $fh, "+>", undef) or die ...

Due the way this feature was implemented, it would also trigger for
non-existent elements of arrays or hashes:

    open(my $fh, "+>", $hash{no_such_key}) or die ...
    # unexpectedly succeeds and creates a temp file

Now a temporary file is only created if a literal C<undef> is passed.
[GH #22385]

=item *

Compound assignment operators return lvalues that can be further modified:

    ($x &= $y) += $z;
    # Equivalent to:
    #  $x &= $y;
    #  $x += $z;

However, the separate numeric/string bitwise operators provided by L<the
C<bitwise> feature|feature/The 'bitwise' feature>, C<< &= ^= |= &.= ^.= |.= >>,
did not do so:

    use feature qw(bitwise);
    ($x &= $y) += $z;
    # Used to die:
    #  Can't modify numeric bitwise and (&) in addition (+) at ...

This has been corrected. [GH #22412]

=item *

XXX

=back

=head1 Known Problems

XXX Descriptions of platform agnostic bugs we know we can't fix go here. Any
tests that had to be C<TODO>ed for the release would be noted here. Unfixed
platform specific bugs also go here.

[ List each fix as an =item entry ]

=over 4

=item *

XXX

=back

=head1 Errata From Previous Releases

=over 4

=item *

XXX Add anything here that we forgot to add, or were mistaken about, in
the F<perldelta> of a previous release.

=back

=head1 Obituary

XXX If any significant core contributor or member of the CPAN community has
died, add a short obituary here.

=head1 Acknowledgements

XXX Generate this with:

  perl Porting/acknowledgements.pl v5.41.2..HEAD

=head1 Reporting Bugs

If you find what you think is a bug, you might check the perl bug database
at L<https://github.com/Perl/perl5/issues>. There may also be information at
L<https://www.perl.org/>, the Perl Home Page.

If you believe you have an unreported bug, please open an issue at
L<https://github.com/Perl/perl5/issues>. Be sure to trim your bug down to a
tiny but sufficient test case.

If the bug you are reporting has security implications which make it
inappropriate to send to a public issue tracker, then see
L<perlsec/SECURITY VULNERABILITY CONTACT INFORMATION>
for details of how to report the issue.

=head1 Give Thanks

If you wish to thank the Perl 5 Porters for the work we had done in Perl 5,
you can do so by running the C<perlthanks> program:

    perlthanks

This will send an email to the Perl 5 Porters list with your show of thanks.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
