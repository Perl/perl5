/* -*- buffer-read-only: t -*-
   !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
   This file is built by regen/regcomp.pl from regcomp.sym.
   Any changes made here will be lost!
 */

/* Regops and State definitions */

#define REGNODE_MAX           	109
#define REGMATCH_STATE_MAX    	149

#define	END                   	0	/* 0000 End of program. */
#define	SUCCEED               	1	/* 0x01 Return from a subroutine, basically. */
#define	SBOL                  	2	/* 0x02 Match "" at beginning of line: /^/, /\A/ */
#define	BOL                   	2	/* 0x02 type alias */
#define	MBOL                  	3	/* 0x03 Same, assuming multiline: /^/m */
#define	SEOL                  	4	/* 0x04 Match "" at end of line: /$/ */
#define	EOL                   	4	/* 0x04 type alias */
#define	MEOL                  	5	/* 0x05 Same, assuming multiline: /$/m */
#define	EOS                   	6	/* 0x06 Match "" at end of string: /\z/ */
#define	GPOS                  	7	/* 0x07 Matches where last m//g left off. */
#define	BOUND                 	8	/* 0x08 Like BOUNDA for non-utf8, otherwise like BOUNDU */
#define	BOUNDL                	9	/* 0x09 Like BOUND/BOUNDU, but \w and \W are defined by current locale */
#define	BOUNDU                	10	/* 0x0a Match "" at any boundary of a given type using /u rules. */
#define	BOUNDA                	11	/* 0x0b Match "" at any boundary between \w\W or \W\w, where \w is [_a-zA-Z0-9] */
#define	NBOUND                	12	/* 0x0c Like NBOUNDA for non-utf8, otherwise like BOUNDU */
#define	NBOUNDL               	13	/* 0x0d Like NBOUND/NBOUNDU, but \w and \W are defined by current locale */
#define	NBOUNDU               	14	/* 0x0e Match "" at any non-boundary of a given type using using /u rules. */
#define	NBOUNDA               	15	/* 0x0f Match "" betweeen any \w\w or \W\W, where \w is [_a-zA-Z0-9] */
#define	REG_ANY               	16	/* 0x10 Match any one character (except newline). */
#define	SANY                  	17	/* 0x11 Match any one character. */
#define	ANYOF                 	18	/* 0x12 Match character in (or not in) this class, single char match only */
#define	ANYOFD                	19	/* 0x13 Like ANYOF, but /d is in effect */
#define	ANYOFL                	20	/* 0x14 Like ANYOF, but /l is in effect */
#define	ANYOFPOSIXL           	21	/* 0x15 Like ANYOFL, but matches [[:posix:]] classes */
#define	ANYOFH                	22	/* 0x16 Like ANYOF, but only has "High" matches, none in the bitmap; the flags field contains the lowest matchable UTF-8 start byte */
#define	ANYOFHb               	23	/* 0x17 Like ANYOFH, but all matches share the same UTF-8 start byte, given in the flags field */
#define	ANYOFHr               	24	/* 0x18 Like ANYOFH, but the flags field contains packed bounds for all matchable UTF-8 start bytes. */
#define	ANYOFHs               	25	/* 0x19 Like ANYOFHb, but has a string field that gives the leading matchable UTF-8 bytes; flags field is len */
#define	ANYOFR                	26	/* 0x1a Matches any character in the range given by its packed args: upper 12 bits is the max delta from the base lower 20; the flags field contains the lowest matchable UTF-8 start byte */
#define	ANYOFRb               	27	/* 0x1b Like ANYOFR, but all matches share the same UTF-8 start byte, given in the flags field */
#define	ANYOFM                	28	/* 0x1c Like ANYOF, but matches an invariant byte as determined by the mask and arg */
#define	NANYOFM               	29	/* 0x1d complement of ANYOFM */
#define	POSIXD                	30	/* 0x1e Some [[:class:]] under /d; the FLAGS field gives which one */
#define	POSIXL                	31	/* 0x1f Some [[:class:]] under /l; the FLAGS field gives which one */
#define	POSIXU                	32	/* 0x20 Some [[:class:]] under /u; the FLAGS field gives which one */
#define	POSIXA                	33	/* 0x21 Some [[:class:]] under /a; the FLAGS field gives which one */
#define	NPOSIXD               	34	/* 0x22 complement of POSIXD, [[:^class:]] */
#define	NPOSIXL               	35	/* 0x23 complement of POSIXL, [[:^class:]] */
#define	NPOSIXU               	36	/* 0x24 complement of POSIXU, [[:^class:]] */
#define	NPOSIXA               	37	/* 0x25 complement of POSIXA, [[:^class:]] */
#define	CLUMP                 	38	/* 0x26 Match any extended grapheme cluster sequence */
#define	BRANCH                	39	/* 0x27 Match this alternative, or the next... */
#define	EXACT                 	40	/* 0x28 Match this string (flags field is the length). */
#define	LEXACT                	41	/* 0x29 Match this long string (preceded by length; flags unused). */
#define	EXACTL                	42	/* 0x2a Like EXACT, but /l is in effect (used so locale-related warnings can be checked for) */
#define	EXACTF                	43	/* 0x2b Like EXACT, but match using /id rules; (string not UTF-8, ASCII folded; non-ASCII not) */
#define	EXACTFL               	44	/* 0x2c Like EXACT, but match using /il rules; (string not likely to be folded) */
#define	EXACTFU               	45	/* 0x2d Like EXACT, but match using /iu rules; (string folded) */
#define	EXACTFAA              	46	/* 0x2e Like EXACT, but match using /iaa rules; (string folded except in non-UTF8 patterns: MICRO, SHARP S; folded length <= unfolded) */
#define	EXACTFUP              	47	/* 0x2f Like EXACT, but match using /iu rules; (string not UTF-8, folded except MICRO, SHARP S: hence Problematic) */
#define	EXACTFLU8             	48	/* 0x30 Like EXACTFU, but use /il, UTF-8, (string is folded, and everything in it is above 255 */
#define	EXACTFAA_NO_TRIE      	49	/* 0x31 Like EXACT, but match using /iaa rules (string not UTF-8, not guaranteed to be folded, not currently trie-able) */
#define	EXACT_REQ8            	50	/* 0x32 Like EXACT, but only UTF-8 encoded targets can match */
#define	LEXACT_REQ8           	51	/* 0x33 Like LEXACT, but only UTF-8 encoded targets can match */
#define	EXACTFU_REQ8          	52	/* 0x34 Like EXACTFU, but only UTF-8 encoded targets can match */
#define	EXACTFU_S_EDGE        	53	/* 0x35 /di rules, but nothing in it precludes /ui, except begins and/or ends with [Ss]; (string not UTF-8; compile-time only) */
#define	LNBREAK               	54	/* 0x36 generic newline pattern */
#define	TRIE                  	55	/* 0x37 Match many EXACT(F[ALU]?)? at once. flags==type */
#define	TRIEC                 	56	/* 0x38 Same as TRIE, but with embedded charclass data */
#define	AHOCORASICK           	57	/* 0x39 Aho Corasick stclass. flags==type */
#define	AHOCORASICKC          	58	/* 0x3a Same as AHOCORASICK, but with embedded charclass data */
#define	NOTHING               	59	/* 0x3b Match empty string. */
#define	TAIL                  	60	/* 0x3c Match empty string. Can jump here from outside. */
#define	STAR                  	61	/* 0x3d Match this (simple) thing 0 or more times. */
#define	PLUS                  	62	/* 0x3e Match this (simple) thing 1 or more times. */
#define	CURLY                 	63	/* 0x3f Match this simple thing {n,m} times. */
#define	CURLYN                	64	/* 0x40 Capture next-after-this simple thing */
#define	CURLYM                	65	/* 0x41 Capture this medium-complex thing {n,m} times. */
#define	CURLYX                	66	/* 0x42 Match this complex thing {n,m} times. */
#define	WHILEM                	67	/* 0x43 Do curly processing and see if rest matches. */
#define	OPEN                  	68	/* 0x44 Mark this point in input as start of #n. */
#define	CLOSE                 	69	/* 0x45 Close corresponding OPEN of #n. */
#define	SROPEN                	70	/* 0x46 Same as OPEN, but for script run */
#define	SRCLOSE               	71	/* 0x47 Close preceding SROPEN */
#define	REF                   	72	/* 0x48 Match some already matched string */
#define	REFF                  	73	/* 0x49 Match already matched string, using /di rules. */
#define	REFFL                 	74	/* 0x4a Match already matched string, using /li rules. */
#define	REFFU                 	75	/* 0x4b Match already matched string, usng /ui. */
#define	REFFA                 	76	/* 0x4c Match already matched string, using /aai rules. */
#define	REFN                  	77	/* 0x4d Match some already matched string */
#define	REFFN                 	78	/* 0x4e Match already matched string, using /di rules. */
#define	REFFLN                	79	/* 0x4f Match already matched string, using /li rules. */
#define	REFFUN                	80	/* 0x50 Match already matched string, using /ui rules. */
#define	REFFAN                	81	/* 0x51 Match already matched string, using /aai rules. */
#define	LONGJMP               	82	/* 0x52 Jump far away. */
#define	BRANCHJ               	83	/* 0x53 BRANCH with long offset. */
#define	IFMATCH               	84	/* 0x54 Succeeds if the following matches; non-zero flags "f", next_off "o" means lookbehind assertion starting "f..(f-o)" characters before current */
#define	UNLESSM               	85	/* 0x55 Fails if the following matches; non-zero flags "f", next_off "o" means lookbehind assertion starting "f..(f-o)" characters before current */
#define	SUSPEND               	86	/* 0x56 "Independent" sub-RE. */
#define	IFTHEN                	87	/* 0x57 Switch, should be preceded by switcher. */
#define	GROUPP                	88	/* 0x58 Whether the group matched. */
#define	EVAL                  	89	/* 0x59 Execute some Perl code. */
#define	MINMOD                	90	/* 0x5a Next operator is not greedy. */
#define	LOGICAL               	91	/* 0x5b Next opcode should set the flag only. */
#define	RENUM                 	92	/* 0x5c Group with independently numbered parens. */
#define	GOSUB                 	93	/* 0x5d recurse to paren arg1 at (signed) ofs arg2 */
#define	GROUPPN               	94	/* 0x5e Whether the group matched. */
#define	INSUBP                	95	/* 0x5f Whether we are in a specific recurse. */
#define	DEFINEP               	96	/* 0x60 Never execute directly. */
#define	ENDLIKE               	97	/* 0x61 Used only for the type field of verbs */
#define	OPFAIL                	98	/* 0x62 Same as (?!), but with verb arg */
#define	ACCEPT                	99	/* 0x63 Accepts the current matched string, with verbar */
#define	VERB                  	100	/* 0x64 Used only for the type field of verbs */
#define	PRUNE                 	101	/* 0x65 Pattern fails at this startpoint if no-backtracking through this */
#define	MARKPOINT             	102	/* 0x66 Push the current location for rollback by cut. */
#define	SKIP                  	103	/* 0x67 On failure skip forward (to the mark) before retrying */
#define	COMMIT                	104	/* 0x68 Pattern fails outright if backtracking through this */
#define	CUTGROUP              	105	/* 0x69 On failure go to the next alternation in the group */
#define	KEEPS                 	106	/* 0x6a $& begins here. */
#define	OPTIMIZED             	107	/* 0x6b Placeholder for dump. */
#define	PSEUDO                	108	/* 0x6c Pseudo opcode for internal use. */
#define	REGEX_SET             	109	/* 0x6d Regex set, temporary node used in pre-optimization compilation */
	/* -- For regexec.c to switch on target being utf8 (t8)
	 * or not (tb, b='byte'); same with pattern (p8, pb) -- */
#define with_tp_UTF8ness(op, t_utf8, p_utf8)                        \
		(((op) << 2) + (cBOOL(t_utf8) << 1) + cBOOL(p_utf8))

#define	END_tb_pb             	0	/* 0000  */
#define	END_tb_p8             	1	/* 0x01  */
#define	END_t8_pb             	2	/* 0x02  */
#define	END_t8_p8             	3	/* 0x03  */
#define	SUCCEED_tb_pb         	4	/* 0x04  */
#define	SUCCEED_tb_p8         	5	/* 0x05  */
#define	SUCCEED_t8_pb         	6	/* 0x06  */
#define	SUCCEED_t8_p8         	7	/* 0x07  */
#define	SBOL_tb_pb            	8	/* 0x08  */
#define	SBOL_tb_p8            	9	/* 0x09  */
#define	SBOL_t8_pb            	10	/* 0x0a  */
#define	SBOL_t8_p8            	11	/* 0x0b  */
#define	MBOL_tb_pb            	12	/* 0x0c  */
#define	MBOL_tb_p8            	13	/* 0x0d  */
#define	MBOL_t8_pb            	14	/* 0x0e  */
#define	MBOL_t8_p8            	15	/* 0x0f  */
#define	SEOL_tb_pb            	16	/* 0x10  */
#define	SEOL_tb_p8            	17	/* 0x11  */
#define	SEOL_t8_pb            	18	/* 0x12  */
#define	SEOL_t8_p8            	19	/* 0x13  */
#define	MEOL_tb_pb            	20	/* 0x14  */
#define	MEOL_tb_p8            	21	/* 0x15  */
#define	MEOL_t8_pb            	22	/* 0x16  */
#define	MEOL_t8_p8            	23	/* 0x17  */
#define	EOS_tb_pb             	24	/* 0x18  */
#define	EOS_tb_p8             	25	/* 0x19  */
#define	EOS_t8_pb             	26	/* 0x1a  */
#define	EOS_t8_p8             	27	/* 0x1b  */
#define	GPOS_tb_pb            	28	/* 0x1c  */
#define	GPOS_tb_p8            	29	/* 0x1d  */
#define	GPOS_t8_pb            	30	/* 0x1e  */
#define	GPOS_t8_p8            	31	/* 0x1f  */
#define	BOUND_tb_pb           	32	/* 0x20  */
#define	BOUND_tb_p8           	33	/* 0x21  */
#define	BOUND_t8_pb           	34	/* 0x22  */
#define	BOUND_t8_p8           	35	/* 0x23  */
#define	BOUNDL_tb_pb          	36	/* 0x24  */
#define	BOUNDL_tb_p8          	37	/* 0x25  */
#define	BOUNDL_t8_pb          	38	/* 0x26  */
#define	BOUNDL_t8_p8          	39	/* 0x27  */
#define	BOUNDU_tb_pb          	40	/* 0x28  */
#define	BOUNDU_tb_p8          	41	/* 0x29  */
#define	BOUNDU_t8_pb          	42	/* 0x2a  */
#define	BOUNDU_t8_p8          	43	/* 0x2b  */
#define	BOUNDA_tb_pb          	44	/* 0x2c  */
#define	BOUNDA_tb_p8          	45	/* 0x2d  */
#define	BOUNDA_t8_pb          	46	/* 0x2e  */
#define	BOUNDA_t8_p8          	47	/* 0x2f  */
#define	NBOUND_tb_pb          	48	/* 0x30  */
#define	NBOUND_tb_p8          	49	/* 0x31  */
#define	NBOUND_t8_pb          	50	/* 0x32  */
#define	NBOUND_t8_p8          	51	/* 0x33  */
#define	NBOUNDL_tb_pb         	52	/* 0x34  */
#define	NBOUNDL_tb_p8         	53	/* 0x35  */
#define	NBOUNDL_t8_pb         	54	/* 0x36  */
#define	NBOUNDL_t8_p8         	55	/* 0x37  */
#define	NBOUNDU_tb_pb         	56	/* 0x38  */
#define	NBOUNDU_tb_p8         	57	/* 0x39  */
#define	NBOUNDU_t8_pb         	58	/* 0x3a  */
#define	NBOUNDU_t8_p8         	59	/* 0x3b  */
#define	NBOUNDA_tb_pb         	60	/* 0x3c  */
#define	NBOUNDA_tb_p8         	61	/* 0x3d  */
#define	NBOUNDA_t8_pb         	62	/* 0x3e  */
#define	NBOUNDA_t8_p8         	63	/* 0x3f  */
#define	REG_ANY_tb_pb         	64	/* 0x40  */
#define	REG_ANY_tb_p8         	65	/* 0x41  */
#define	REG_ANY_t8_pb         	66	/* 0x42  */
#define	REG_ANY_t8_p8         	67	/* 0x43  */
#define	SANY_tb_pb            	68	/* 0x44  */
#define	SANY_tb_p8            	69	/* 0x45  */
#define	SANY_t8_pb            	70	/* 0x46  */
#define	SANY_t8_p8            	71	/* 0x47  */
#define	ANYOF_tb_pb           	72	/* 0x48  */
#define	ANYOF_tb_p8           	73	/* 0x49  */
#define	ANYOF_t8_pb           	74	/* 0x4a  */
#define	ANYOF_t8_p8           	75	/* 0x4b  */
#define	ANYOFD_tb_pb          	76	/* 0x4c  */
#define	ANYOFD_tb_p8          	77	/* 0x4d  */
#define	ANYOFD_t8_pb          	78	/* 0x4e  */
#define	ANYOFD_t8_p8          	79	/* 0x4f  */
#define	ANYOFL_tb_pb          	80	/* 0x50  */
#define	ANYOFL_tb_p8          	81	/* 0x51  */
#define	ANYOFL_t8_pb          	82	/* 0x52  */
#define	ANYOFL_t8_p8          	83	/* 0x53  */
#define	ANYOFPOSIXL_tb_pb     	84	/* 0x54  */
#define	ANYOFPOSIXL_tb_p8     	85	/* 0x55  */
#define	ANYOFPOSIXL_t8_pb     	86	/* 0x56  */
#define	ANYOFPOSIXL_t8_p8     	87	/* 0x57  */
#define	ANYOFH_tb_pb          	88	/* 0x58  */
#define	ANYOFH_tb_p8          	89	/* 0x59  */
#define	ANYOFH_t8_pb          	90	/* 0x5a  */
#define	ANYOFH_t8_p8          	91	/* 0x5b  */
#define	ANYOFHb_tb_pb         	92	/* 0x5c  */
#define	ANYOFHb_tb_p8         	93	/* 0x5d  */
#define	ANYOFHb_t8_pb         	94	/* 0x5e  */
#define	ANYOFHb_t8_p8         	95	/* 0x5f  */
#define	ANYOFHr_tb_pb         	96	/* 0x60  */
#define	ANYOFHr_tb_p8         	97	/* 0x61  */
#define	ANYOFHr_t8_pb         	98	/* 0x62  */
#define	ANYOFHr_t8_p8         	99	/* 0x63  */
#define	ANYOFHs_tb_pb         	100	/* 0x64  */
#define	ANYOFHs_tb_p8         	101	/* 0x65  */
#define	ANYOFHs_t8_pb         	102	/* 0x66  */
#define	ANYOFHs_t8_p8         	103	/* 0x67  */
#define	ANYOFR_tb_pb          	104	/* 0x68  */
#define	ANYOFR_tb_p8          	105	/* 0x69  */
#define	ANYOFR_t8_pb          	106	/* 0x6a  */
#define	ANYOFR_t8_p8          	107	/* 0x6b  */
#define	ANYOFRb_tb_pb         	108	/* 0x6c  */
#define	ANYOFRb_tb_p8         	109	/* 0x6d  */
#define	ANYOFRb_t8_pb         	110	/* 0x6e  */
#define	ANYOFRb_t8_p8         	111	/* 0x6f  */
#define	ANYOFM_tb_pb          	112	/* 0x70  */
#define	ANYOFM_tb_p8          	113	/* 0x71  */
#define	ANYOFM_t8_pb          	114	/* 0x72  */
#define	ANYOFM_t8_p8          	115	/* 0x73  */
#define	NANYOFM_tb_pb         	116	/* 0x74  */
#define	NANYOFM_tb_p8         	117	/* 0x75  */
#define	NANYOFM_t8_pb         	118	/* 0x76  */
#define	NANYOFM_t8_p8         	119	/* 0x77  */
#define	POSIXD_tb_pb          	120	/* 0x78  */
#define	POSIXD_tb_p8          	121	/* 0x79  */
#define	POSIXD_t8_pb          	122	/* 0x7a  */
#define	POSIXD_t8_p8          	123	/* 0x7b  */
#define	POSIXL_tb_pb          	124	/* 0x7c  */
#define	POSIXL_tb_p8          	125	/* 0x7d  */
#define	POSIXL_t8_pb          	126	/* 0x7e  */
#define	POSIXL_t8_p8          	127	/* 0x7f  */
#define	POSIXU_tb_pb          	128	/* 0x80  */
#define	POSIXU_tb_p8          	129	/* 0x81  */
#define	POSIXU_t8_pb          	130	/* 0x82  */
#define	POSIXU_t8_p8          	131	/* 0x83  */
#define	POSIXA_tb_pb          	132	/* 0x84  */
#define	POSIXA_tb_p8          	133	/* 0x85  */
#define	POSIXA_t8_pb          	134	/* 0x86  */
#define	POSIXA_t8_p8          	135	/* 0x87  */
#define	NPOSIXD_tb_pb         	136	/* 0x88  */
#define	NPOSIXD_tb_p8         	137	/* 0x89  */
#define	NPOSIXD_t8_pb         	138	/* 0x8a  */
#define	NPOSIXD_t8_p8         	139	/* 0x8b  */
#define	NPOSIXL_tb_pb         	140	/* 0x8c  */
#define	NPOSIXL_tb_p8         	141	/* 0x8d  */
#define	NPOSIXL_t8_pb         	142	/* 0x8e  */
#define	NPOSIXL_t8_p8         	143	/* 0x8f  */
#define	NPOSIXU_tb_pb         	144	/* 0x90  */
#define	NPOSIXU_tb_p8         	145	/* 0x91  */
#define	NPOSIXU_t8_pb         	146	/* 0x92  */
#define	NPOSIXU_t8_p8         	147	/* 0x93  */
#define	NPOSIXA_tb_pb         	148	/* 0x94  */
#define	NPOSIXA_tb_p8         	149	/* 0x95  */
#define	NPOSIXA_t8_pb         	150	/* 0x96  */
#define	NPOSIXA_t8_p8         	151	/* 0x97  */
#define	CLUMP_tb_pb           	152	/* 0x98  */
#define	CLUMP_tb_p8           	153	/* 0x99  */
#define	CLUMP_t8_pb           	154	/* 0x9a  */
#define	CLUMP_t8_p8           	155	/* 0x9b  */
#define	BRANCH_tb_pb          	156	/* 0x9c  */
#define	BRANCH_tb_p8          	157	/* 0x9d  */
#define	BRANCH_t8_pb          	158	/* 0x9e  */
#define	BRANCH_t8_p8          	159	/* 0x9f  */
#define	EXACT_tb_pb           	160	/* 0xa0  */
#define	EXACT_tb_p8           	161	/* 0xa1  */
#define	EXACT_t8_pb           	162	/* 0xa2  */
#define	EXACT_t8_p8           	163	/* 0xa3  */
#define	LEXACT_tb_pb          	164	/* 0xa4  */
#define	LEXACT_tb_p8          	165	/* 0xa5  */
#define	LEXACT_t8_pb          	166	/* 0xa6  */
#define	LEXACT_t8_p8          	167	/* 0xa7  */
#define	EXACTL_tb_pb          	168	/* 0xa8  */
#define	EXACTL_tb_p8          	169	/* 0xa9  */
#define	EXACTL_t8_pb          	170	/* 0xaa  */
#define	EXACTL_t8_p8          	171	/* 0xab  */
#define	EXACTF_tb_pb          	172	/* 0xac  */
#define	EXACTF_tb_p8          	173	/* 0xad  */
#define	EXACTF_t8_pb          	174	/* 0xae  */
#define	EXACTF_t8_p8          	175	/* 0xaf  */
#define	EXACTFL_tb_pb         	176	/* 0xb0  */
#define	EXACTFL_tb_p8         	177	/* 0xb1  */
#define	EXACTFL_t8_pb         	178	/* 0xb2  */
#define	EXACTFL_t8_p8         	179	/* 0xb3  */
#define	EXACTFU_tb_pb         	180	/* 0xb4  */
#define	EXACTFU_tb_p8         	181	/* 0xb5  */
#define	EXACTFU_t8_pb         	182	/* 0xb6  */
#define	EXACTFU_t8_p8         	183	/* 0xb7  */
#define	EXACTFAA_tb_pb        	184	/* 0xb8  */
#define	EXACTFAA_tb_p8        	185	/* 0xb9  */
#define	EXACTFAA_t8_pb        	186	/* 0xba  */
#define	EXACTFAA_t8_p8        	187	/* 0xbb  */
#define	EXACTFUP_tb_pb        	188	/* 0xbc  */
#define	EXACTFUP_tb_p8        	189	/* 0xbd  */
#define	EXACTFUP_t8_pb        	190	/* 0xbe  */
#define	EXACTFUP_t8_p8        	191	/* 0xbf  */
#define	EXACTFLU8_tb_pb       	192	/* 0xc0  */
#define	EXACTFLU8_tb_p8       	193	/* 0xc1  */
#define	EXACTFLU8_t8_pb       	194	/* 0xc2  */
#define	EXACTFLU8_t8_p8       	195	/* 0xc3  */
#define	EXACTFAA_NO_TRIE_tb_pb	196	/* 0xc4  */
#define	EXACTFAA_NO_TRIE_tb_p8	197	/* 0xc5  */
#define	EXACTFAA_NO_TRIE_t8_pb	198	/* 0xc6  */
#define	EXACTFAA_NO_TRIE_t8_p8	199	/* 0xc7  */
#define	EXACT_REQ8_tb_pb      	200	/* 0xc8  */
#define	EXACT_REQ8_tb_p8      	201	/* 0xc9  */
#define	EXACT_REQ8_t8_pb      	202	/* 0xca  */
#define	EXACT_REQ8_t8_p8      	203	/* 0xcb  */
#define	LEXACT_REQ8_tb_pb     	204	/* 0xcc  */
#define	LEXACT_REQ8_tb_p8     	205	/* 0xcd  */
#define	LEXACT_REQ8_t8_pb     	206	/* 0xce  */
#define	LEXACT_REQ8_t8_p8     	207	/* 0xcf  */
#define	EXACTFU_REQ8_tb_pb    	208	/* 0xd0  */
#define	EXACTFU_REQ8_tb_p8    	209	/* 0xd1  */
#define	EXACTFU_REQ8_t8_pb    	210	/* 0xd2  */
#define	EXACTFU_REQ8_t8_p8    	211	/* 0xd3  */
#define	EXACTFU_S_EDGE_tb_pb  	212	/* 0xd4  */
#define	EXACTFU_S_EDGE_tb_p8  	213	/* 0xd5  */
#define	EXACTFU_S_EDGE_t8_pb  	214	/* 0xd6  */
#define	EXACTFU_S_EDGE_t8_p8  	215	/* 0xd7  */
#define	LNBREAK_tb_pb         	216	/* 0xd8  */
#define	LNBREAK_tb_p8         	217	/* 0xd9  */
#define	LNBREAK_t8_pb         	218	/* 0xda  */
#define	LNBREAK_t8_p8         	219	/* 0xdb  */
#define	TRIE_tb_pb            	220	/* 0xdc  */
#define	TRIE_tb_p8            	221	/* 0xdd  */
#define	TRIE_t8_pb            	222	/* 0xde  */
#define	TRIE_t8_p8            	223	/* 0xdf  */
#define	TRIEC_tb_pb           	224	/* 0xe0  */
#define	TRIEC_tb_p8           	225	/* 0xe1  */
#define	TRIEC_t8_pb           	226	/* 0xe2  */
#define	TRIEC_t8_p8           	227	/* 0xe3  */
#define	AHOCORASICK_tb_pb     	228	/* 0xe4  */
#define	AHOCORASICK_tb_p8     	229	/* 0xe5  */
#define	AHOCORASICK_t8_pb     	230	/* 0xe6  */
#define	AHOCORASICK_t8_p8     	231	/* 0xe7  */
#define	AHOCORASICKC_tb_pb    	232	/* 0xe8  */
#define	AHOCORASICKC_tb_p8    	233	/* 0xe9  */
#define	AHOCORASICKC_t8_pb    	234	/* 0xea  */
#define	AHOCORASICKC_t8_p8    	235	/* 0xeb  */
#define	NOTHING_tb_pb         	236	/* 0xec  */
#define	NOTHING_tb_p8         	237	/* 0xed  */
#define	NOTHING_t8_pb         	238	/* 0xee  */
#define	NOTHING_t8_p8         	239	/* 0xef  */
#define	TAIL_tb_pb            	240	/* 0xf0  */
#define	TAIL_tb_p8            	241	/* 0xf1  */
#define	TAIL_t8_pb            	242	/* 0xf2  */
#define	TAIL_t8_p8            	243	/* 0xf3  */
#define	STAR_tb_pb            	244	/* 0xf4  */
#define	STAR_tb_p8            	245	/* 0xf5  */
#define	STAR_t8_pb            	246	/* 0xf6  */
#define	STAR_t8_p8            	247	/* 0xf7  */
#define	PLUS_tb_pb            	248	/* 0xf8  */
#define	PLUS_tb_p8            	249	/* 0xf9  */
#define	PLUS_t8_pb            	250	/* 0xfa  */
#define	PLUS_t8_p8            	251	/* 0xfb  */
#define	CURLY_tb_pb           	252	/* 0xfc  */
#define	CURLY_tb_p8           	253	/* 0xfd  */
#define	CURLY_t8_pb           	254	/* 0xfe  */
#define	CURLY_t8_p8           	255	/* 0xff  */
#define	CURLYN_tb_pb          	256	/* 0x100  */
#define	CURLYN_tb_p8          	257	/* 0x101  */
#define	CURLYN_t8_pb          	258	/* 0x102  */
#define	CURLYN_t8_p8          	259	/* 0x103  */
#define	CURLYM_tb_pb          	260	/* 0x104  */
#define	CURLYM_tb_p8          	261	/* 0x105  */
#define	CURLYM_t8_pb          	262	/* 0x106  */
#define	CURLYM_t8_p8          	263	/* 0x107  */
#define	CURLYX_tb_pb          	264	/* 0x108  */
#define	CURLYX_tb_p8          	265	/* 0x109  */
#define	CURLYX_t8_pb          	266	/* 0x10a  */
#define	CURLYX_t8_p8          	267	/* 0x10b  */
#define	WHILEM_tb_pb          	268	/* 0x10c  */
#define	WHILEM_tb_p8          	269	/* 0x10d  */
#define	WHILEM_t8_pb          	270	/* 0x10e  */
#define	WHILEM_t8_p8          	271	/* 0x10f  */
#define	OPEN_tb_pb            	272	/* 0x110  */
#define	OPEN_tb_p8            	273	/* 0x111  */
#define	OPEN_t8_pb            	274	/* 0x112  */
#define	OPEN_t8_p8            	275	/* 0x113  */
#define	CLOSE_tb_pb           	276	/* 0x114  */
#define	CLOSE_tb_p8           	277	/* 0x115  */
#define	CLOSE_t8_pb           	278	/* 0x116  */
#define	CLOSE_t8_p8           	279	/* 0x117  */
#define	SROPEN_tb_pb          	280	/* 0x118  */
#define	SROPEN_tb_p8          	281	/* 0x119  */
#define	SROPEN_t8_pb          	282	/* 0x11a  */
#define	SROPEN_t8_p8          	283	/* 0x11b  */
#define	SRCLOSE_tb_pb         	284	/* 0x11c  */
#define	SRCLOSE_tb_p8         	285	/* 0x11d  */
#define	SRCLOSE_t8_pb         	286	/* 0x11e  */
#define	SRCLOSE_t8_p8         	287	/* 0x11f  */
#define	REF_tb_pb             	288	/* 0x120  */
#define	REF_tb_p8             	289	/* 0x121  */
#define	REF_t8_pb             	290	/* 0x122  */
#define	REF_t8_p8             	291	/* 0x123  */
#define	REFF_tb_pb            	292	/* 0x124  */
#define	REFF_tb_p8            	293	/* 0x125  */
#define	REFF_t8_pb            	294	/* 0x126  */
#define	REFF_t8_p8            	295	/* 0x127  */
#define	REFFL_tb_pb           	296	/* 0x128  */
#define	REFFL_tb_p8           	297	/* 0x129  */
#define	REFFL_t8_pb           	298	/* 0x12a  */
#define	REFFL_t8_p8           	299	/* 0x12b  */
#define	REFFU_tb_pb           	300	/* 0x12c  */
#define	REFFU_tb_p8           	301	/* 0x12d  */
#define	REFFU_t8_pb           	302	/* 0x12e  */
#define	REFFU_t8_p8           	303	/* 0x12f  */
#define	REFFA_tb_pb           	304	/* 0x130  */
#define	REFFA_tb_p8           	305	/* 0x131  */
#define	REFFA_t8_pb           	306	/* 0x132  */
#define	REFFA_t8_p8           	307	/* 0x133  */
#define	REFN_tb_pb            	308	/* 0x134  */
#define	REFN_tb_p8            	309	/* 0x135  */
#define	REFN_t8_pb            	310	/* 0x136  */
#define	REFN_t8_p8            	311	/* 0x137  */
#define	REFFN_tb_pb           	312	/* 0x138  */
#define	REFFN_tb_p8           	313	/* 0x139  */
#define	REFFN_t8_pb           	314	/* 0x13a  */
#define	REFFN_t8_p8           	315	/* 0x13b  */
#define	REFFLN_tb_pb          	316	/* 0x13c  */
#define	REFFLN_tb_p8          	317	/* 0x13d  */
#define	REFFLN_t8_pb          	318	/* 0x13e  */
#define	REFFLN_t8_p8          	319	/* 0x13f  */
#define	REFFUN_tb_pb          	320	/* 0x140  */
#define	REFFUN_tb_p8          	321	/* 0x141  */
#define	REFFUN_t8_pb          	322	/* 0x142  */
#define	REFFUN_t8_p8          	323	/* 0x143  */
#define	REFFAN_tb_pb          	324	/* 0x144  */
#define	REFFAN_tb_p8          	325	/* 0x145  */
#define	REFFAN_t8_pb          	326	/* 0x146  */
#define	REFFAN_t8_p8          	327	/* 0x147  */
#define	LONGJMP_tb_pb         	328	/* 0x148  */
#define	LONGJMP_tb_p8         	329	/* 0x149  */
#define	LONGJMP_t8_pb         	330	/* 0x14a  */
#define	LONGJMP_t8_p8         	331	/* 0x14b  */
#define	BRANCHJ_tb_pb         	332	/* 0x14c  */
#define	BRANCHJ_tb_p8         	333	/* 0x14d  */
#define	BRANCHJ_t8_pb         	334	/* 0x14e  */
#define	BRANCHJ_t8_p8         	335	/* 0x14f  */
#define	IFMATCH_tb_pb         	336	/* 0x150  */
#define	IFMATCH_tb_p8         	337	/* 0x151  */
#define	IFMATCH_t8_pb         	338	/* 0x152  */
#define	IFMATCH_t8_p8         	339	/* 0x153  */
#define	UNLESSM_tb_pb         	340	/* 0x154  */
#define	UNLESSM_tb_p8         	341	/* 0x155  */
#define	UNLESSM_t8_pb         	342	/* 0x156  */
#define	UNLESSM_t8_p8         	343	/* 0x157  */
#define	SUSPEND_tb_pb         	344	/* 0x158  */
#define	SUSPEND_tb_p8         	345	/* 0x159  */
#define	SUSPEND_t8_pb         	346	/* 0x15a  */
#define	SUSPEND_t8_p8         	347	/* 0x15b  */
#define	IFTHEN_tb_pb          	348	/* 0x15c  */
#define	IFTHEN_tb_p8          	349	/* 0x15d  */
#define	IFTHEN_t8_pb          	350	/* 0x15e  */
#define	IFTHEN_t8_p8          	351	/* 0x15f  */
#define	GROUPP_tb_pb          	352	/* 0x160  */
#define	GROUPP_tb_p8          	353	/* 0x161  */
#define	GROUPP_t8_pb          	354	/* 0x162  */
#define	GROUPP_t8_p8          	355	/* 0x163  */
#define	EVAL_tb_pb            	356	/* 0x164  */
#define	EVAL_tb_p8            	357	/* 0x165  */
#define	EVAL_t8_pb            	358	/* 0x166  */
#define	EVAL_t8_p8            	359	/* 0x167  */
#define	MINMOD_tb_pb          	360	/* 0x168  */
#define	MINMOD_tb_p8          	361	/* 0x169  */
#define	MINMOD_t8_pb          	362	/* 0x16a  */
#define	MINMOD_t8_p8          	363	/* 0x16b  */
#define	LOGICAL_tb_pb         	364	/* 0x16c  */
#define	LOGICAL_tb_p8         	365	/* 0x16d  */
#define	LOGICAL_t8_pb         	366	/* 0x16e  */
#define	LOGICAL_t8_p8         	367	/* 0x16f  */
#define	RENUM_tb_pb           	368	/* 0x170  */
#define	RENUM_tb_p8           	369	/* 0x171  */
#define	RENUM_t8_pb           	370	/* 0x172  */
#define	RENUM_t8_p8           	371	/* 0x173  */
#define	GOSUB_tb_pb           	372	/* 0x174  */
#define	GOSUB_tb_p8           	373	/* 0x175  */
#define	GOSUB_t8_pb           	374	/* 0x176  */
#define	GOSUB_t8_p8           	375	/* 0x177  */
#define	GROUPPN_tb_pb         	376	/* 0x178  */
#define	GROUPPN_tb_p8         	377	/* 0x179  */
#define	GROUPPN_t8_pb         	378	/* 0x17a  */
#define	GROUPPN_t8_p8         	379	/* 0x17b  */
#define	INSUBP_tb_pb          	380	/* 0x17c  */
#define	INSUBP_tb_p8          	381	/* 0x17d  */
#define	INSUBP_t8_pb          	382	/* 0x17e  */
#define	INSUBP_t8_p8          	383	/* 0x17f  */
#define	DEFINEP_tb_pb         	384	/* 0x180  */
#define	DEFINEP_tb_p8         	385	/* 0x181  */
#define	DEFINEP_t8_pb         	386	/* 0x182  */
#define	DEFINEP_t8_p8         	387	/* 0x183  */
#define	ENDLIKE_tb_pb         	388	/* 0x184  */
#define	ENDLIKE_tb_p8         	389	/* 0x185  */
#define	ENDLIKE_t8_pb         	390	/* 0x186  */
#define	ENDLIKE_t8_p8         	391	/* 0x187  */
#define	OPFAIL_tb_pb          	392	/* 0x188  */
#define	OPFAIL_tb_p8          	393	/* 0x189  */
#define	OPFAIL_t8_pb          	394	/* 0x18a  */
#define	OPFAIL_t8_p8          	395	/* 0x18b  */
#define	ACCEPT_tb_pb          	396	/* 0x18c  */
#define	ACCEPT_tb_p8          	397	/* 0x18d  */
#define	ACCEPT_t8_pb          	398	/* 0x18e  */
#define	ACCEPT_t8_p8          	399	/* 0x18f  */
#define	VERB_tb_pb            	400	/* 0x190  */
#define	VERB_tb_p8            	401	/* 0x191  */
#define	VERB_t8_pb            	402	/* 0x192  */
#define	VERB_t8_p8            	403	/* 0x193  */
#define	PRUNE_tb_pb           	404	/* 0x194  */
#define	PRUNE_tb_p8           	405	/* 0x195  */
#define	PRUNE_t8_pb           	406	/* 0x196  */
#define	PRUNE_t8_p8           	407	/* 0x197  */
#define	MARKPOINT_tb_pb       	408	/* 0x198  */
#define	MARKPOINT_tb_p8       	409	/* 0x199  */
#define	MARKPOINT_t8_pb       	410	/* 0x19a  */
#define	MARKPOINT_t8_p8       	411	/* 0x19b  */
#define	SKIP_tb_pb            	412	/* 0x19c  */
#define	SKIP_tb_p8            	413	/* 0x19d  */
#define	SKIP_t8_pb            	414	/* 0x19e  */
#define	SKIP_t8_p8            	415	/* 0x19f  */
#define	COMMIT_tb_pb          	416	/* 0x1a0  */
#define	COMMIT_tb_p8          	417	/* 0x1a1  */
#define	COMMIT_t8_pb          	418	/* 0x1a2  */
#define	COMMIT_t8_p8          	419	/* 0x1a3  */
#define	CUTGROUP_tb_pb        	420	/* 0x1a4  */
#define	CUTGROUP_tb_p8        	421	/* 0x1a5  */
#define	CUTGROUP_t8_pb        	422	/* 0x1a6  */
#define	CUTGROUP_t8_p8        	423	/* 0x1a7  */
#define	KEEPS_tb_pb           	424	/* 0x1a8  */
#define	KEEPS_tb_p8           	425	/* 0x1a9  */
#define	KEEPS_t8_pb           	426	/* 0x1aa  */
#define	KEEPS_t8_p8           	427	/* 0x1ab  */
#define	OPTIMIZED_tb_pb       	428	/* 0x1ac  */
#define	OPTIMIZED_tb_p8       	429	/* 0x1ad  */
#define	OPTIMIZED_t8_pb       	430	/* 0x1ae  */
#define	OPTIMIZED_t8_p8       	431	/* 0x1af  */
#define	PSEUDO_tb_pb          	432	/* 0x1b0  */
#define	PSEUDO_tb_p8          	433	/* 0x1b1  */
#define	PSEUDO_t8_pb          	434	/* 0x1b2  */
#define	PSEUDO_t8_p8          	435	/* 0x1b3  */
#define	REGEX_SET_tb_pb       	436	/* 0x1b4  */
#define	REGEX_SET_tb_p8       	437	/* 0x1b5  */
#define	REGEX_SET_t8_pb       	438	/* 0x1b6  */
#define	REGEX_SET_t8_p8       	439	/* 0x1b7  */
	/* ------------ States ------------- */
#define	TRIE_next             	(REGNODE_MAX + 1)	/* state for TRIE */
#define	TRIE_next_fail        	(REGNODE_MAX + 2)	/* state for TRIE */
#define	EVAL_B                	(REGNODE_MAX + 3)	/* state for EVAL */
#define	EVAL_B_fail           	(REGNODE_MAX + 4)	/* state for EVAL */
#define	EVAL_postponed_AB     	(REGNODE_MAX + 5)	/* state for EVAL */
#define	EVAL_postponed_AB_fail	(REGNODE_MAX + 6)	/* state for EVAL */
#define	CURLYX_end            	(REGNODE_MAX + 7)	/* state for CURLYX */
#define	CURLYX_end_fail       	(REGNODE_MAX + 8)	/* state for CURLYX */
#define	WHILEM_A_pre          	(REGNODE_MAX + 9)	/* state for WHILEM */
#define	WHILEM_A_pre_fail     	(REGNODE_MAX + 10)	/* state for WHILEM */
#define	WHILEM_A_min          	(REGNODE_MAX + 11)	/* state for WHILEM */
#define	WHILEM_A_min_fail     	(REGNODE_MAX + 12)	/* state for WHILEM */
#define	WHILEM_A_max          	(REGNODE_MAX + 13)	/* state for WHILEM */
#define	WHILEM_A_max_fail     	(REGNODE_MAX + 14)	/* state for WHILEM */
#define	WHILEM_B_min          	(REGNODE_MAX + 15)	/* state for WHILEM */
#define	WHILEM_B_min_fail     	(REGNODE_MAX + 16)	/* state for WHILEM */
#define	WHILEM_B_max          	(REGNODE_MAX + 17)	/* state for WHILEM */
#define	WHILEM_B_max_fail     	(REGNODE_MAX + 18)	/* state for WHILEM */
#define	BRANCH_next           	(REGNODE_MAX + 19)	/* state for BRANCH */
#define	BRANCH_next_fail      	(REGNODE_MAX + 20)	/* state for BRANCH */
#define	CURLYM_A              	(REGNODE_MAX + 21)	/* state for CURLYM */
#define	CURLYM_A_fail         	(REGNODE_MAX + 22)	/* state for CURLYM */
#define	CURLYM_B              	(REGNODE_MAX + 23)	/* state for CURLYM */
#define	CURLYM_B_fail         	(REGNODE_MAX + 24)	/* state for CURLYM */
#define	IFMATCH_A             	(REGNODE_MAX + 25)	/* state for IFMATCH */
#define	IFMATCH_A_fail        	(REGNODE_MAX + 26)	/* state for IFMATCH */
#define	CURLY_B_min           	(REGNODE_MAX + 27)	/* state for CURLY */
#define	CURLY_B_min_fail      	(REGNODE_MAX + 28)	/* state for CURLY */
#define	CURLY_B_max           	(REGNODE_MAX + 29)	/* state for CURLY */
#define	CURLY_B_max_fail      	(REGNODE_MAX + 30)	/* state for CURLY */
#define	COMMIT_next           	(REGNODE_MAX + 31)	/* state for COMMIT */
#define	COMMIT_next_fail      	(REGNODE_MAX + 32)	/* state for COMMIT */
#define	MARKPOINT_next        	(REGNODE_MAX + 33)	/* state for MARKPOINT */
#define	MARKPOINT_next_fail   	(REGNODE_MAX + 34)	/* state for MARKPOINT */
#define	SKIP_next             	(REGNODE_MAX + 35)	/* state for SKIP */
#define	SKIP_next_fail        	(REGNODE_MAX + 36)	/* state for SKIP */
#define	CUTGROUP_next         	(REGNODE_MAX + 37)	/* state for CUTGROUP */
#define	CUTGROUP_next_fail    	(REGNODE_MAX + 38)	/* state for CUTGROUP */
#define	KEEPS_next            	(REGNODE_MAX + 39)	/* state for KEEPS */
#define	KEEPS_next_fail       	(REGNODE_MAX + 40)	/* state for KEEPS */

/* PL_regkind[] What type of regop or state is this. */

#ifndef DOINIT
EXTCONST U8 PL_regkind[];
#else
EXTCONST U8 PL_regkind[] = {
	END,      	/* END                    */
	END,      	/* SUCCEED                */
	BOL,      	/* SBOL                   */
	BOL,      	/* MBOL                   */
	EOL,      	/* SEOL                   */
	EOL,      	/* MEOL                   */
	EOL,      	/* EOS                    */
	GPOS,     	/* GPOS                   */
	BOUND,    	/* BOUND                  */
	BOUND,    	/* BOUNDL                 */
	BOUND,    	/* BOUNDU                 */
	BOUND,    	/* BOUNDA                 */
	NBOUND,   	/* NBOUND                 */
	NBOUND,   	/* NBOUNDL                */
	NBOUND,   	/* NBOUNDU                */
	NBOUND,   	/* NBOUNDA                */
	REG_ANY,  	/* REG_ANY                */
	REG_ANY,  	/* SANY                   */
	ANYOF,    	/* ANYOF                  */
	ANYOF,    	/* ANYOFD                 */
	ANYOF,    	/* ANYOFL                 */
	ANYOF,    	/* ANYOFPOSIXL            */
	ANYOF,    	/* ANYOFH                 */
	ANYOF,    	/* ANYOFHb                */
	ANYOF,    	/* ANYOFHr                */
	ANYOF,    	/* ANYOFHs                */
	ANYOFR,   	/* ANYOFR                 */
	ANYOFR,   	/* ANYOFRb                */
	ANYOFM,   	/* ANYOFM                 */
	ANYOFM,   	/* NANYOFM                */
	POSIXD,   	/* POSIXD                 */
	POSIXD,   	/* POSIXL                 */
	POSIXD,   	/* POSIXU                 */
	POSIXD,   	/* POSIXA                 */
	NPOSIXD,  	/* NPOSIXD                */
	NPOSIXD,  	/* NPOSIXL                */
	NPOSIXD,  	/* NPOSIXU                */
	NPOSIXD,  	/* NPOSIXA                */
	CLUMP,    	/* CLUMP                  */
	BRANCH,   	/* BRANCH                 */
	EXACT,    	/* EXACT                  */
	EXACT,    	/* LEXACT                 */
	EXACT,    	/* EXACTL                 */
	EXACT,    	/* EXACTF                 */
	EXACT,    	/* EXACTFL                */
	EXACT,    	/* EXACTFU                */
	EXACT,    	/* EXACTFAA               */
	EXACT,    	/* EXACTFUP               */
	EXACT,    	/* EXACTFLU8              */
	EXACT,    	/* EXACTFAA_NO_TRIE       */
	EXACT,    	/* EXACT_REQ8             */
	EXACT,    	/* LEXACT_REQ8            */
	EXACT,    	/* EXACTFU_REQ8           */
	EXACT,    	/* EXACTFU_S_EDGE         */
	LNBREAK,  	/* LNBREAK                */
	TRIE,     	/* TRIE                   */
	TRIE,     	/* TRIEC                  */
	TRIE,     	/* AHOCORASICK            */
	TRIE,     	/* AHOCORASICKC           */
	NOTHING,  	/* NOTHING                */
	NOTHING,  	/* TAIL                   */
	STAR,     	/* STAR                   */
	PLUS,     	/* PLUS                   */
	CURLY,    	/* CURLY                  */
	CURLY,    	/* CURLYN                 */
	CURLY,    	/* CURLYM                 */
	CURLY,    	/* CURLYX                 */
	WHILEM,   	/* WHILEM                 */
	OPEN,     	/* OPEN                   */
	CLOSE,    	/* CLOSE                  */
	SROPEN,   	/* SROPEN                 */
	SRCLOSE,  	/* SRCLOSE                */
	REF,      	/* REF                    */
	REF,      	/* REFF                   */
	REF,      	/* REFFL                  */
	REF,      	/* REFFU                  */
	REF,      	/* REFFA                  */
	REF,      	/* REFN                   */
	REF,      	/* REFFN                  */
	REF,      	/* REFFLN                 */
	REF,      	/* REFFUN                 */
	REF,      	/* REFFAN                 */
	LONGJMP,  	/* LONGJMP                */
	BRANCHJ,  	/* BRANCHJ                */
	BRANCHJ,  	/* IFMATCH                */
	BRANCHJ,  	/* UNLESSM                */
	BRANCHJ,  	/* SUSPEND                */
	BRANCHJ,  	/* IFTHEN                 */
	GROUPP,   	/* GROUPP                 */
	EVAL,     	/* EVAL                   */
	MINMOD,   	/* MINMOD                 */
	LOGICAL,  	/* LOGICAL                */
	BRANCHJ,  	/* RENUM                  */
	GOSUB,    	/* GOSUB                  */
	GROUPPN,  	/* GROUPPN                */
	INSUBP,   	/* INSUBP                 */
	DEFINEP,  	/* DEFINEP                */
	ENDLIKE,  	/* ENDLIKE                */
	ENDLIKE,  	/* OPFAIL                 */
	ENDLIKE,  	/* ACCEPT                 */
	VERB,     	/* VERB                   */
	VERB,     	/* PRUNE                  */
	VERB,     	/* MARKPOINT              */
	VERB,     	/* SKIP                   */
	VERB,     	/* COMMIT                 */
	VERB,     	/* CUTGROUP               */
	KEEPS,    	/* KEEPS                  */
	NOTHING,  	/* OPTIMIZED              */
	PSEUDO,   	/* PSEUDO                 */
	REGEX_SET,	/* REGEX_SET              */
	/* ------------ States ------------- */
	TRIE,     	/* TRIE_next              */
	TRIE,     	/* TRIE_next_fail         */
	EVAL,     	/* EVAL_B                 */
	EVAL,     	/* EVAL_B_fail            */
	EVAL,     	/* EVAL_postponed_AB      */
	EVAL,     	/* EVAL_postponed_AB_fail */
	CURLYX,   	/* CURLYX_end             */
	CURLYX,   	/* CURLYX_end_fail        */
	WHILEM,   	/* WHILEM_A_pre           */
	WHILEM,   	/* WHILEM_A_pre_fail      */
	WHILEM,   	/* WHILEM_A_min           */
	WHILEM,   	/* WHILEM_A_min_fail      */
	WHILEM,   	/* WHILEM_A_max           */
	WHILEM,   	/* WHILEM_A_max_fail      */
	WHILEM,   	/* WHILEM_B_min           */
	WHILEM,   	/* WHILEM_B_min_fail      */
	WHILEM,   	/* WHILEM_B_max           */
	WHILEM,   	/* WHILEM_B_max_fail      */
	BRANCH,   	/* BRANCH_next            */
	BRANCH,   	/* BRANCH_next_fail       */
	CURLYM,   	/* CURLYM_A               */
	CURLYM,   	/* CURLYM_A_fail          */
	CURLYM,   	/* CURLYM_B               */
	CURLYM,   	/* CURLYM_B_fail          */
	IFMATCH,  	/* IFMATCH_A              */
	IFMATCH,  	/* IFMATCH_A_fail         */
	CURLY,    	/* CURLY_B_min            */
	CURLY,    	/* CURLY_B_min_fail       */
	CURLY,    	/* CURLY_B_max            */
	CURLY,    	/* CURLY_B_max_fail       */
	COMMIT,   	/* COMMIT_next            */
	COMMIT,   	/* COMMIT_next_fail       */
	MARKPOINT,	/* MARKPOINT_next         */
	MARKPOINT,	/* MARKPOINT_next_fail    */
	SKIP,     	/* SKIP_next              */
	SKIP,     	/* SKIP_next_fail         */
	CUTGROUP, 	/* CUTGROUP_next          */
	CUTGROUP, 	/* CUTGROUP_next_fail     */
	KEEPS,    	/* KEEPS_next             */
	KEEPS,    	/* KEEPS_next_fail        */
};
#endif

#ifdef REG_COMP_C

/* regarglen[] - How large is the argument part of the node (in regnodes) */

static const U8 regarglen[] = {
	0,                                   	/* END          */
	0,                                   	/* SUCCEED      */
	0,                                   	/* SBOL         */
	0,                                   	/* MBOL         */
	0,                                   	/* SEOL         */
	0,                                   	/* MEOL         */
	0,                                   	/* EOS          */
	0,                                   	/* GPOS         */
	0,                                   	/* BOUND        */
	0,                                   	/* BOUNDL       */
	0,                                   	/* BOUNDU       */
	0,                                   	/* BOUNDA       */
	0,                                   	/* NBOUND       */
	0,                                   	/* NBOUNDL      */
	0,                                   	/* NBOUNDU      */
	0,                                   	/* NBOUNDA      */
	0,                                   	/* REG_ANY      */
	0,                                   	/* SANY         */
	EXTRA_SIZE(struct regnode_charclass),	/* ANYOF        */
	EXTRA_SIZE(struct regnode_charclass),	/* ANYOFD       */
	EXTRA_SIZE(struct regnode_charclass),	/* ANYOFL       */
	EXTRA_SIZE(struct regnode_charclass_posixl),	/* ANYOFPOSIXL  */
	EXTRA_SIZE(struct regnode_1),        	/* ANYOFH       */
	EXTRA_SIZE(struct regnode_1),        	/* ANYOFHb      */
	EXTRA_SIZE(struct regnode_1),        	/* ANYOFHr      */
	EXTRA_SIZE(struct regnode_1),        	/* ANYOFHs      */
	EXTRA_SIZE(struct regnode_1),        	/* ANYOFR       */
	EXTRA_SIZE(struct regnode_1),        	/* ANYOFRb      */
	EXTRA_SIZE(struct regnode_1),        	/* ANYOFM       */
	EXTRA_SIZE(struct regnode_1),        	/* NANYOFM      */
	0,                                   	/* POSIXD       */
	0,                                   	/* POSIXL       */
	0,                                   	/* POSIXU       */
	0,                                   	/* POSIXA       */
	0,                                   	/* NPOSIXD      */
	0,                                   	/* NPOSIXL      */
	0,                                   	/* NPOSIXU      */
	0,                                   	/* NPOSIXA      */
	0,                                   	/* CLUMP        */
	0,                                   	/* BRANCH       */
	0,                                   	/* EXACT        */
	EXTRA_SIZE(struct regnode_1),        	/* LEXACT       */
	0,                                   	/* EXACTL       */
	0,                                   	/* EXACTF       */
	0,                                   	/* EXACTFL      */
	0,                                   	/* EXACTFU      */
	0,                                   	/* EXACTFAA     */
	0,                                   	/* EXACTFUP     */
	0,                                   	/* EXACTFLU8    */
	0,                                   	/* EXACTFAA_NO_TRIE */
	0,                                   	/* EXACT_REQ8   */
	EXTRA_SIZE(struct regnode_1),        	/* LEXACT_REQ8  */
	0,                                   	/* EXACTFU_REQ8 */
	0,                                   	/* EXACTFU_S_EDGE */
	0,                                   	/* LNBREAK      */
	EXTRA_SIZE(struct regnode_1),        	/* TRIE         */
	EXTRA_SIZE(struct regnode_charclass),	/* TRIEC        */
	EXTRA_SIZE(struct regnode_1),        	/* AHOCORASICK  */
	EXTRA_SIZE(struct regnode_charclass),	/* AHOCORASICKC */
	0,                                   	/* NOTHING      */
	0,                                   	/* TAIL         */
	0,                                   	/* STAR         */
	0,                                   	/* PLUS         */
	EXTRA_SIZE(struct regnode_2),        	/* CURLY        */
	EXTRA_SIZE(struct regnode_2),        	/* CURLYN       */
	EXTRA_SIZE(struct regnode_2),        	/* CURLYM       */
	EXTRA_SIZE(struct regnode_2),        	/* CURLYX       */
	0,                                   	/* WHILEM       */
	EXTRA_SIZE(struct regnode_1),        	/* OPEN         */
	EXTRA_SIZE(struct regnode_1),        	/* CLOSE        */
	0,                                   	/* SROPEN       */
	0,                                   	/* SRCLOSE      */
	EXTRA_SIZE(struct regnode_1),        	/* REF          */
	EXTRA_SIZE(struct regnode_1),        	/* REFF         */
	EXTRA_SIZE(struct regnode_1),        	/* REFFL        */
	EXTRA_SIZE(struct regnode_1),        	/* REFFU        */
	EXTRA_SIZE(struct regnode_1),        	/* REFFA        */
	EXTRA_SIZE(struct regnode_1),        	/* REFN         */
	EXTRA_SIZE(struct regnode_1),        	/* REFFN        */
	EXTRA_SIZE(struct regnode_1),        	/* REFFLN       */
	EXTRA_SIZE(struct regnode_1),        	/* REFFUN       */
	EXTRA_SIZE(struct regnode_1),        	/* REFFAN       */
	EXTRA_SIZE(struct regnode_1),        	/* LONGJMP      */
	EXTRA_SIZE(struct regnode_1),        	/* BRANCHJ      */
	EXTRA_SIZE(struct regnode_1),        	/* IFMATCH      */
	EXTRA_SIZE(struct regnode_1),        	/* UNLESSM      */
	EXTRA_SIZE(struct regnode_1),        	/* SUSPEND      */
	EXTRA_SIZE(struct regnode_1),        	/* IFTHEN       */
	EXTRA_SIZE(struct regnode_1),        	/* GROUPP       */
	EXTRA_SIZE(struct regnode_2L),       	/* EVAL         */
	0,                                   	/* MINMOD       */
	0,                                   	/* LOGICAL      */
	EXTRA_SIZE(struct regnode_1),        	/* RENUM        */
	EXTRA_SIZE(struct regnode_2L),       	/* GOSUB        */
	EXTRA_SIZE(struct regnode_1),        	/* GROUPPN      */
	EXTRA_SIZE(struct regnode_1),        	/* INSUBP       */
	EXTRA_SIZE(struct regnode_1),        	/* DEFINEP      */
	0,                                   	/* ENDLIKE      */
	EXTRA_SIZE(struct regnode_1),        	/* OPFAIL       */
	EXTRA_SIZE(struct regnode_2L),       	/* ACCEPT       */
	EXTRA_SIZE(struct regnode_1),        	/* VERB         */
	EXTRA_SIZE(struct regnode_1),        	/* PRUNE        */
	EXTRA_SIZE(struct regnode_1),        	/* MARKPOINT    */
	EXTRA_SIZE(struct regnode_1),        	/* SKIP         */
	EXTRA_SIZE(struct regnode_1),        	/* COMMIT       */
	EXTRA_SIZE(struct regnode_1),        	/* CUTGROUP     */
	0,                                   	/* KEEPS        */
	0,                                   	/* OPTIMIZED    */
	0,                                   	/* PSEUDO       */
	EXTRA_SIZE(struct regnode_p),        	/* REGEX_SET    */
};

/* reg_off_by_arg[] - Which argument holds the offset to the next node */

static const char reg_off_by_arg[] = {
	0,	/* END          */
	0,	/* SUCCEED      */
	0,	/* SBOL         */
	0,	/* MBOL         */
	0,	/* SEOL         */
	0,	/* MEOL         */
	0,	/* EOS          */
	0,	/* GPOS         */
	0,	/* BOUND        */
	0,	/* BOUNDL       */
	0,	/* BOUNDU       */
	0,	/* BOUNDA       */
	0,	/* NBOUND       */
	0,	/* NBOUNDL      */
	0,	/* NBOUNDU      */
	0,	/* NBOUNDA      */
	0,	/* REG_ANY      */
	0,	/* SANY         */
	0,	/* ANYOF        */
	0,	/* ANYOFD       */
	0,	/* ANYOFL       */
	0,	/* ANYOFPOSIXL  */
	0,	/* ANYOFH       */
	0,	/* ANYOFHb      */
	0,	/* ANYOFHr      */
	0,	/* ANYOFHs      */
	0,	/* ANYOFR       */
	0,	/* ANYOFRb      */
	0,	/* ANYOFM       */
	0,	/* NANYOFM      */
	0,	/* POSIXD       */
	0,	/* POSIXL       */
	0,	/* POSIXU       */
	0,	/* POSIXA       */
	0,	/* NPOSIXD      */
	0,	/* NPOSIXL      */
	0,	/* NPOSIXU      */
	0,	/* NPOSIXA      */
	0,	/* CLUMP        */
	0,	/* BRANCH       */
	0,	/* EXACT        */
	0,	/* LEXACT       */
	0,	/* EXACTL       */
	0,	/* EXACTF       */
	0,	/* EXACTFL      */
	0,	/* EXACTFU      */
	0,	/* EXACTFAA     */
	0,	/* EXACTFUP     */
	0,	/* EXACTFLU8    */
	0,	/* EXACTFAA_NO_TRIE */
	0,	/* EXACT_REQ8   */
	0,	/* LEXACT_REQ8  */
	0,	/* EXACTFU_REQ8 */
	0,	/* EXACTFU_S_EDGE */
	0,	/* LNBREAK      */
	0,	/* TRIE         */
	0,	/* TRIEC        */
	0,	/* AHOCORASICK  */
	0,	/* AHOCORASICKC */
	0,	/* NOTHING      */
	0,	/* TAIL         */
	0,	/* STAR         */
	0,	/* PLUS         */
	0,	/* CURLY        */
	0,	/* CURLYN       */
	0,	/* CURLYM       */
	0,	/* CURLYX       */
	0,	/* WHILEM       */
	0,	/* OPEN         */
	0,	/* CLOSE        */
	0,	/* SROPEN       */
	0,	/* SRCLOSE      */
	0,	/* REF          */
	0,	/* REFF         */
	0,	/* REFFL        */
	0,	/* REFFU        */
	0,	/* REFFA        */
	0,	/* REFN         */
	0,	/* REFFN        */
	0,	/* REFFLN       */
	0,	/* REFFUN       */
	0,	/* REFFAN       */
	1,	/* LONGJMP      */
	1,	/* BRANCHJ      */
	1,	/* IFMATCH      */
	1,	/* UNLESSM      */
	1,	/* SUSPEND      */
	1,	/* IFTHEN       */
	0,	/* GROUPP       */
	0,	/* EVAL         */
	0,	/* MINMOD       */
	0,	/* LOGICAL      */
	1,	/* RENUM        */
	0,	/* GOSUB        */
	0,	/* GROUPPN      */
	0,	/* INSUBP       */
	0,	/* DEFINEP      */
	0,	/* ENDLIKE      */
	0,	/* OPFAIL       */
	0,	/* ACCEPT       */
	0,	/* VERB         */
	0,	/* PRUNE        */
	0,	/* MARKPOINT    */
	0,	/* SKIP         */
	0,	/* COMMIT       */
	0,	/* CUTGROUP     */
	0,	/* KEEPS        */
	0,	/* OPTIMIZED    */
	0,	/* PSEUDO       */
	0,	/* REGEX_SET    */
};

#endif /* REG_COMP_C */


/* reg_name[] - Opcode/state names in string form, for debugging */

#ifndef DOINIT
EXTCONST char * PL_reg_name[];
#else
EXTCONST char * const PL_reg_name[] = {
	"END",                   	/* 0000 */
	"SUCCEED",               	/* 0x01 */
	"SBOL",                  	/* 0x02 */
	"MBOL",                  	/* 0x03 */
	"SEOL",                  	/* 0x04 */
	"MEOL",                  	/* 0x05 */
	"EOS",                   	/* 0x06 */
	"GPOS",                  	/* 0x07 */
	"BOUND",                 	/* 0x08 */
	"BOUNDL",                	/* 0x09 */
	"BOUNDU",                	/* 0x0a */
	"BOUNDA",                	/* 0x0b */
	"NBOUND",                	/* 0x0c */
	"NBOUNDL",               	/* 0x0d */
	"NBOUNDU",               	/* 0x0e */
	"NBOUNDA",               	/* 0x0f */
	"REG_ANY",               	/* 0x10 */
	"SANY",                  	/* 0x11 */
	"ANYOF",                 	/* 0x12 */
	"ANYOFD",                	/* 0x13 */
	"ANYOFL",                	/* 0x14 */
	"ANYOFPOSIXL",           	/* 0x15 */
	"ANYOFH",                	/* 0x16 */
	"ANYOFHb",               	/* 0x17 */
	"ANYOFHr",               	/* 0x18 */
	"ANYOFHs",               	/* 0x19 */
	"ANYOFR",                	/* 0x1a */
	"ANYOFRb",               	/* 0x1b */
	"ANYOFM",                	/* 0x1c */
	"NANYOFM",               	/* 0x1d */
	"POSIXD",                	/* 0x1e */
	"POSIXL",                	/* 0x1f */
	"POSIXU",                	/* 0x20 */
	"POSIXA",                	/* 0x21 */
	"NPOSIXD",               	/* 0x22 */
	"NPOSIXL",               	/* 0x23 */
	"NPOSIXU",               	/* 0x24 */
	"NPOSIXA",               	/* 0x25 */
	"CLUMP",                 	/* 0x26 */
	"BRANCH",                	/* 0x27 */
	"EXACT",                 	/* 0x28 */
	"LEXACT",                	/* 0x29 */
	"EXACTL",                	/* 0x2a */
	"EXACTF",                	/* 0x2b */
	"EXACTFL",               	/* 0x2c */
	"EXACTFU",               	/* 0x2d */
	"EXACTFAA",              	/* 0x2e */
	"EXACTFUP",              	/* 0x2f */
	"EXACTFLU8",             	/* 0x30 */
	"EXACTFAA_NO_TRIE",      	/* 0x31 */
	"EXACT_REQ8",            	/* 0x32 */
	"LEXACT_REQ8",           	/* 0x33 */
	"EXACTFU_REQ8",          	/* 0x34 */
	"EXACTFU_S_EDGE",        	/* 0x35 */
	"LNBREAK",               	/* 0x36 */
	"TRIE",                  	/* 0x37 */
	"TRIEC",                 	/* 0x38 */
	"AHOCORASICK",           	/* 0x39 */
	"AHOCORASICKC",          	/* 0x3a */
	"NOTHING",               	/* 0x3b */
	"TAIL",                  	/* 0x3c */
	"STAR",                  	/* 0x3d */
	"PLUS",                  	/* 0x3e */
	"CURLY",                 	/* 0x3f */
	"CURLYN",                	/* 0x40 */
	"CURLYM",                	/* 0x41 */
	"CURLYX",                	/* 0x42 */
	"WHILEM",                	/* 0x43 */
	"OPEN",                  	/* 0x44 */
	"CLOSE",                 	/* 0x45 */
	"SROPEN",                	/* 0x46 */
	"SRCLOSE",               	/* 0x47 */
	"REF",                   	/* 0x48 */
	"REFF",                  	/* 0x49 */
	"REFFL",                 	/* 0x4a */
	"REFFU",                 	/* 0x4b */
	"REFFA",                 	/* 0x4c */
	"REFN",                  	/* 0x4d */
	"REFFN",                 	/* 0x4e */
	"REFFLN",                	/* 0x4f */
	"REFFUN",                	/* 0x50 */
	"REFFAN",                	/* 0x51 */
	"LONGJMP",               	/* 0x52 */
	"BRANCHJ",               	/* 0x53 */
	"IFMATCH",               	/* 0x54 */
	"UNLESSM",               	/* 0x55 */
	"SUSPEND",               	/* 0x56 */
	"IFTHEN",                	/* 0x57 */
	"GROUPP",                	/* 0x58 */
	"EVAL",                  	/* 0x59 */
	"MINMOD",                	/* 0x5a */
	"LOGICAL",               	/* 0x5b */
	"RENUM",                 	/* 0x5c */
	"GOSUB",                 	/* 0x5d */
	"GROUPPN",               	/* 0x5e */
	"INSUBP",                	/* 0x5f */
	"DEFINEP",               	/* 0x60 */
	"ENDLIKE",               	/* 0x61 */
	"OPFAIL",                	/* 0x62 */
	"ACCEPT",                	/* 0x63 */
	"VERB",                  	/* 0x64 */
	"PRUNE",                 	/* 0x65 */
	"MARKPOINT",             	/* 0x66 */
	"SKIP",                  	/* 0x67 */
	"COMMIT",                	/* 0x68 */
	"CUTGROUP",              	/* 0x69 */
	"KEEPS",                 	/* 0x6a */
	"OPTIMIZED",             	/* 0x6b */
	"PSEUDO",                	/* 0x6c */
	"REGEX_SET",             	/* 0x6d */
	/* ------------ States ------------- */
	"TRIE_next",             	/* REGNODE_MAX +0x01 */
	"TRIE_next_fail",        	/* REGNODE_MAX +0x02 */
	"EVAL_B",                	/* REGNODE_MAX +0x03 */
	"EVAL_B_fail",           	/* REGNODE_MAX +0x04 */
	"EVAL_postponed_AB",     	/* REGNODE_MAX +0x05 */
	"EVAL_postponed_AB_fail",	/* REGNODE_MAX +0x06 */
	"CURLYX_end",            	/* REGNODE_MAX +0x07 */
	"CURLYX_end_fail",       	/* REGNODE_MAX +0x08 */
	"WHILEM_A_pre",          	/* REGNODE_MAX +0x09 */
	"WHILEM_A_pre_fail",     	/* REGNODE_MAX +0x0a */
	"WHILEM_A_min",          	/* REGNODE_MAX +0x0b */
	"WHILEM_A_min_fail",     	/* REGNODE_MAX +0x0c */
	"WHILEM_A_max",          	/* REGNODE_MAX +0x0d */
	"WHILEM_A_max_fail",     	/* REGNODE_MAX +0x0e */
	"WHILEM_B_min",          	/* REGNODE_MAX +0x0f */
	"WHILEM_B_min_fail",     	/* REGNODE_MAX +0x10 */
	"WHILEM_B_max",          	/* REGNODE_MAX +0x11 */
	"WHILEM_B_max_fail",     	/* REGNODE_MAX +0x12 */
	"BRANCH_next",           	/* REGNODE_MAX +0x13 */
	"BRANCH_next_fail",      	/* REGNODE_MAX +0x14 */
	"CURLYM_A",              	/* REGNODE_MAX +0x15 */
	"CURLYM_A_fail",         	/* REGNODE_MAX +0x16 */
	"CURLYM_B",              	/* REGNODE_MAX +0x17 */
	"CURLYM_B_fail",         	/* REGNODE_MAX +0x18 */
	"IFMATCH_A",             	/* REGNODE_MAX +0x19 */
	"IFMATCH_A_fail",        	/* REGNODE_MAX +0x1a */
	"CURLY_B_min",           	/* REGNODE_MAX +0x1b */
	"CURLY_B_min_fail",      	/* REGNODE_MAX +0x1c */
	"CURLY_B_max",           	/* REGNODE_MAX +0x1d */
	"CURLY_B_max_fail",      	/* REGNODE_MAX +0x1e */
	"COMMIT_next",           	/* REGNODE_MAX +0x1f */
	"COMMIT_next_fail",      	/* REGNODE_MAX +0x20 */
	"MARKPOINT_next",        	/* REGNODE_MAX +0x21 */
	"MARKPOINT_next_fail",   	/* REGNODE_MAX +0x22 */
	"SKIP_next",             	/* REGNODE_MAX +0x23 */
	"SKIP_next_fail",        	/* REGNODE_MAX +0x24 */
	"CUTGROUP_next",         	/* REGNODE_MAX +0x25 */
	"CUTGROUP_next_fail",    	/* REGNODE_MAX +0x26 */
	"KEEPS_next",            	/* REGNODE_MAX +0x27 */
	"KEEPS_next_fail",       	/* REGNODE_MAX +0x28 */
};
#endif /* DOINIT */

/* PL_reg_extflags_name[] - Opcode/state names in string form, for debugging */

#ifndef DOINIT
EXTCONST char * PL_reg_extflags_name[];
#else
EXTCONST char * const PL_reg_extflags_name[] = {
	/* Bits in extflags defined: 11111111111111110000111111111111 */
	"MULTILINE",        /* 0x00000001 */
	"SINGLELINE",       /* 0x00000002 */
	"FOLD",             /* 0x00000004 */
	"EXTENDED",         /* 0x00000008 */
	"EXTENDED_MORE",    /* 0x00000010 */
	"NOCAPTURE",        /* 0x00000020 */
	"KEEPCOPY",         /* 0x00000040 */
	"CHARSET0",         /* 0x00000080 : "CHARSET" - 0x00000380 */
	"CHARSET1",         /* 0x00000100 : "CHARSET" - 0x00000380 */
	"CHARSET2",         /* 0x00000200 : "CHARSET" - 0x00000380 */
	"STRICT",           /* 0x00000400 */
	"SPLIT",            /* 0x00000800 */
	"UNUSED_BIT_12",    /* 0x00001000 */
	"UNUSED_BIT_13",    /* 0x00002000 */
	"UNUSED_BIT_14",    /* 0x00004000 */
	"UNUSED_BIT_15",    /* 0x00008000 */
	"NO_INPLACE_SUBST", /* 0x00010000 */
	"EVAL_SEEN",        /* 0x00020000 */
	"UNBOUNDED_QUANTIFIER_SEEN",/* 0x00040000 */
	"CHECK_ALL",        /* 0x00080000 */
	"MATCH_UTF8",       /* 0x00100000 */
	"USE_INTUIT_NOML",  /* 0x00200000 */
	"USE_INTUIT_ML",    /* 0x00400000 */
	"INTUIT_TAIL",      /* 0x00800000 */
	"IS_ANCHORED",      /* 0x01000000 */
	"COPY_DONE",        /* 0x02000000 */
	"TAINTED_SEEN",     /* 0x04000000 */
	"TAINTED",          /* 0x08000000 */
	"START_ONLY",       /* 0x10000000 */
	"SKIPWHITE",        /* 0x20000000 */
	"WHITE",            /* 0x40000000 */
	"NULL",             /* 0x80000000 */
};
#endif /* DOINIT */

#ifdef DEBUGGING
#  define REG_EXTFLAGS_NAME_SIZE 32
#endif

/* PL_reg_intflags_name[] - Opcode/state names in string form, for debugging */

#ifndef DOINIT
EXTCONST char * PL_reg_intflags_name[];
#else
EXTCONST char * const PL_reg_intflags_name[] = {
	"SKIP",                       /* 0x00000001 - PREGf_SKIP */
	"IMPLICIT",                   /* 0x00000002 - PREGf_IMPLICIT -  Converted .* to ^.*  */
	"NAUGHTY",                    /* 0x00000004 - PREGf_NAUGHTY -  how exponential is this pattern?  */
	"VERBARG_SEEN",               /* 0x00000008 - PREGf_VERBARG_SEEN */
	"CUTGROUP_SEEN",              /* 0x00000010 - PREGf_CUTGROUP_SEEN */
	"USE_RE_EVAL",                /* 0x00000020 - PREGf_USE_RE_EVAL -  compiled with "use re 'eval'"  */
	"NOSCAN",                     /* 0x00000040 - PREGf_NOSCAN */
	"GPOS_SEEN",                  /* 0x00000100 - PREGf_GPOS_SEEN */
	"GPOS_FLOAT",                 /* 0x00000200 - PREGf_GPOS_FLOAT */
	"ANCH_MBOL",                  /* 0x00000400 - PREGf_ANCH_MBOL */
	"ANCH_SBOL",                  /* 0x00000800 - PREGf_ANCH_SBOL */
	"ANCH_GPOS",                  /* 0x00001000 - PREGf_ANCH_GPOS */
	"RECURSE_SEEN",               /* 0x00002000 - PREGf_RECURSE_SEEN */
};
#endif /* DOINIT */

#ifdef DEBUGGING
#  define REG_INTFLAGS_NAME_SIZE 13
#endif

/* The following have no fixed length. U8 so we can do strchr() on it. */
#define REGNODE_VARIES(node) (PL_varies_bitmask[(node) >> 3] & (1 << ((node) & 7)))

#ifndef DOINIT
EXTCONST U8 PL_varies[] __attribute__deprecated__;
#else
EXTCONST U8 PL_varies[] __attribute__deprecated__ = {
    CLUMP, BRANCH, STAR, PLUS, CURLY, CURLYN, CURLYM, CURLYX, WHILEM, REF,
    REFF, REFFL, REFFU, REFFA, REFN, REFFN, REFFLN, REFFUN, REFFAN,
    BRANCHJ, SUSPEND, IFTHEN,
    0
};
#endif /* DOINIT */

#ifndef DOINIT
EXTCONST U8 PL_varies_bitmask[];
#else
EXTCONST U8 PL_varies_bitmask[] = {
    0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0xE0, 0x0F, 0xFF, 0xCB, 0x00, 0x00, 0x00
};
#endif /* DOINIT */

/* The following always have a length of 1. U8 we can do strchr() on it. */
/* (Note that length 1 means "one character" under UTF8, not "one octet".) */
#define REGNODE_SIMPLE(node) (PL_simple_bitmask[(node) >> 3] & (1 << ((node) & 7)))

#ifndef DOINIT
EXTCONST U8 PL_simple[] __attribute__deprecated__;
#else
EXTCONST U8 PL_simple[] __attribute__deprecated__ = {
    REG_ANY, SANY, ANYOF, ANYOFD, ANYOFL, ANYOFPOSIXL, ANYOFH, ANYOFHb,
    ANYOFHr, ANYOFHs, ANYOFR, ANYOFRb, ANYOFM, NANYOFM, POSIXD, POSIXL,
    POSIXU, POSIXA, NPOSIXD, NPOSIXL, NPOSIXU, NPOSIXA, REGEX_SET,
    0
};
#endif /* DOINIT */

#ifndef DOINIT
EXTCONST U8 PL_simple_bitmask[];
#else
EXTCONST U8 PL_simple_bitmask[] = {
    0x00, 0x00, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20
};
#endif /* DOINIT */

/* ex: set ro: */
